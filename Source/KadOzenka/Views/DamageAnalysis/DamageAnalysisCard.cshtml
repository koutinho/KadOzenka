@using CIPJS.DAL.DamageAnalysis;
@using ObjectModel.Directory;
@using Core.Shared.Extensions;
@using CIPJS.Models.Documents;
@using ObjectModel.Insur;
@using Newtonsoft.Json;
@using Core.SRD

@model DamageAnalysisCardDto

@{
    var cultureRu = new System.Globalization.CultureInfo("ru-RU");
}

@using (Html.BeginForm("DamageAnalysisCard", "DamageAnalysis", FormMethod.Post))
{
    @Html.HiddenFor(m => m.Id)
    @Html.HiddenFor(m => m.TypeCode)
    @Html.HiddenFor(m => m.InsurCompanyId)
    @Html.HiddenFor(m => m.ObjId)
    @Html.HiddenFor(m => m.IsReadOnly)
    <ul id="ls_panelbar" class="panelbar">
        <li id="DA_CaseDetails">
            <span>Реквизиты дела</span>
            <div>
                <div class="form-horizontal col-sm-12">
                    <div class="form-group"></div>
                    <div class="form-group">
                        <div class="col-sm-2">
                            @Html.CustomLabelFor(m => m.NomDoc)
                        </div>
                        <div class="col-sm-2">
                            @Html.KendoTextBoxFor(m => m.NomDoc, editMode: false)
                        </div>
                        <div class="col-sm-2">
                            @Html.CustomLabelFor(m => m.NomDate)
                        </div>
                        <div class="col-sm-2">
                            @Html.KendoDatePickerFor(m => m.NomDate, Model.IsReadOnly)
                        </div>
                        <div class="col-sm-1">
                            @Html.CustomLabelFor(m => m.StatusDoc, NotSetRequired: true)
                        </div>
                        <div class="col-sm-3">
                            @Html.KendoEnumDropDownListFor(m => m.StatusDoc, isReadonly: true, setBold: true)
                        </div>
                    </div>
                    @if (Model.Id > 0)
                    {
                        <div class="form-group">
                            <div class="col-sm-2">
                                @Html.CustomLabelFor(m => m.BaseDamageExists)
                            </div>
                            <div class="col-sm-2">
                                @Html.KendoCheckBoxFor(x => x.BaseDamageExists, true, true)
                            </div>
                            <div class="col-sm-2">
                                @Html.CustomLabelFor(m => m.BaseDamageNomDoc)
                            </div>
                            <div class="col-sm-6">
                                @Html.KendoTextBoxFor(m => m.BaseDamageNomDoc, true)
                            </div>
                        </div>
                    }
                    <div class="form-group"></div>
                </div>
            </div>
        </li>
        <li id="DA_InsurData">
            <span>Данные от Страховой компании</span>
            <div>
                <div class="form-horizontal col-sm-12">
                    <div class="form-group"></div>
                    <div class="form-group">
                        <div class="col-sm-2">
                            @Html.CustomLabelFor(m => m.InsurCompanyName)
                        </div>
                        <div class="col-sm-3">
                            @Html.KendoAutoCopmpliteFor(x => x.InsurCompanyName, "FullName", "InsuranceOrganization", "GetByName", "function() {return {name: $('#InsurCompanyName').val()};}",
isReadonly: Model.IsReadOnly)
                        </div>
                        <div class="col-sm-1">
                            @Html.KendoButton("selectInsurCompany", "...", Model.IsReadOnly)
                        </div>
                        <div class="col-sm-2">
                            @Html.CustomLabelFor(m => m.SumDamage)
                        </div>
                        <div class="col-sm-4">
                            @Html.KendoNumericTextBoxFor(m => m.SumDamage, precision: 2, isReadonly: Model.IsReadOnly)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-2">
                            @Html.CustomLabelFor(m => m.InsurNom)
                        </div>
                        <div class="col-sm-4">
                            @Html.KendoTextBoxFor(m => m.InsurNom, Model.IsReadOnly)
                        </div>
                        <div class="col-sm-2">
                            @Html.CustomLabelFor(m => m.StrahPlat)
                        </div>
                        <div class="col-sm-4">
                            @Html.KendoNumericTextBoxFor(m => m.StrahPlat, precision: 2, isReadonly: Model.IsReadOnly)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-2">
                            @Html.CustomLabelFor(m => m.InsurDate)
                        </div>
                        <div class="col-sm-4">
                            @Html.KendoDatePickerFor(m => m.InsurDate, Model.IsReadOnly)
                        </div>
                        @if (Model.TypeCode == ContractType.Dwelling)
                        {
                            <div class="col-sm-2">
                                @Html.CustomLabelFor(m => m.CausesOfDamageGP, NotSetRequired: true)
                            </div>
                            <div class="col-sm-4">
                                @Html.KendoEnumDropDownListFor(m => m.CausesOfDamageGP, Model.IsReadOnly)
                            </div>
                        }
                        @if (Model.TypeCode == ContractType.CommonOwnership)
                        {
                            <div class="col-sm-2">
                                @Html.CustomLabelFor(m => m.CausesOfDamageOI, NotSetRequired: true)
                            </div>
                            <div class="col-sm-4">
                                @Html.KendoEnumDropDownListFor(m => m.CausesOfDamageOI, isReadonly: Model.IsReadOnly)
                            </div>
                        }
                    </div>
                    <div class="form-group">
                        <div class="col-sm-2">
                            @Html.CustomLabelFor(m => m.DateInputGBY)
                        </div>
                        <div class="col-sm-4">
                            @Html.KendoDatePickerFor(m => m.DateInputGBY, Model.IsReadOnly)
                        </div>
                        @if (Model.TypeCode == ContractType.Dwelling)
                        {
                            <div class="col-sm-2">
                                @Html.CustomLabelFor(m => m.SubReasonCausesOfDamage, NotSetRequired: true)
                            </div>
                            <div class="col-sm-4">
                                <input id="SubReasonCausesOfDamage" style="width: 100%" @if (Model.IsReadOnly) { <text> readonly="readonly" </text> } editmode="true" />
                            </div>
                        }
                        @if (Model.TypeCode == ContractType.CommonOwnership)
                        {
                            <div class="col-sm-2">
                                @Html.CustomLabelFor(m => m.Fault, NotSetRequired: true)
                            </div>
                            <div class="col-sm-4">
                                @Html.KendoTextBoxFor(m => m.Fault, isReadonly: Model.IsReadOnly)
                            </div>
                        }
                    </div>
                    <div class="form-group">
                        <div class="col-sm-2">
                            @Html.CustomLabelFor(m => m.DamageData)
                        </div>
                        <div class="col-sm-4">
                            @Html.KendoDatePickerFor(m => m.DamageData, Model.IsReadOnly)
                        </div>
                        @if (Model.TypeCode == ContractType.Dwelling)
                        {
                            <div class="col-sm-2">
                                @Html.CustomLabelFor(m => m.RefinementSubReasonCOD, NotSetRequired: true)
                            </div>
                            <div class="col-sm-4">
                                <input id="RefinementSubReasonCOD" style="width: 100%" @if (Model.IsReadOnly) {<text>readonly="readonly"</text>} editmode="true" />
                            </div>
                        }
                    </div>
                    <h5 class="text-center">
                        <strong>
                            Данные платежа от СК из файла
                        </strong>
                    </h5>
                    @await Html.PartialAsync("~/Views/DamageAnalysis/DamageAnalysisInsurCompanyPayTo.cshtml", Model.InsurOrgPayToDto)
                    <div class="form-group"></div>
                </div>
            </div>
        </li>
        <li id="DA_Object">
            @if (Model.TypeCode == ContractType.Dwelling)
            {
                <span>Жилое помещение</span>
            }
            @if (Model.TypeCode == ContractType.CommonOwnership)
            {
                <span>Многоквартирный дом</span>
            }
            <div>
                <div class="form-horizontal col-sm-12">
                    <div class="form-group"></div>
                    <div class="form-group">
                        <div class="col-sm-2">
                            @Html.CustomLabelFor(m => m.UNOM)
                        </div>
                        <div class="col-sm-3">
                            @Html.KendoTextBoxFor(m => m.UNOM, true)
                        </div>
                        <div class="col-sm-1">
                            @Html.KendoButton("selectObject", "...", Model.IsReadOnly || Model.Id <= 0)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-2">
                            @Html.CustomLabelFor(x => x.Okrug)
                        </div>
                        <div class="col-sm-4">
                            @Html.KendoTextBoxFor(m => m.Okrug, editMode: false)
                        </div>
                        <div class="col-sm-2">
                            @Html.CustomLabelFor(x => x.District)
                        </div>
                        <div class="col-sm-4">
                            @Html.KendoTextBoxFor(m => m.District, editMode: false)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-2">
                            @Html.CustomLabelFor(m => m.Address)
                        </div>
                        <div class="col-sm-10">
                            @Html.KendoTextBoxFor(m => m.Address, true)
                        </div>
                    </div>
                    <div class="form-group">
                        @if (Model.TypeCode == ContractType.Dwelling)
                        {
                            <div class="col-sm-2">
                                @Html.CustomLabelFor(m => m.FlatNumber)
                            </div>
                            <div class="col-sm-4">
                                @Html.KendoTextBoxFor(m => m.FlatNumber, true)
                            </div>
                            <div class="col-sm-2">
                                @Html.CustomLabelFor(m => m.Area)
                            </div>
                            <div class="col-sm-4">
                                @Html.KendoNumericTextBoxFor(m => m.Area, precision: 2, isReadonly: true)
                            </div>
                        }
                        @if (Model.TypeCode == ContractType.CommonOwnership)
                        {
                            <div class="col-sm-2">
                                @Html.CustomLabelFor(m => m.CadastrNumber)
                            </div>
                            <div class="col-sm-10">
                                @Html.KendoTextBoxFor(m => m.CadastrNumber, true)
                            </div>
                        }
                    </div>
                    @if (Model.TypeCode == ContractType.Dwelling)
                    {
                        <div class="form-group">
                            <div class="col-sm-2">
                                @Html.CustomLabelFor(m => m.FlatTypeName)
                            </div>
                            <div class="col-sm-4">
                                @Html.KendoTextBoxFor(m => m.FlatTypeName, true)
                            </div>
                            <div class="col-sm-2">
                                @Html.CustomLabelFor(m => m.FlatStatus)
                            </div>
                            <div class="col-sm-4">
                                @Html.KendoTextBoxFor(m => m.FlatStatus, true)
                            </div>
                        </div>
                    }
                    <div class="form-group" id="otherDamages" style="display: none;">
                        <div class="col-sm-12">
                            <h5 class="text-center text-blue">
                                <strong id="otherDamagesTitle"></strong>
                            </h5>
                            <div id="otherDamagesGrid"></div>
                        </div>
                    </div>
                </div>
            </div>
        </li>
        <li id="DA_Contrats">
            <span>Договора страхования</span>
            <div>
                <div class="form-horizontal col-sm-12">
                    <div class="form-group"></div>
                    <div class="form-group">
                        <div class="col-sm-2">
                            @Html.CustomLabelFor(m => m.PartInsur)
                        </div>
                        <div class="col-sm-3">
                            @Html.HiddenFor(m => m.PartTown)
                            @Html.KendoNumericTextBoxFor(m => m.PartInsur, isReadonly: true, editMode: false)
                        </div>
                        <div class="col-sm-1">
                            @Html.KendoButton("selectInsurPart", "...", Model.IsReadOnly)
                        </div>
                        @if (Model.TypeCode == ContractType.CommonOwnership)
                        {
                            <div class="col-sm-2">
                                @Html.CustomLabelFor(m => m.Franchise)
                            </div>
                            <div class="col-sm-4">
                                @Html.KendoNumericTextBoxFor(m => m.Franchise, 2, Model.IsReadOnly)
                            </div>
                        }
                    </div>
                    <div class="form-group"></div>
                    @if (Model.TypeCode == ContractType.Dwelling)
                    {
                        @await Html.PartialAsync("~/Views/DamageAnalysis/DamageAnalysisContractGP.cshtml", Model.Contracts)
                    }
                    @if (Model.TypeCode == ContractType.CommonOwnership)
                    {
                        @await Html.PartialAsync("~/Views/DamageAnalysis/DamageAnalysisContractOI.cshtml", Model.Contracts)
                    }
                    <div class="form-group"></div>
                </div>
            </div>
        </li>
        @if (Model.Id > 0)
        {
            <li id="DA_Documents">
                <span>Документы от СК</span>
                <div>
                    <div class="form-horizontal col-sm-12">
                        <div class="form-group"></div>
                        @await Html.PartialAsync("~/Views/Documents/Documents.cshtml", new DocumentObjDto { ObjId = Model.Id, ReestrId = OMDamage.GetRegisterId(), ContractType = Model.TypeCode })
                        <div class="form-group"></div>
                        <div class="form-group">
                            <div class="col-sm-2">
                                @Html.CustomLabelFor(m => m.DateDocLastGBY)
                            </div>
                            <div class="col-sm-4">
                                @Html.KendoDatePickerFor(m => m.DateDocLastGBY, Model.IsReadOnly)
                            </div>
                            <div class="col-sm-2">
                                @Html.CustomLabelFor(m => m.DateDocAddGBY)
                            </div>
                            <div class="col-sm-4">
                                @Html.KendoDatePickerFor(m => m.DateDocAddGBY, Model.IsReadOnly)
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-sm-2">
                                @Html.CustomLabelFor(m => m.Note)
                            </div>
                            <div class="col-sm-10">
                                @Html.TextBoxAreaFor(m => m.Note, 1, 2, Model.IsReadOnly)
                            </div>
                        </div>
                    </div>
                    <div class="form-group"></div>
                </div>
            </li>
        }
        @if (Model.TypeCode == ContractType.Dwelling)
        {
            <li id="DA_Amount">
                <span>Расчет ущерба</span>
                <div>
                    <div class="form-horizontal col-sm-12">
                        <div class="form-group"></div>
                        <div class="form-group">
                            <div class="col-sm-2">
                                @Html.CustomLabelFor(m => m.BuildingStructure, NotSetRequired: true)
                            </div>
                            <div class="col-sm-10">
                                @Html.KendoEnumDropDownListFor(m => m.BuildingStructure, Model.IsReadOnly)
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-sm-2">
                                @Html.CustomLabelFor(m => m.Floors, NotSetRequired: true)
                            </div>
                            <div class="col-sm-10">
                                <input id="Floors" style="width: 100%" @if (Model.IsReadOnly) { <text> readonly="readonly" ;</text> } editmode="true" />
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-sm-2">
                                @Html.CustomLabelFor(m => m.FloorType, NotSetRequired: true)
                            </div>
                            <div class="col-sm-10">
                                @Html.KendoEnumDropDownListFor(x => x.FloorType, Model.IsReadOnly)
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-sm-2">
                                @Html.CustomLabelFor(m => m.StoveType, NotSetRequired: true)
                            </div>
                            <div class="col-sm-10">
                                @Html.KendoEnumDropDownListFor(x => x.StoveType, Model.IsReadOnly)
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-sm-2">
                                @Html.CustomLabelFor(m => m.EstimatedValue)
                            </div>
                            <div class="col-sm-10">
                                @Html.KendoNumericTextBoxFor(m => m.EstimatedValue, precision: 2, isReadonly: true)
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-sm-2">
                            </div>
                            <div class="col-sm-2">
                                @Html.KendoCheckBox("Ввод значений", "IsManual", true, Model.IsReadOnly)
                            </div>
                            <div class="col-sm-8">
                                @Html.Label("EstimatedValueDifferent", "(Обратите внимание, страховая стоимость за 1 кв.м. отличается от установленной для договора установленной в договоре на дату СС)", Model.EstimatedValueDifferent.HasValue && Model.EstimatedValueDifferent.Value ? new { @class = "text-red", style = "display: block;" } : new { @class = "text-red", style = "display: none;" })
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-sm-12">
                                @if (Model.Id > -1)
                                {
                                    <text>
                                        @await Html.PartialAsync("~/Views/DamageAnalysis/DamageAnalysisDamageCalc.cshtml", Model.Id.Value)
                                    </text>
                                }
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-sm-2">
                                @Html.CustomLabelFor(m => m.FlagSlygebka)
                            </div>
                            <div class="col-sm-4">
                                @Html.KendoCheckBoxFor(m => m.FlagSlygebka, Model.IsReadOnly, true)
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-sm-2">
                                @Html.Label("SumDamageClone", "Размер ущерба для расчета выплаты по данным СК")
                            </div>
                            <div class="col-sm-4">
                                @(Html.Kendo().NumericTextBox<decimal>()
                                                .Name("SumDamageClone")
                                                .Format("N2")
                                                .Decimals(2)
                                                .HtmlAttributes(new { @style = "width: 100%;", @readonly = "readonly" })
                                                .Spinners(false)
                                                .Value(Model.SumDamage))
                            </div>
                            <div class="col-sm-2">
                                @Html.Label("SumDamageBase", "Размер ущерба для расчета выплаты по данным ОПС")
                            </div>
                            <div class="col-sm-4">
                                @Html.KendoNumericTextBoxFor(m => m.SumDamageBase, 2, Model.IsReadOnly || !Model.FlagSlygebka.HasValue || !Model.FlagSlygebka.Value, true)
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-sm-2">
                                @Html.CustomLabelFor(m => m.CalcNote)
                            </div>
                            <div class="col-sm-10">
                                @Html.TextAreaFor(m => m.CalcNote, Model.IsReadOnly ? new { @class = "k-textbox", @style = "width: 100%;height: 50px;resize: none;", @readonly = "readonly", editmode = "true" } : (object)new { @class = "k-textbox", @style = "width: 100%;height: 50px;resize: none;", editmode = "true" })
                            </div>
                        </div>
                    </div>
                </div>
            </li>
            @if (Model.Id > -1)
            {
                <li id="DA_DamageInfos">
                    <span>Сведения о повреждениях</span>
                    <div>
                        <div class="form-horizontal col-sm-12">
                            <div class="form-group"></div>
                            <div class="form-group">
                                <div class="col-sm-12">
                                    @await Html.PartialAsync("~/Views/DamageAnalysis/DamageAnalysisDamageAssessments.cshtml", Model.Id)
                                </div>
                            </div>
                            <div class="form-group"></div>
                        </div>
                    </div>
                </li>
            }
        }
        <li id="DA_Bank" class="invoice-panel">
            <span>Выплаты города/отказы</span>
            @if (Model.Id > 0)
            {
                <div>
                    <div class="form-horizontal col-sm-12">
                        <div class="form-group"></div>
                        <div class="invoce-panel-ajax-loading" data-request-type="GET" data-url="@Url.Content("~/Invoice/Index")" data-param-damageId="@Model.Id" data-param-isReadOnly="@Model.IsReadOnly" data-loader="true"></div>
                        <div class="form-group">
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div id="invoice-panel-placeholder"></div>
            }
        </li>
        @if (Model.Id > 0)
        {
            <li id="DA_PrintForms">
                <span>Печатные формы</span>
                <div>
                    <div class="form-horizontal col-sm-12">
                        <div style="margin-top:10px">
                        @if (Model.TypeCode == ContractType.Dwelling && SRDSession.Current.CheckAccessToFunction(ObjectModel.SRD.SRDCoreFunctions.INSUR_DAMAGE_FLAT_FLAG_ZAKLUCH_REISSUE))
                        {
                            @Html.Kendo().CheckBoxFor(x => x.FlagZakluchReissue).Enable(false).HtmlAttributes(new { editmode="true" })
                        }
                        </div>
                        <div class="printforms-placeholder" data-request-type="GET" data-url="@Url.Content("~/DamageAnalysis/CCCSavedReport")" data-param-objectId="@Model.Id" data-param-uniqueSessionKey="@ViewBag.UniqueSessionKey" data-param-canEdit="@true" data-loader="true"></div>
                        <div class="form-group"></div>
                    </div>
                </div>
            </li>
            <li id="DA_Comments">
                <span>Комментарии</span>
                <div>
                    <div class="form-horizontal col-sm-12">
                        <div class="form-group"></div>
                        <div class="ajax-data-loading" data-request-type="GET" data-url="@Url.Content("~/Comment/Index")" data-param-reestrId="313" data-param-objectId="@Model.Id" data-param-isReadOnly="@Model.IsReadOnly" data-loader="true"></div>
                        <div class="form-group">
                        </div>
                    </div>
                </div>
            </li>
            <li id="DA_Agreements">
                <span>Согласование</span>
                <div>
                    <div class="form-horizontal col-sm-12">
                        <div class="form-group"></div>
                        <div class="form-group">
                            <div class="col-sm-2">
                                @Html.CustomLabel("Дело создано")
                            </div>
                            <div class="col-sm-1 col-sm-offset-2">
                                @Html.CustomLabelFor(m => m.CalculatePersonDate)
                            </div>
                            <div class="col-sm-2">
                                @Html.KendoDatePickerFor(m => m.CalculatePersonDate, true, "dd.MM.yyyy HH:mm", editMode: true)
                            </div>
                            <div class="col-sm-1">
                                @Html.CustomLabelFor(m => m.CalculatePersonFIO)
                            </div>
                            <div class="col-sm-4">
                                @Html.KendoTextBoxFor(m => m.CalculatePersonFIO, true)
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-sm-1 col-sm-offset-7">
                                @Html.CustomLabelFor(m => m.CalculatePersonPost)
                            </div>
                            <div class="col-sm-4">
                                @Html.TextBoxAreaFor(m => m.CalculatePersonPost, 1, 2, true)
                            </div>
                        </div>
                        <div class="form-group mrt60">
                            <div class="col-sm-2">
                                @Html.KendoButton("setSendToCheck", "Передано на проверку", true, editMode: Model.CanEdit && Model.CanSendToCheck)
                            </div>
                            <div class="col-sm-1 col-sm-offset-2">
                                @Html.CustomLabelFor(m => m.InspectorPersonCheckDate)
                            </div>
                            <div class="col-sm-2">
                                @Html.KendoDatePickerFor(m => m.InspectorPersonCheckDate, true, "dd.MM.yyyy HH:mm")
                            </div>
                            <div class="col-sm-1">
                                @Html.CustomLabelFor(m => m.InspectorPersonCheckFIO)
                            </div>
                            <div class="col-sm-4">
                                @Html.KendoTextBoxFor(m => m.InspectorPersonCheckFIO, true)
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-sm-1 col-sm-offset-7">
                                @Html.CustomLabelFor(m => m.InspectorPersonCheckPost)
                            </div>
                            <div class="col-sm-4">
                                @Html.TextBoxAreaFor(m => m.InspectorPersonCheckPost, 1, 2, true)
                            </div>
                        </div>
                        <div class="form-group mrt60">
                            <div class="col-sm-2">
                                @Html.KendoButton("setCheckedStatus", "Проверено", true, editMode: Model.CanEdit && Model.CanChecked)
                            </div>
                            <div class="col-sm-2">
                                @Html.KendoButton("returnToRevision", "Вернуть на доработку", true, editMode: Model.CanEdit && Model.CanChecked)
                            </div>
                            <div class="col-sm-1">
                                @Html.CustomLabelFor(m => m.InspectorPersonDate)
                            </div>
                            <div class="col-sm-2">
                                @Html.KendoDatePickerFor(m => m.InspectorPersonDate, true, "dd.MM.yyyy HH:mm")
                            </div>
                            <div class="col-sm-1">
                                @Html.CustomLabelFor(m => m.InspectorPersonFIO)
                            </div>
                            <div class="col-sm-4">
                                @Html.KendoTextBoxFor(m => m.InspectorPersonFIO, true)
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-sm-1 col-sm-offset-7">
                                @Html.CustomLabelFor(m => m.InspectorPersonPost)
                            </div>
                            <div class="col-sm-4">
                                @Html.TextBoxAreaFor(m => m.InspectorPersonPost, 1, 2, true)
                            </div>
                        </div>
                        <div class="form-group mrt60">
                            <div class="col-sm-2">
                                @Html.KendoButton("setAgreedStatus", "Согласовано", true, editMode: Model.CanEdit && Model.CanAgreed)
                            </div>
                            <div class="col-sm-2">
                                @Html.KendoButton("returnToRevisionAgreed", "Вернуть на доработку", true, editMode: Model.CanEdit && Model.CanAgreed)
                            </div>
                            <div class="col-sm-1">
                                @Html.CustomLabelFor(m => m.PrimaryMatchingDate)
                            </div>
                            <div class="col-sm-2">
                                @Html.KendoDatePickerFor(m => m.PrimaryMatchingDate, true, "dd.MM.yyyy HH:mm")
                            </div>
                            <div class="col-sm-1">
                                @Html.CustomLabelFor(m => m.PrimaryMatchingFIO)
                            </div>
                            <div class="col-sm-4">
                                @Html.KendoTextBoxFor(m => m.PrimaryMatchingFIO, true)
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-sm-2">
                            </div>
                            <div class="col-sm-2">
                                @Html.KendoButton("returnToCheck", "Вернуть на проверку", true, editMode: Model.CanEdit && Model.CanAgreed)
                            </div>
                            <div class="col-sm-1 col-sm-offset-3">
                                @Html.CustomLabelFor(m => m.PrimaryMatchingPost)
                            </div>
                            <div class="col-sm-4">
                                @Html.TextBoxAreaFor(m => m.PrimaryMatchingPost, 1, 2, true)
                            </div>
                        </div>
                        <div class="form-group"></div>
                    </div>
                </div>
            </li>
        }
    </ul>
    <div class="static-nav">
        <nav id="navigation-menu">
            <a href="#DA_CaseDetails">Реквизиты дела</a>
            <a href="#DA_InsurData">Данные от СК</a>
            @if (Model.TypeCode == ContractType.Dwelling)
            {
                <a href="#DA_Object">Жилое помещение</a>
            }
            @if (Model.TypeCode == ContractType.CommonOwnership)
            {
                <a href="#DA_Object">Многоквартирный дом</a>
            }
            <a href="#DA_Contrats">Договора страхования</a>
            @if (Model.Id > -1)
            {
                <a href="#DA_Documents">Документы от СК</a>
            }
            @if (Model.TypeCode == ContractType.Dwelling)
            {
                <a href="#DA_Amount">Расчет ущерба</a>
                @if (Model.Id > -1)
                {
                    <a href="#DA_DamageInfos">Сведения о повреждениях</a>
                }
            }
            @if (Model.Id.HasValue)
            {
                <a href="#DA_Bank">Выплаты города/отказы</a>
            }
            else
            {
                <a href="#DA_Bank" style="display:none;">Выплаты города/отказы</a>
            }
            @if (Model.Id > -1)
            {
                <a href="#DA_PrintForms">Печатные формы</a>
                <a href="#DA_Comments" nav-name="comments">Комментарии <span class="label label-count"></span></a>
                <a href="#DA_Agreements">Согласование</a>
            }
        </nav>

        <fieldset style="margin-top: 20px;">
            <div class="row" id="damageDataSummaryRow">
                <div class="col-xs-12 label-value" style="text-align: center;">
                    <div class="col-xs-12 label-value">
                        @Html.Label("DamageDataSummary", Model.DamageData.HasValue ? Model.DamageData.Value.ToString("dd.MM.yyyy") : string.Empty, new { @class = "text-red", style = "font-size: 18px;font-weight: bold;" })
                    </div>
                </div>
            </div>
            <div class="row" id="hasOtherDamages" style="display:@{ if (Model.HasOtherDamages) { <text>block</text> } else { <text>none</text> } };margin-bottom: 0;">
                <div class="col-xs-12 label-value" style="text-align: center;">
                    <div class="col-xs-12 label-value">
                        @Html.Label("HasOtherDamages", "Доп. выплата", new { @class = "text-blue", style = "font-size: 16px;" })
                    </div>
                </div>
            </div>
            <div class="row" style="display:@{ if (Model.FlagSlygebka.HasValue && Model.FlagSlygebka.Value) { <text>block</text> } else { <text>none</text> } };margin-bottom: 0;">
                <div class="col-xs-12 label-value" style="text-align: center;">
                    @Html.Label("FlagSlygebkaSummary", "Выплата по служебной записке", new { @class = "text-red", style = "font-size: 16px;" })
                </div>
            </div>
            <div class="row">
                <div class="col-xs-12 label-value" style="text-align: center; padding: 4px; border: 1px solid #99979c; border-radius: 6px;">
                    @Html.Label("StatusDocSummary", Model.StatusDoc.GetEnumDescription())
                </div>
                <div class="col-xs-12 label-value" style="display: inline-block;">
                    <div class="col-xs-6 label-value">
                        @Html.Label("SumDamageSummaryPostfix", "Размер ущерба СК", new { style = "font-weight: normal;" })
                    </div>
                    <div class="col-xs-6 label-value" style="text-align: right;">
                        @Html.Label("SumDamageSummary", Model.SumDamage.HasValue ? Model.SumDamage.Value.ToString("N2") : "0,00", new { @class = "text-green", style = "font-size: 14px;" })
                    </div>
                </div>
                @if (Model.TypeCode == ContractType.Dwelling)
                {
                    <div class="col-xs-12 label-value" style="display: inline-block;">
                        <div class="col-xs-6 label-value">
                            @Html.Label("CalculDamageSummaryPostfix", "Расчет ущерба ОПС", new { style = "font-weight: normal;" })
                        </div>
                        <div class="col-xs-6 label-value" style="text-align: right;">
                            @Html.Label("CalculDamageSummary", Model.CalculDamage.HasValue ? Model.CalculDamage.Value.ToString("N2") : "0,00", new { style = "font-size: 14px;" })
                        </div>
                    </div>
                }
                <div class="sum-damage-base-summary-placeholder col-xs-12 label-value" style="display:@{ if (Model.FlagSlygebka.HasValue && Model.FlagSlygebka.Value) { <text>inline-block</text> } else { <text>none</text> } };">
                    <div class="col-xs-6 label-value">
                        @Html.Label("SumDamageBaseSummaryPostfix", "Размер ущерба для расчета доли города", new { style = "font-weight: normal;" })
                    </div>
                    <div class="col-xs-6 label-value" style="text-align: right;">
                        @Html.Label("SumDamageBaseSummary", Model.SumDamageBase.HasValue ? Model.SumDamageBase.Value.ToString("N2") : "0,00", new { style = "font-size: 14px;" })
                    </div>
                </div>
                <div class="col-xs-12 label-value">
                    <div class="col-xs-6 label-value" style="display: inline-block;">
                        @Html.Label("TownPartSumPrefix", "Доля города", new { style = "font-weight: normal;" })
                    </div>
                    <div class="col-xs-6 label-value" style="text-align: right;">
                        @Html.Label("TownPartSum", Model.TownPartSum.HasValue ? Model.TownPartSum.Value.ToString("N2") : "0,00", new { style = "font-size: 14px;" })
                    </div>
                </div>
            </div>
            <div id="invoice-summary-ajax-loader" class="ajax-data-loading" data-request-type="GET" data-url="@Url.Content("~/Invoice/Summaries")" data-param-damageId="@Model.Id" data-loader="true"></div>
            <div class="row">
                <div class="col-xs-12 label-value">
                    <div class="col-xs-6 label-value" style="display: inline-block;">
                        @Html.Label("UndestributedAmountPrefix", "Остаток", new { style = "font-weight: normal;" })
                    </div>
                    <div class="col-xs-6 label-value" style="text-align: right;">
                        @Html.Label("UndestributedAmount", "0,00", new { style = "font-size: 14px;" })
                    </div>
                </div>
            </div>
            <div id="invoice-denied-placeholder" style="display:none">
                <div class="row">
                    <div class="col-xs-12 label-value" style="text-align: center;">
                        @Html.Label("InvoiceDeniedTitle", "Отказ в выплате", new { @class = "text-red", style = "font-size: 16px;" })
                    </div>
                </div>
                <div id="invoice-denied-list-placeholder">
                </div>
            </div>
            <div id="zakluch-reissue" style="color:red;display:@(Model.FlagZakluchReissue ? "block" : "none")">
                <span style="text-align:center;width:100%;display:inline-block">Перевыпуск заключения</span>
            </div>
        </fieldset>
        <div id="toolbar" style="position:absolute; bottom: 20px;width: 95%;"></div>
        <div id="wndReferenceDetails" />
    </div>
}

<script id="invoice-denied-template" type="x-tmpl-mustache">
    <div class="row" style="margin-bottom: 0;">
        <div class="col-xs-12 label-value">
            <div class="col-xs-6 label-value" style="display: inline-block;">
                <label style="font-weight: normal;">{{ContractNumber}}</label>
            </div>
            <div class="col-xs-6 label-value" style="text-align: right;">
                <label style="font-size: 14px;">@*{{SumOpl}}*@ 0,00</label>
            </div>
        </div>
    </div>
</script>

<script type="text/javascript">
    var statusDocCreatedCode = @Html.Raw((long)StatusDamageAmount.Created),
        statusDocDamageAmountDiscrepanciesCode = @Html.Raw((long)StatusDamageAmount.DamageAmountDiscrepancies),
        statusInvoiceFormed =  @Html.Raw((long)InvoiceStatus.Formed),
        statusInvoiceTransferredPayment =  @Html.Raw((long)InvoiceStatus.TransferredPayment),
        statusInvoiceIncluded =  @Html.Raw((long)InvoiceStatus.Included),
        statusInvoiceErrorInDetails =  @Html.Raw((long)InvoiceStatus.ErrorInDetails),
        statusInvoiceDenied =  @Html.Raw((long)InvoiceStatus.Denied),
        statusInvoiceDeniedAgreed =  @Html.Raw((long)InvoiceStatus.DeniedAgreed),
        firstCheck = @(Model.Id.HasValue.ToString().ToLower()),
        paidDocTypeId = @Html.Raw(JsonConvert.SerializeObject(Model.PaidDocTypeId));
        inspectionActDocTypeId = @Html.Raw(JsonConvert.SerializeObject(Model.InspectionActDocTypeId)),
        closeWindowRequested = false;

    function onReportSaved(result) {
        if (result && result.Success && result.Data.SaveResults.length) {
            var saveResults = result.Data.SaveResults[0];
            if (saveResults.Title === 'Заключение (Анализ ущерба - ЖП)' && saveResults.DeletedReports.length) {
                var nowMonth = new Date().getMonth();
                var zakluchReissue = saveResults.DeletedReports.every(function(x) {
                    return nowMonth !== new Date(x.ReportDate).getMonth();
                });
                if (zakluchReissue)
                    setZakluchReissueFlag();
            }
        }
    }

    function setZakluchReissueFlag() {
        $('#zakluch-reissue').show();
        $.post('@Url.Action("SetReissueZalkuchFlag", "DamageAnalysis")', { damageId: @Model.Id });
    }

    function checkObjectAndDate() {
        var date = $('#DamageData').data('kendoDatePicker').value(),
            objId = $('#ObjId').val();
        if (!date|| !objId) {
            $('#otherDamages').hide();
        } else {
            $('#otherDamagesGrid').data('kendoGrid').dataSource.read({
                objId: objId,
                date: kendo.toString(date, 's'),
                type: @((long)Model.TypeCode),
                id: $('#Id').val()
            });
        }

        @*kendo.ui.progress($('body'), true);
        $.ajax({
            type: 'POST',
            url: '@Url.Action("CheckObjectAndDate", "DamageAnalysis")',
            contentType: 'application/json; charset=utf-8',
            data: kendo.stringify({
                objId: objId,
                date: kendo.toString(date, 'u'),
                type: @((long)Model.TypeCode),
                id: $('#Id').val()
            }),
            success: function (e) {
                if (e.Errors && e.Errors.length > 0) {
                    Common.ShowError(e.Errors);
                } else if (e.Data == 1) {
                    var message = 'Внимание! В системе уже заведено дело, с датой страхового события ' + $('#DamageData').val() + ' по адресу: ' + $('#Address').val();
                    Common.ShowError(message);
                }
                kendo.ui.progress($('body'), false);
            },
            error: function (e) {
                Common.ShowError(e.responseText)
                kendo.ui.progress($('body'), false);
            }
        });*@
    }

    function checkStrahPlat() {
        var strahPlatEl = $('[name="StrahPlat"]').data('kendoNumericTextBox');

        if (strahPlatEl) {
            var partInsur = $('[name="PartInsur"]').data('kendoNumericTextBox').value(),
                sumDamage = $('[name="SumDamage"]').data('kendoNumericTextBox'),
                sumDamageBase = $('[name="SumDamageBase"]').data('kendoNumericTextBox'),
                strahPlat = strahPlatEl.value(),
                sumDamageValue = sumDamageBase ? sumDamageBase.value() : sumDamage.value();

            if (!partInsur || partInsur == null || !sumDamageValue || sumDamageValue == null || !strahPlat || strahPlat == null) return;

            $.ajax({
                type: 'POST',
                url: '@Url.Action("CheckStrahPlat", "DamageAnalysis")',
                contentType: 'application/json',
                data: JSON.stringify({
                    sumDamage: sumDamageValue,
                    partInsur: partInsur,
                    strahPlat: strahPlat
                }),
                dataType: 'json',
                success: function (response) {
                    if (response.Errors && response.Errors.length > 0) {
                        Common.ShowError(response.Errors);
                        return;
                    }
                    if (response.Data === true) {
                        strahPlatEl.element.closest('.k-numeric-wrap').find('.k-formatted-value, .k-input').removeClass('background-red');
                        Common.ClearNotification();
                    }
                    else {
                        Common.ShowError('Внимание! Установлено несоответствие между размером ущерба по данным СК и выплатой СК по делу');
                        strahPlatEl.element.closest('.k-numeric-wrap').find('.k-formatted-value, .k-input').addClass('background-red');
                    }
                }, error: function (e) {
                    Common.ShowError(e.responseText)
                }
            });
        }
    }

    function updateSelectObjectButtonDisable() {
        var selectObjectButton = $('#selectObject');

        if (selectObjectButton.length == 0) {
            return;
        }

        var modelId = kendo.parseInt($('.mainContent > form > input[name="Id"]').val());

        if (modelId > 0) {
            KendoExtension.ToggleButtonDisable(selectObjectButton, false);
        }

        var insurCompanyNameControl = $('#InsurCompanyName').data('kendoAutoComplete'),
            insurDateControl = $('[name="InsurDate"]').data("kendoDatePicker"),
            damageDataControl = $('[name="DamageData"]').data("kendoDatePicker"),
            dateInputGBYControl = $('[name="DateInputGBY"]').data("kendoDatePicker"),
            sumDamageControl = $('[name="SumDamage"]').data('kendoNumericTextBox'),
            strahPlatControl = $('[name="StrahPlat"]').data('kendoNumericTextBox'),
            causesOfDamageOIControl = $("#CausesOfDamageOI").data("kendoDropDownList"),
            causesOfDamageGpControl = $("#CausesOfDamageGP").data("kendoDropDownList");

        var causesOfDamageOIValue = causesOfDamageOIControl != undefined ? kendo.parseInt(causesOfDamageOIControl.value()) : null,
            causesOfDamageGpCValue = causesOfDamageGpControl != undefined ? kendo.parseInt(causesOfDamageGpControl.value()) : null,
            enabled = insurCompanyNameControl != undefined && insurCompanyNameControl.value().length > 0 &&
                insurDateControl != undefined && insurDateControl.value() != null &&
                damageDataControl != undefined && damageDataControl.value() != null &&
                dateInputGBYControl != undefined && dateInputGBYControl.value() != null &&
                sumDamageControl != undefined && sumDamageControl.value() != null &&
                strahPlatControl != undefined && strahPlatControl.value() != null &&
                ((causesOfDamageOIControl != undefined && causesOfDamageOIValue > 0) || (causesOfDamageGpControl != undefined && causesOfDamageGpCValue > 0));

        KendoExtension.ToggleButtonDisable(selectObjectButton, !enabled);
    }

    //CIPJS-898: Добавить проверку на статус ЖП при выборе помещения на карточке "Расчет ущерба"
    function FlatStatusChangeHandler(e) {
        var flatStatus = $('[name="FlatStatus"]').val();
        if (flatStatus) {
            var lowerFlatStatus = flatStatus.trim().toLowerCase();
            if (lowerFlatStatus == 'собственник не зарегистрирован' ||
                lowerFlatStatus == 'нет данных' ||
                lowerFlatStatus == 'не заселена' ||
                lowerFlatStatus == 'прекращено право собственности') {
                Common.ShowError('Внимание! Обратите внимание на статус жилого помещения: ' + flatStatus);
            }
        }
      
    }

    $(document).ready(function () {
        $('#DamageData').data('kendoDatePicker').bind('change', function () { checkObjectAndDate(); });

        //CIPJS-898: Добавить проверку на статус ЖП при выборе помещения на карточке "Расчет ущерба"
        FlatStatusChangeHandler();
        $('[name="FlatStatus"]').bind('change', function (e) { FlatStatusChangeHandler(e); });


        @if (Model.TypeCode == ContractType.Dwelling)
        {<text>
        $('[name="PartInsur"]').data('kendoNumericTextBox').bind('change', function () { checkStrahPlat();  });
        $('[name="SumDamage"]').data('kendoNumericTextBox').bind('change', function () { checkStrahPlat(); });
        $('[name="SumDamageBase"]').data('kendoNumericTextBox').bind('change', function () { checkStrahPlat(); });
        $('[name="StrahPlat"]').data('kendoNumericTextBox').bind('change', function () { checkStrahPlat(); });
        </text>}
    });

    var floorElementConstrutionCode = @Html.Raw((long)ElementsOfConstructions.Floors);

    $("#navigation-menu a").mPageScroll2id({
        highlightSelector: "#navigation-menu a"
    });

    $('#selectInsurCompany').click(function (e) {
        e.preventDefault();
        var modelId = kendo.parseInt($('.mainContent > form > input[name="Id"]').val());
        var contentUrl = '@Url.Action("Index", "RegistersView")' + '?registerId=InsuranceOrganizationSelect',
            title = 'Выбор Страховой компании',
            callbackFn = function (item) {
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("GetById", "InsuranceOrganization")',
                    data: { 'id': item.id },
                    success: function (data) {
                        $('[name="InsurCompanyId"]').val(data.Id);
                        $('[name="InsurCompanyName"]').val(data.FullName);

                        if (modelId == null || modelId <= 0) {
                            updateSelectObjectButtonDisable();
                        }
                    }
                });
            };

        Common.UI.ChooseWindow(title, contentUrl, callbackFn, 'Grid-@OMInsuranceOrganization.GetRegisterId()');
    });

    $('#selectInsurPart').click(function (e) {
        e.preventDefault();
        var date = $('[name="NomDate"]').val();
        var typeCode = $('[name="TypeCode"]').val();
        var objId = kendo.parseInt($('[name="ObjId"]').val())
        var contentUrl = '';
        if (typeCode == '@(ContractType.CommonOwnership)') {
            contentUrl = '@Url.Action("Index", "RegistersView")' + '?registerId=ShareResponsibilityICCitySelect&Transition=1&qs=349000300contains%27ОИ%27and349000200lessorequal%27' +
                date + '%27';
        }
        if (typeCode == '@(ContractType.Dwelling)') {
            contentUrl = '@Url.Action("Index", "RegistersView")' + '?registerId=ShareResponsibilityICCitySelect&Transition=1&qs=349000300contains%27ЖП_%27and349000200lessorequal%27' +
                date + '%27';
        }
        var title = 'Доля ответственности Страховой компании',
            callbackFn = function (item) {
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("GetById", "ShareResponsibilityICCity")',
                    data: { 'id': item.id },
                    success: function (data) {
                        $('[name="PartInsur"]').data('kendoNumericTextBox').value(data.ICShare);
                        $('[name="PartTown"]').val(data.CityShare);

                        updateObjectInfo(objId, typeCode, true);
                        updateInvoiceDetailSumOpl();
                        updateSummaryStyles();
                        checkStrahPlat();
                    }
                });
            };

        Common.UI.ChooseWindow(title, contentUrl, callbackFn, 'Grid-@OMShareResponsibilityICCity.GetRegisterId()');
    });

    $('#selectObject').click(function (e) {
        e.preventDefault();
        var typeCode = $('[name="TypeCode"]').val();
        if (typeCode == '@(ContractType.CommonOwnership)') {
            var contentUrl = '@Url.Action("Index", "RegistersView")' + '?registerId=InsurBuildingsSelect',
                title = 'Выбор объекта страхования',
                callbackFn = function (item) {
                    updateObjectInfo(item.id, typeCode);
                };

            Common.UI.ChooseWindow(title, contentUrl, callbackFn, 'Grid-@OMBuilding.GetRegisterId()');
        }
        if (typeCode == '@(ContractType.Dwelling)') {
            var contentUrl = '@Url.Action("Index", "RegistersView")' + '?registerId=InsurFlatsSelect',
                title = 'Выбор объекта страхования',
                callbackFn = function (item) {
                    updateObjectInfo(item.id, typeCode);
                };

            Common.UI.ChooseWindow(title, contentUrl, callbackFn, 'Grid-@OMFlat.GetRegisterId()');
        }
    });

    $('#setCheckedStatus').click(function (e) {
        e.preventDefault();
        var inumDoc = $('[name="NomDoc"]').val();
        var date = $('[name="NomDate"]').val();
        Common.UI.ShowConfirm({
            title: 'Подтверждение',
            content: 'Вы подтверждаете что дело по расчету ущерба №' + inumDoc + '  от ' + date + ' проверено?',
            onSuccess: function (e) {
                var id = $('.mainContent > form > input[name="Id"]').val();
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("CheckedDamageAnalysis", "DamageAnalysis")',
                    data: { 'id': id },
                    success: function () {
                        location.reload();
                    },
                    error: function (response) {
                        Common.ShowError(response.responseText);
                        kendo.ui.progress($('body'), false);
                    }
                });
            }
        });
    });

    $('#returnToRevision, #returnToRevisionAgreed').click(function (e) {
        e.preventDefault();
        var inumDoc = $('[name="NomDoc"]').val(),
            date = $('[name="NomDate"]').val(),
            id = $('[name="Id"]').val();

        Common.UI.ShowConfirm({
            title: 'Подтверждение',
            content: 'Вы подтверждаете, что хотите вернуть дело по расчету ущерба №' + inumDoc + '  от ' + date + ' на доработку?',
            onSuccess: function (e) {
                kendo.ui.progress($('body'), true);
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("ReturnToRevision", "DamageAnalysis")',
                    data: { 'id': id },
                    success: function () {
                        location.reload();
                    },
                    error: function (response) {
                        Common.ShowError(response.responseText);
                        kendo.ui.progress($('body'), false);
                    }
                });
            }
        });
    });

    $('#returnToCheck').click(function (e) {
        e.preventDefault();
        var inumDoc = $('[name="NomDoc"]').val(),
            date = $('[name="NomDate"]').val(),
            id = $('[name="Id"]').val();

        Common.UI.ShowConfirm({
            title: 'Подтверждение',
            content: 'Вы подтверждаете, что хотите вернуть на проверку дело по расчету ущерба №' + inumDoc + '  от ' + date + '?',
            onSuccess: function (e) {
                kendo.ui.progress($('body'), true);
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("ReturnToCheck", "DamageAnalysis")',
                    data: { 'id': id },
                    success: function () {
                        location.reload();
                    },
                    error: function (response) {
                        Common.ShowError(response.responseText);
                        kendo.ui.progress($('body'), false);
                    }
                });
            }
        });
    });

    $('#setAgreedStatus').click(function (e) {
        e.preventDefault();
        var inumDoc = $('[name="NomDoc"]').val();
        var date = $('[name="NomDate"]').val();
        Common.UI.ShowConfirm({
            title: 'Подтверждение',
            //icon: 'none',
            content: '<div style="padding-bottom:10px;">Вы подтверждаете что дело по расчету ущерба №' + inumDoc + '  от ' + date + ' согласовано?</div>' +
                '<div>СОГЛАСОВАТЬ СЧЕТА <input checked="checked" class="k-checkbox" id="isAgreeInvoices" name="isAgreeInvoices" type="checkbox" value="true"><label class="k-checkbox-label" for="isAgreeInvoices">ДА</label></div>',
            onSuccess: function (e) {
                var isAgreeInvoices = $('#isAgreeInvoices').is(':checked');
                var id = $('.mainContent > form > input[name="Id"]').val();
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("AgreedDamageAnalysis", "DamageAnalysis")',
                    data: { 'id': id, isAgreeInvoices: isAgreeInvoices },
                    success: function () {
                        location.reload();
                    },
                    error: function (response) {
                        Common.ShowError(response.responseText);
                        kendo.ui.progress($('body'), false);
                    }
                });
            }
        });
    });

    $('#setSendToCheck').click(function (e) {
        e.preventDefault();
        var inumDoc = $('[name="NomDoc"]').val();
        var date = $('[name="NomDate"]').val();
        Common.UI.ShowConfirm({
            title: 'Подтверждение',
            content: 'Вы подтверждаете что дело по расчету ущерба №' + inumDoc + '  от ' + date + ' передано на проверку?',
            onSuccess: function () {
                var id = $('.mainContent > form > input[name="Id"]').val();
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("SendToCheckDamageAnalysis", "DamageAnalysis")',
                    data: { 'id': id },
                    success: function () {
                        location.reload();
                    },
                    error: function (response) {
                        Common.ShowError(response.responseText);
                        kendo.ui.progress($('body'), false);
                    }
                });
            }
        });
    });

    function LoadObjectData(data) {
        if (data) {
            $('.mainContent > form > input[name="Id"]').val(data.Id);
            $('[name="ObjId"]').val(data.ObjId);
            $('[name="UNOM"]').val(data.UNOM);
            $('[name="FlatNumber"]').val(data.FlatNumber);
            var area = $('[name="Area"]').data('kendoNumericTextBox');
            if (area) {
                area.value(data.Area);
            }
            $('[name="Address"]').val(data.Address);
            $('[name="CadastrNumber"]').val(data.CadastrNumber);
            $('[name="Okrug"]').val(data.Okrug);
            $('[name="District"]').val(data.District);
            $('#DamageAmountContracts').data('kendoGrid').dataSource.data(data.Contracts);

            var estimatedValue = $('[name="EstimatedValue"]').data('kendoNumericTextBox');
            if (estimatedValue) {
                estimatedValue.value(data.EstimatedValue);
            }
            if (data.EstimatedValueDifferent === true) {
                $('label[for="EstimatedValueDifferent"]').show();
            }
            else {
                $('label[for="EstimatedValueDifferent"]').hide();
            }

            var partInsur = $('[name="PartInsur"]').data('kendoNumericTextBox');
            if (partInsur) {
                partInsur.value(data.PartInsur);
            }
            $('[name="PartTown"]').val(data.PartTown);

            updateInvoiceDetailSumOpl();
            checkObjectAndDate();
            checkStrahPlat();
            FlatStatusChangeHandler();
        }
    };

    function selectObjectHandler(data) {
        kendo.ui.progress($('body'), false);

        var objIdControl = $('[name="ObjId"]'),
            previousObjId = kendo.parseInt(objIdControl.val()),
            typeCode = $('[name="TypeCode"]').val(),
            date = $('#DamageData').data('kendoDatePicker').value(),
            causesOfDamageOIDropDownList = $("#CausesOfDamageOI").data("kendoDropDownList"),
            causesOfDamageOI = causesOfDamageOIDropDownList ? causesOfDamageOIDropDownList.value() : null,
            causesOfDamageGpDropDownList = $("#CausesOfDamageGP").data("kendoDropDownList"),
            causesOfDamageGp = causesOfDamageGpDropDownList ? causesOfDamageGpDropDownList.value() : null,
            partInsurControl = $('[name="PartInsur"]').data('kendoNumericTextBox'),
            previousPartInsur = partInsurControl ? partInsurControl.value() : null;

        LoadObjectData(data);

        var currentObjId = kendo.parseInt(objIdControl.val()),
            currentPartInsur = partInsurControl ? partInsurControl.value() : null;

        if (currentObjId == null) {
            Common.ShowError('Невозможно сохранить дело, т.к. объект не был выбран');
            return;
        }

        if (previousObjId != currentObjId) {
            //CIPJS-412 Автоматически сохранять дело, как только Пользователь выбрал объект
            $.ajax({
                type: 'GET',
                url: '@Url.Action("Get", "DamageAnalysis")',
                data: {
                    objId: currentObjId,
                    damageDate: kendo.toString(date, 's'),
                    type: typeCode,
                    causesOfDamageGp: causesOfDamageGp,
                    causesOfDamageOI: causesOfDamageOI
                },
                success: function (e) {
                    kendo.ui.progress($('body'), false);
                    if (e.Errors && e.Errors.length > 0) {
                        Common.ShowError(e.Errors.join('<br>'));
                    } else if (e.Data != null
                        && e.Data.Id != undefined
                        && e.Data.Id != null) {
                        Common.UI.ShowConfirm({
                            title: 'Внимание',
                            content: 'Новое дело совпадает с делом ' + (e.Data.NomDoc ? ('№' + e.Data.NomDoc + ' ') : '') +
                                'по Дате СС, жилому помещению и причине ущерба.' +
                                'Новое дело считается ДОПОЛНИТЕЛЬНОЙ ВЫПЛАТОЙ (в номер дела будет добавлен префикс)?',
                            onSuccess: function (e) {
                                saveChanges(false);
                            },
                            onFail: function (e) {
                                saveChanges(false, false, true);

                                var window = $(this).closest('[data-role=window]').data('kendoWindow');
                                window.close();
                                window.destroy();
                            }
                        });
                    }
                    else {
                        saveChanges(false);
                    }
                }
            });
        }
        else if (previousPartInsur != currentPartInsur) {
            //CIPJS-716 автоматически сохраняем при смене доли страховой вылпаты
            saveChanges(false);
        }
    }

    function valid() {
        var damageData = $('[name="DamageData"]').data("kendoDatePicker").value();
        var insurDate = $('[name="InsurDate"]').data("kendoDatePicker").value();
        var damageAmountContractsGrid = $('#DamageAmountContracts').data('kendoGrid');
        var dateInputGBY = $('[name="DateInputGBY"]').data("kendoDatePicker").value();
        var message = "Ошибки:";
        var notInsuredButPaidContractExists = false;
        var paidDocExists = false;
        var isCommonOwnership = @((Model.TypeCode == ContractType.CommonOwnership).ToString().ToLower());

        if (damageAmountContractsGrid) {
            if (paidDocTypeId != null) {
                notInsuredButPaidContractExists = damageAmountContractsGrid.dataItems().some(function(x) {
                    return !x.IsInsured && x.IsPaid;
                });
            }
            if (isCommonOwnership && damageData) {
                var invalidDamageDate = damageAmountContractsGrid.dataItems().some(function(x) {
                    var beg = kendo.parseDate(x.DateBegin, "dd.MM.yyyy");
                    var end = new Date(beg.getTime());
                    end.setFullYear(end.getFullYear()+1);
                    return damageData < beg || damageData > end;
                });
                if (invalidDamageDate)
                    message += "<br \>Внимание! Дата ущерба не попадает в период действия договора";
            }
        }

        if (isCommonOwnership) {
            var sumDamage = $('[name="SumDamage"]').data('kendoNumericTextBox').value();
            var franchise = $('[name="Franchise"]').data('kendoNumericTextBox').value();
            if (sumDamage <= franchise)
                message += "<br \>Внимание! Размер ущерба меньше или равно размеру Условной франшизы";
        }

        if (damageData) {
            if (insurDate) {
                if (damageData > insurDate) {
                    message += "<br \>Некорректная дата дела в СК";
                }
                if (dateInputGBY != null && dateInputGBY < damageData) {
                    message += "<br \>Дата поступления дела в СК должна быть позже или равна дате страхового события";
                }
            } else {
                message += "<br \>Введите дату дела в СК";
            }
            var gridDocs = $('#DocumentsGrid').data('kendoGrid');
            if (gridDocs) {
                var data = gridDocs.dataSource.data();
                for (var i = 0; i < data.length - 1; i++) {
                    var row = gridDocs.tbody.find("tr[data-uid=" + data[i].uid + "]"),
                        isPaidDoc = (data[i].DocTypeId === paidDocTypeId);
                    if (data[i].DocDate) {
                        //CIPJS-501 не сравниваем с датой ущерба документ "Сведения, подтверждающие оплату страхового взноса"
                        if (!isPaidDoc) {
                            if (data[i].DocDate < damageData) {
                                message += "<br \>Некорректная дата документа от СК (" + data[i].DocDate.toLocaleDateString() + ")";
                                row[0].cells[8].setAttribute('class', 'k-grid-no');
                            } else {
                                row[0].cells[8].removeAttribute('class');
                            }
                        }
                    } else if (data[i].DocIsHave && data[i].NeedSetDate) {
                        message += "<br \>Введите дату документа от СК";
                        row[0].cells[8].setAttribute('class', 'k-grid-no');
                    } else {
                        row[0].cells[8].removeAttribute('class');
                    }
                    if (data[i].DocIsHave) {
                        row[0].cells[5].removeAttribute('class');
                    } else {
                        row[0].cells[5].setAttribute('class', 'k-grid-no');
                    }
                    if (notInsuredButPaidContractExists && isPaidDoc) {
                        paidDocExists = true;
                        if (data[i].DocNumber == undefined || data[i].DocNumber == null) {
                            message += "<br \>Для платежного документа номер обязателен для заполнения";
                        }

                        if (data[i].DocDate == undefined || data[i].DocDate == null) {
                            message += "<br \>Для платежного документа дата обязательна для заполнения";
                        }
                        else if (data[i].DocDate > damageData) {
                            message += "<br \>Для платежного документа дата должна быть ранее \"Дата страхового события\"";
                        }
                    }
                    if (data[i].DocTypeId && data[i].DocTypeId === inspectionActDocTypeId && !data[i].DocNumber)
                        message += '<br \>Для документа от СК вида "' + data[i].DocTypeName + '" необходимо заполнить поле "Номер"';
                }
            }
        } else {
            message += "<br \>Введите дату страхового события";
        }

        if (paidDocTypeId != null && notInsuredButPaidContractExists && !paidDocExists) {
            message += "<br \>Не удалось найти документ \"Сведения, подтверждающие оплату страхового взноса\" для подтвержденной вручную оплаты у договора";
        }

        var subReasonCausesOfDamage = $("#SubReasonCausesOfDamage").data("kendoDropDownList");
        if (subReasonCausesOfDamage) {
            if (subReasonCausesOfDamage.dataSource.data().length > 1 && subReasonCausesOfDamage.value() == "0") {
                message += "<br \>Требуется заполнить подпричину!";
            }
        }

        var refinementSubReasonCOD = $("#RefinementSubReasonCOD").data("kendoDropDownList");
        if (refinementSubReasonCOD) {
            if (refinementSubReasonCOD.dataSource.data().length > 1 && refinementSubReasonCOD.value() == "0") {
                message += "<br \>Требуется заполнить уточнение!";
            }
        }

        var dateDocLastGBY = $('#DateDocLastGBY');
        if (dateDocLastGBY.length && !dateDocLastGBY.val().length)
            message += '<br \>Не заполнено поле "Дата поступления последнего документа в СК"';

        return message;
    }

    function buttonReloadClick(e) {
        window.location.reload();
    }

    function buttonSaveClick(e) {
        saveChanges(true);
    };

    function saveChanges(toggleEdit, recalcDamageAmount, generateNewNumber) {

        Common.ClearNotification();

        //CIPJS-772 не проводим валидацию, если нужен перерасчет таблицы ущерба
        if (recalcDamageAmount !== true) {
            var mess = valid();
            if (mess.length > 10) {
                Common.ShowError(mess);
                closeWindowRequested = false;
                return;
            }
        }

        kendo.ui.progress($('body'), true);

        var form = $('form');

        var formObject = Common.Functions.FormToObject(form);

        // два списка (акутально для ЖП) формируем сами, они специфические, так что и в модель вставляем ручками
        var subReasonCausesOfDamage = $("#SubReasonCausesOfDamage").data("kendoDropDownList");
        if (subReasonCausesOfDamage) {
            formObject.SubReasonCausesOfDamage = subReasonCausesOfDamage.value();
        }
        var refinementSubReasonCOD = $("#RefinementSubReasonCOD").data("kendoDropDownList");
        if (refinementSubReasonCOD) {
            formObject.RefinementSubReasonCOD = refinementSubReasonCOD.value();
        }
        var floors = $("#Floors").data("kendoDropDownList");
        if (floors) {
            formObject.Floors = floors.value();
        }

        formObject.RecalcEstimatedValue = recalcDamageAmount === true;

        var id = $('.mainContent > form > input[name="Id"]').val();

        $.ajax({
            type: form.attr('method'),
            url: form.attr('action'),
            data: { jsonModel: JSON.stringify(formObject), generateNewNumber: generateNewNumber === true },
            dataType: 'json',
            success: function (response) {
                kendo.ui.progress($('body'), false);
                form.find('.field-validation-valid').each(function (index, field) {
                    var jField = $(field);
                    var message = '';

                    if (response.Errors) {
                        for (var i = 0; i < response.Errors.length; i++) {
                            if (response.Errors[i].Control == jField.attr('data-valmsg-for')) {
                                message = response.Errors[i].Message;
                                break;
                            }
                        }
                    }

                    jField.text(message);
                });

                if (response.Errors) {
                    Common.ShowError('Произошла ошибка');
                } else {

                    // CIPJS-821 поиск похожих дел
                    checkDublicate(response);

                    id = $('.mainContent > form > input[name="Id"]').val();
                    $('form [name="Id"]').attr('value', response.Id);

                    var gridDocs = $('#DocumentsGrid').data('kendoGrid'),
                        estimatedValueTextBox = $('[name="EstimatedValue"]').data('kendoNumericTextBox');
                    if (gridDocs) {
                        //если есть докмуенты от СК, то мы на форме редактирования, иначе толкьо создаем
                        // сейчас Id будет получатся уже при выборе объекта страхования, поэтому логика  if (id > -1) работать не будет уже
                        gridDocs.saveChanges();

                        //CIPJS-555 автоматически обновлять расчетную стоимость
                        if (estimatedValueTextBox) {
                            estimatedValueTextBox.value(response.EstimatedValue);
                        }

                        $('[name="NomDoc"]').val(response.NomDoc);

                        if (response.EstimatedValueDifferent === true) {
                            $('label[for="EstimatedValueDifferent"]').show();
                        }
                        else {
                            $('label[for="EstimatedValueDifferent"]').hide();
                        }

                        //CIPJS-450 автоматически обновлять таблицу договоров
                        updateDamageContracts(response.Id);

                        //CIPJS-342 перенесено, т.к. требуется знать FloorType при сохранении DamageAmount
                        var grid = $('#DamageAmount').data('kendoGrid');

                        if (grid) {
                            if (recalcDamageAmount === true && $.isFunction(recalcDamageAmount)) {
                                recalcDamageAmount();
                            }
                            if (grid.dataSource.hasChanges()) {
                                grid.saveChanges();
                            }
                            else {
                                checkDamageAnalysisStatus(toggleEdit);
                            }
                        }
                        else {
                            checkDamageAnalysisStatus(toggleEdit);
                        }
                    }
                    else if (!closeWindowRequested) {
                        Common.ShowMessage('Операция успешно выполнена');
                        var url = '@Url.Action("DamageAnalysisCard", "DamageAnalysis")?id=' + $('.mainContent > form > input[name="Id"]').val() + '&type=' + $('[name="TypeCode"]').val() + '&ReadOnly=false';
                        window.open(url, '_blank');
                        kendo.ui.progress($('body'), false);
                        Common.UI.CloseWindow('registerModalWindow', window.parent);
                    }

                    if (closeWindowRequested)
                        return window.top.close();
                    buttonCommentReloadClick();
                }

            },
            error: function (response) {
                Common.ShowError(response.responseText);
                kendo.ui.progress($('body'), false);
            }
        });
    }

    // Поиск дубликатов дела
    function checkDublicate(response) {
            $.ajax({
            type: 'POST',
            url: '@Url.Action("CheckDamageCardDublicate", "DamageAnalysis")',
                data: { request: JSON.stringify(response)},
            dataType: 'json',
                success: function (response) {
                    if (response) {
                        Common.ShowError('Внимание! Аналогичное дело уже присутствует в системе - укажите номер дела!');
                    }
                },
                error: function (err) {
                    Common.ShowError('Произошла ошибка в поиске дубликата.');
                }
        });
    }

    function updateInvoiceDetailSumOpl(currentInvoiceDetailForm) {
        var typeCode = $('[name="TypeCode"]').val();
        if (typeCode == '@(ContractType.Dwelling)'
            && typeof getInvoice !== "undefined"
            && $.isFunction(getInvoice)) {
            var invoiceList = getInvoice(),
                partTown = kendo.parseFloat($('[name="PartTown"]').val()),
                sumDamage = $('[name="SumDamage"]').data('kendoNumericTextBox'),
                sumDamageBase = $('[name="SumDamageBase"]').data('kendoNumericTextBox'),
                sumDamageValue = sumDamageBase ? sumDamageBase.value() : sumDamage.value();
            $.ajax({
                type: 'POST',
                url: '@Url.Action("UpdateInvoiceSums", "Invoice")',
                contentType: 'application/json',
                data: JSON.stringify({
                    SumDamage: sumDamageValue,
                    PartTown: partTown,
                    InvoiceList: invoiceList
                }),
                dataType: 'json',
                success: function (response) {
                    if (response.Errors && response.Errors.length > 0) {
                        Common.ShowError(response.Errors);
                        return;
                    }
                    //2.1) Определить «ВЫПЛАЧЕНО», для этого:
                    //Найти для этого дела счета(INSUR_INVOICE.LINK_DAMAGE = INSUR_DAMAGE.EMP_ID + INSUR_INVOICE.STATUS = «Счет включен в реестр оплат»  «Счет передан на оплату» / «Счет создан».
                    //Просуммировать найденные записи по  INSUR_INVOICE.SUM_OPL(округлить до двух знаков после запятой)
                    //2.2) Определить «ВОЗМОЖНО ВЫПЛАТИТЬ» = «МАКСИМУМ»- «ВЫПЛАЧЕНО» (округлить до 2 - х знаков после запятой,
                    //2.3) Определить значение  «Сумма к выплате»  в СЧЕТЕ = «ВОЗМОЖНО ВЫПЛАТИТЬ»* Доля в праве(INSUR_INVOICE.PART_DOG)
                    if (currentInvoiceDetailForm == undefined
                        || currentInvoiceDetailForm == null) {
                        $('#invoice-panel-placeholder .invoice-details-form').each(function (index, element) {
                            updateInvoiceDetailSumOplSingle($(element), response.Data);
                        });
                    }
                    else {
                        updateInvoiceDetailSumOplSingle(currentInvoiceDetailForm, response.Data);
                    }

                }, error: function (e) {
                    Common.ShowError(e.responseText)
                }
            });
        }
    }

    function updateInvoiceDetailSumOplSingle(currentInvoiceDetailForm, data) {
        var currentInvoiceGuid = currentInvoiceDetailForm != undefined
            && currentInvoiceDetailForm != null ? currentInvoiceDetailForm.find('input[id^="GuidId"]').val() : null,
            sumOplEl = currentInvoiceDetailForm.find('input[id^="SumOpl"]').data('kendoNumericTextBox');

        if (currentInvoiceGuid == null
            || currentInvoiceGuid.length == 0
            || data == undefined
            || data == null
            || data.length == 0
            || !sumOplEl) {
            return;
        }

        var sumOplValue = null;

        for (var i = 0; i < data.length; i++) {
            if (data[i].GuidId === currentInvoiceGuid) {
                sumOplValue = data[i].SumOpl;
            }
        }
        sumOplEl.value(sumOplValue);

        //обновляем сумму в хедере
        var header = currentInvoiceDetailForm.find('ul[id^="PanelBar"] .k-link.k-header');
        if (header && header.length > 0) {
            var headerSearchTerm = 'Сумма к выплате:';
            var headerText = header.text();
            var lastIndexOf = headerText.lastIndexOf(headerSearchTerm);

            if (lastIndexOf > -1) {
                var endIndexOf = headerText.indexOf('.', lastIndexOf);
                var text = headerText.substring(0, lastIndexOf + headerSearchTerm.length) + ' ' + (sumOplValue == null ? '0' : kendo.toString(sumOplValue, "#.##"));

                if (endIndexOf > -1) {
                    text += headerText.substring(endIndexOf, headerText.length);
                }

                header.text(text);
            }
        }
    }

    function checkDamageAnalysisStatus(toggleEdit) {
        $.ajax({
            type: 'POST',
            url: '@Url.Action("CheckStatus", "DamageAnalysis")',
            data: { 'damageId': $('.mainContent > form > input[name="Id"]').val() },
            success: function (result) {
                var statusDocDropDownList = $('[name="StatusDoc"]').data('kendoDropDownList');
                if (statusDocDropDownList) {
                    statusDocDropDownList.value(result);
                    $('label[for="StatusDocSummary"]').text(statusDocDropDownList.text());
                }

                $('[name="StatusDocSummary"]').val($('[name="StatusDoc"]').data('kendoDropDownList').text());
                var grid = $('#DamageAmount').data('kendoGrid');
                if (grid) {
                    grid.dataSource.read();
                }

                var gridDamageAssessments = $('#DamageAssessments').data('kendoGrid');
                if (gridDamageAssessments) {
                    gridDamageAssessments.dataSource.read();
                }

                updateInvoiceDetailSumOpl();
                updateSummaryStyles();
                setInvoiceReadOnly();

                Common.ShowMessage('Операция успешно выполнена');

                if (toggleEdit === true) {
                    KendoExtension.ToggleEditMode(false);
                    $('#IsReadOnly').val(true);
                    toolbar.hide($('#buttonSave'));
                    toolbar.show($('#buttonEdit'));
                }

                kendo.ui.progress($('body'), false);
            },
            error: function (response) {
                Common.ShowError(response.responseText);
                kendo.ui.progress($('body'), false);
            }
        });

        //CIPJS-434 обновляем данные по выплатам
        if ($('#invoice-summary-ajax-loader').length > 0) {
            $('#invoice-summary-ajax-loader').addClass('ajax-data-loading').ajaxDataLoader({ oncomplete: onInvoicePanelLoadComplete });
        }
    }

    function updateSummaryStyles() {
        var typeCode = $('[name="TypeCode"]').val();
        var flagSlygebka = $('[name="FlagSlygebka"]').is(':checked');
        if (typeCode == '@(ContractType.Dwelling)') {
            var sumDamage = kendo.parseFloat($('label[for=SumDamageSummary]').text());
            var sumDamageBase = $('[name="SumDamageBase"]').data('kendoNumericTextBox').value();
            var damageAmountSum = kendo.parseFloat($('label[for=CalculDamageSummary]').text());
            var partTown = kendo.parseFloat($('[name="PartTown"]').val());

            $.ajax({
                type: 'POST',
                url: '@Url.Action("CalcTownPartSum", "DamageAnalysis")',
                contentType: 'application/json',
                data: JSON.stringify({
                    SumDamage: sumDamageBase,
                    PartTown: partTown,
                    DamageAmountSum: damageAmountSum
                }),
                dataType: 'json',
                success: function (response) {
                    if (response.Errors && response.Errors.length > 0) {
                        Common.ShowError(response.Errors);
                        return;
                    }

                    if (response.Data.SumDamageEqual === true) {
                        $('label[for=CalculDamageSummary]').removeClass('text-red').addClass('text-green');
                    }
                    else {
                        $('label[for=CalculDamageSummary]').removeClass('text-green').addClass('text-red');
                    }

                    //CIPJS-383 Обратить внимание, на то что в контрольных данных ( справа под меню) именно так считается значение «Доля города».
                    //Там так же для расчета  использовать  SUM_DAMAGE_BASE(а не SUM_DAMAGE).Прошу сразу поправить
                    $('label[for=TownPartSum]').text(kendo.toString(response.Data.TownPartSum != null ? response.Data.TownPartSum : 0, 'n2'));

                    updateUndestributedAmount();
                }, error: function (e) {
                    Common.ShowError(e.responseText)
                }
            });
        }

        if (flagSlygebka) {
            $('label[for=FlagSlygebkaSummary]').closest('.row').show();
            $('label[for=SumDamageBaseSummary]').closest('.sum-damage-base-summary-placeholder').css('display', 'inline-block');
        }
        else {
            $('label[for=FlagSlygebkaSummary]').closest('.row').hide();
            $('label[for=SumDamageBaseSummary]').closest('.sum-damage-base-summary-placeholder').hide();
        }
    }

    //CIPJS-450 Добавить еще в контрольные данные Остаток ( см вложение) ,
    //это разница между " Доля города и суммой всех выплат " в контрольных данных.
    //Обновлять автоматически когда обновляются связанные значения
    function updateUndestributedAmount() {
        var partTownSum = kendo.parseFloat($('label[for=TownPartSum]').text()),
            invoiceSums = [];

        $('#invoice-summary-ajax-loader label[for^="InvoiceSumOpl"]').each(function () {
            var sum = kendo.parseFloat($(this).text()),
                statusCode = kendo.parseInt($(this).closest('.invoice-details-form').find('input[id^="StatusCode"]').val());
            if (sum != null && statusCode != statusInvoiceErrorInDetails) {
                invoiceSums.push(sum);
            }
        });

        $.ajax({
            type: 'POST',
            url: '@Url.Action("CalcUndestributedAmount", "Invoice")',
            contentType: 'application/json',
            data: JSON.stringify({
                PartTownSum: partTownSum,
                InvoiceSums: invoiceSums
            }),
            dataType: 'json',
            success: function (response) {
                if (response.Errors && response.Errors.length > 0) {
                    Common.ShowError(response.Errors);
                    return;
                }

                $('label[for=UndestributedAmount]').text(kendo.toString(response.Data, "N2"));
                if (response.Data > 0) {
                    $('label[for=UndestributedAmount]').addClass('text-red');
                }
            }, error: function (e) {
                Common.ShowError(e.responseText)
            }
        });
    }

    function updateDamageContracts(damageId) {
        $.ajax({
            type: 'GET',
            url: '@Url.Action("GetDamageContracts", "DamageAnalysis")',
            data: { 'damageId': damageId },
            dataType: 'json',
            success: function (data) {
                $('#DamageAmountContracts').data('kendoGrid').dataSource.data(data);

                checkObjectContracts();
            }
        });
    }

    function dropdownlistCausesOfDamage_select(e) {
        $('#SubReasonCausesOfDamage').data('kendoDropDownList').dataSource.read(e.dataItem);
    }

    function dropdownlistSubReasonCausesOfDamage_select(e) {
        $('#RefinementSubReasonCOD').data('kendoDropDownList').dataSource.read(e.dataItem);
    }

    function dropdownlistBuildingStructure_select(e) {
        $('#Floors').data('kendoDropDownList').dataSource.read(e.dataItem);
    }

    function BindSoruceAndFunction() {
        var typeCode = $('[name="TypeCode"]').val();
        $('[name="DamageData"]').data("kendoDatePicker").bind('change', checkDate);
        if (typeCode == '@(ContractType.Dwelling)') {
            var causesOfDamageGp = $("#CausesOfDamageGP").data("kendoDropDownList");
            if (causesOfDamageGp) {
                causesOfDamageGp.bind("select", dropdownlistCausesOfDamage_select);
                $("#SubReasonCausesOfDamage").kendoDropDownList({
                    dataTextField: "Text",
                    dataValueField: "Value",
                    dataSource: {
                        transport: {
                            read: function (options) {
                                var data = options.data.Value;
                                if (data == undefined) {
                                    //при первом запуске значение нужно брать из самого списка. При выборе, там будет старое значение, потому берем из option
                                    data = $("#CausesOfDamageGP").data("kendoDropDownList").value();
                                }
                                $.ajax({
                                    type: 'POST',
                                    url: '@Url.Action("GetSubreasonOfDamage", "DamageAnalysis")',
                                    data: { 'damage': data, 'subreason': '@Model.SubReasonCausesOfDamage' },
                                    dataType: 'json',
                                    success: function (result) {
                                        options.success(result);
                                        $("#SubReasonCausesOfDamage").data("kendoDropDownList").select(function (dataItem) {
                                            return dataItem.Selected;
                                        });

                                        $("#RefinementSubReasonCOD").kendoDropDownList({
                                            dataTextField: "Text",
                                            dataValueField: "Value",
                                            dataSource: {
                                                transport: {
                                                    read: function (options) {
                                                        var causesOfDamageGpValue = $("#CausesOfDamageGP").data("kendoDropDownList").value();
                                                        var data = options.data.Value;
                                                        if (data == undefined) {
                                                            //при первом запуске значение нужно брать из самого списка. При выборе, там будет старое значение, потому берем из option
                                                            data = $("#SubReasonCausesOfDamage").data("kendoDropDownList").value();
                                                        }
                                                        $.ajax({
                                                            type: 'POST',
                                                            url: '@Url.Action("GetRefinementSubreason", "DamageAnalysis")',
                                                            data: { 'damage': causesOfDamageGpValue, 'subreason': data, 'refinement': '@Model.RefinementSubReasonCOD' },
                                                            dataType: 'json',
                                                            success: function (result) {
                                                                options.success(result);
                                                                $("#RefinementSubReasonCOD").data("kendoDropDownList").select(function (dataItem) {
                                                                    return dataItem.Selected;
                                                                });
                                                            }
                                                        });
                                                    }
                                                }
                                            }
                                        });
                                    }
                                });
                            }
                        }
                    },
                    select: dropdownlistSubReasonCausesOfDamage_select
                });
            }


            var buildingStructure = $("#BuildingStructure").data("kendoDropDownList");
            if (buildingStructure) {
                buildingStructure.bind("select", dropdownlistBuildingStructure_select);
                $("#Floors").kendoDropDownList({
                    dataTextField: "Text",
                    dataValueField: "Value",
                    dataSource: {
                        transport: {
                            read: function (options) {
                                var data = options.data.Value;
                                if (data == undefined) {
                                    //при первом запуске значение нужно брать из самого списка. При выборе, там будет старое значение, потому берем из option
                                    data = $("#BuildingStructure").data("kendoDropDownList").value();
                                }
                                $.ajax({
                                    type: 'POST',
                                    url: '@Url.Action("GetFloors", "DamageAnalysis")',
                                    data: { 'buildingStructure': data, 'floors': '@Model.Floors' },
                                    dataType: 'json',
                                    success: function (result) {
                                        options.success(result);
                                        $("#Floors").data("kendoDropDownList").select(function (dataItem) {
                                            return dataItem.Selected;
                                        });
                                    }
                                });
                            }
                        }
                    }
                });
            }
        }
    }

    function checkDate(e) {
        var damageData = $('[name="DamageData"]').data("kendoDatePicker");
        var insurDate = $('[name="InsurDate"]').data("kendoDatePicker").value();
        if (insurDate) {
            if (damageData.value() > insurDate) {
                Common.ShowError("Дата ущерба должна быть ранее чем дата исходящего номера дела в СК");
                //damageData.value(null);
            }
        } else {
            Common.ShowError("Введите дату исходящего номера дела в СК");
            //damageData.value(null);
        }
    }

    function checkObjectContracts() {
        var damageAmountContractsGrid = $('#DamageAmountContracts').data('kendoGrid'),
            typeCode = $('[name="TypeCode"]').val();

        if (damageAmountContractsGrid.dataItems().length == 0) {
            Common.ShowError('С ' + (typeCode == '@(ContractType.CommonOwnership)' ? 'МКД' : 'помещением') +  ' нет связанных договоров');
        }
    }

    //CIPJS-357 Добавляем новое поле в таблицу Договоров «Период оплачен», который пользователь проставляет в ручном режиме.( чекбокс)
    //Если чекбокс = Да, то выдавать сообщение " Требуется заполнить в разделе " Документы от СК" информацию о «Сведениях подтверждающие оплату»
    $('#DamageAmountContracts').on('click', 'tbody > tr > td > button.paid-command', function (e) {
        e.preventDefault();
        updatedamageAmountContractPaid($(this).closest('tr'));
    });

    function updatedamageAmountContractPaid(rowElement) {
        Common.ClearNotification();
        var damageAmountContractsGrid = $('#DamageAmountContracts').data('kendoGrid');

        if (!damageAmountContractsGrid) {
            return;
        }

        var damageId = kendo.parseInt($('.mainContent > form > input[name="Id"]').val());
        if (damageId == null) {
            Common.ShowError('Невозможно проставить период оплачен для несохранненого дела');
            return;
        }

        var dataItem = damageAmountContractsGrid.dataItem(rowElement);

        if (!dataItem) {
            Common.ShowError('Не удалось определить редактируемую запись');
            return;
        }

        if (dataItem.get('IsInsured') === true) {
            return;
        }

        var fspId = dataItem.get('FspId');

        if (fspId == null || fspId === 0) {
            Common.ShowError('Не удалось идентифкатор ФСП для записи');
            return;
        }

        var isPaid = !dataItem.get('IsPaid');

        if (isPaid === true) {
            Common.UI.ShowConfirm({
                title: 'Подтверждение',
                content: 'Внимание! Вы подтверждаете что период, в котором произошел страховой случай, по договору страхования ОПЛАЧЕН и при этом на договоре ОТСУТСТВУЕТ зачисление МФЦ, подтверждающее фактическую оплату периода ?',
                onSuccess: function (e) {
                    kendo.ui.progress($('body'), true);

                    $.ajax({
                        type: 'POST',
                        url: '@Url.Action("UpdateContractIsPaid", "DamageAnalysis")',
                        data: { damageId: damageId, fspId: fspId, isPaid: isPaid },
                        success: function (e) {
                            kendo.ui.progress($('body'), false);
                            if (e.Errors && e.Errors.length > 0) {
                                Common.ShowError(e.Errors.join('<br>'));
                            } else {
                                dataItem.set('IsPaid', isPaid);
                            }
                        }
                    });
                }
            });
        }
        else {
            kendo.ui.progress($('body'), true);

            $.ajax({
                type: 'POST',
                url: '@Url.Action("UpdateContractIsPaid", "DamageAnalysis")',
                data: { damageId: damageId, fspId: fspId, isPaid: isPaid },
                success: function (e) {
                    kendo.ui.progress($('body'), false);
                    if (e.Errors && e.Errors.length > 0) {
                        Common.ShowError(e.Errors.join('<br>'));
                    } else {
                        dataItem.set('IsPaid', isPaid);
                    }
                }
            });
        }
    }

    function setInvoiceReadOnly() {
        var invoiceToolbar = $("#toolbarInvoice").data('kendoToolBar');
        if (invoiceToolbar) {
            var buttonInvoiceAdd = invoiceToolbar.element.find('#buttonInvoiceAdd'),
                flagSlygebka = $('[name="FlagSlygebka"]').is(':checked'),
                statusCode = $('[name="StatusDoc"]').data('kendoDropDownList').value(),
                sumDamageBase = $('[name="SumDamageBase"]').data('kendoNumericTextBox'),
                typeCode = $('[name="TypeCode"]').val();

            //CIPJS-357 дублируем код, т.к. страницу не перезагружаем InvoiceService.Get
            var canAddInvoice = (statusCode != statusDocDamageAmountDiscrepanciesCode || flagSlygebka)
                && (typeCode == '@(ContractType.CommonOwnership)' || statusCode != statusDocCreatedCode);

            if (buttonInvoiceAdd.length > 0) {
                if (canAddInvoice) {
                    KendoExtension.ToggleButtonDisable(buttonInvoiceAdd, false);
                }
                else {
                    KendoExtension.ToggleButtonDisable(buttonInvoiceAdd, true);
                    buttonInvoiceAdd.removeAttr('editmode');
                }
            }

            if (sumDamageBase) {
                sumDamageBase.readonly(!flagSlygebka);
            }
        }
    }

    function updatePartInsurEditable() {
        var selectInsurPartButton = $('#selectInsurPart');
        if (selectInsurPartButton.length > 0) {
            if ($('#invoice-panel-placeholder .invoice-details-form').length > 0) {
                selectInsurPartButton.attr('editmode', 'false');
                selectInsurPartButton.attr('disabled', 'disabled');
                selectInsurPartButton.addClass('k-state-disabled');
                selectInsurPartButton.css('pointer-events', 'none');
            }
            else {
                selectInsurPartButton.attr('editmode', 'true');
                selectInsurPartButton.removeAttr('disabled');
                selectInsurPartButton.removeClass('k-state-disabled');
                selectInsurPartButton.css('pointer-events', 'auto');
            }
        }
    }

    function updateDeniedInvoiceControlData() {
        var invoiceForms = $('#invoice-panel-placeholder .invoice-details-form'),
            containsDeniedInvoices = false,
            invoiceDeniedPlaceholder = $('#invoice-denied-placeholder'),
            invoiceDeniedListPlaceholder = invoiceDeniedPlaceholder.find('#invoice-denied-list-placeholder');
        if (invoiceForms.length == 0) {
            return;
        }
        if (invoiceDeniedListPlaceholder.length == 0) {
            return;
        }
        invoiceDeniedListPlaceholder.empty();

        invoiceForms.each(function (index, element) {
            var statusCodeControl = $(element).find('input[id^="StatusCode"]'),
                contractNumberControl = $(element).find('input[id^="FspId"]').data('kendoDropDownList'),
                sumOplControl = $(element).find('input[id^="SumOpl"]').data('kendoNumericTextBox'),
                initialContractNumberControl = $(element).find('input[id^="ContractNumber"]');

            if (statusCodeControl.length == 0
                || contractNumberControl == undefined
                || sumOplControl == undefined) {
                return;
            }

            var statusCode = kendo.parseInt(statusCodeControl.val()),
                contractNumber = $.trim(contractNumberControl.text()),
                sumOpl = sumOplControl.value();

            //получаем номер договора до загрузки стора дропдауна
            if (contractNumber.length == 0 && initialContractNumberControl.length > 0) {
                contractNumber = initialContractNumberControl.val();
            }

            if (statusCode == statusInvoiceDenied || statusCode == statusInvoiceDeniedAgreed) {
                containsDeniedInvoices = true;
                invoiceDeniedListPlaceholder.append(Mustache.render($('#invoice-denied-template').html(),
                    {
                        ContractNumber: contractNumber,
                        SumOpl: sumOpl != null ? kendo.toString(sumOpl, 'n2') : ''
                    }));
            }
        });

        if (containsDeniedInvoices) {
            invoiceDeniedPlaceholder.show();
        }
        else {
            invoiceDeniedPlaceholder.hide();
        }
    }

    function onInvoicePanelLoadComplete() {
        updatePartInsurEditable();
        updateUndestributedAmount();
        updateDeniedInvoiceControlData();
    }

    function updateObjectInfo(objId, typeCode, withInsurPart) {
        if (objId == undefined) {
            objId = kendo.parseInt($('[name="ObjId"]').val());
        }

        if (typeCode == undefined) {
            typeCode = $('[name="TypeCode"]').val();
        }

        var id = $('.mainContent > form > input[name="Id"]').val();
        var date = $('#DamageData').data('kendoDatePicker').value();
        var nomDate = $('[name="NomDate"]').val();
        var partInsur = $('[name="PartInsur"]').data('kendoNumericTextBox').value();
        var causesOfDamageOIDropDownList = $("#CausesOfDamageOI").data("kendoDropDownList");
        var causesOfDamageOI = causesOfDamageOIDropDownList ? causesOfDamageOIDropDownList.value() : null;
        var causesOfDamageGpDropDownList = $("#CausesOfDamageGP").data("kendoDropDownList");
        var causesOfDamageGp = causesOfDamageGpDropDownList ? causesOfDamageGpDropDownList.value() : null;
        var partTown = kendo.parseFloat($('[name="PartTown"]').val());

        if (objId == null) {
            return;
        }

        kendo.ui.progress($('body'), true);

        $.ajax({
            type: 'POST',
            url: '@Url.Action("GetObjInfoByObjId", "DamageAnalysis")',
            data: {
                'id': id,
                'objId': objId,
                'type': typeCode,
                'damageDate': kendo.toString(date, 's'),
                'partInsur': withInsurPart === true ? partInsur : null,
                'partTown': withInsurPart === true ? partTown : null,
                'nomDate': nomDate,
                'causesOfDamageOI': causesOfDamageOI,
                'causesOfDamageGp': causesOfDamageGp
            },
            success: selectObjectHandler,
            error: function (response) {
                Common.ShowError(response.responseText);
                kendo.ui.progress($('body'), false);
            }
        });
    }

    $('#FlagZakluchReissue').change(function(e) {
        $('#zakluch-reissue').toggle(this.checked);
    });

    var toolbar;

    $(function () {
        var modelId = kendo.parseInt($('.mainContent > form > input[name="Id"]').val());

        BindSoruceAndFunction();

        toolbar = $("#toolbar").kendoToolBar({
            items: [
                @if ((Model.UserId == SRDSession.Current.User.ID && SRDSession.Current.CheckAccessToFunction(ObjectModel.SRD.SRDCoreFunctions.INSUR_DAMAGE_WRITE) && (Model.StatusDoc == StatusDamageAmount.Created || Model.StatusDoc == StatusDamageAmount.DamageAmountCoincides || Model.StatusDoc == StatusDamageAmount.DamageAmountDiscrepancies))
  || (SRDSession.Current.CheckAccessToFunction(ObjectModel.SRD.SRDCoreFunctions.INSUR_DAMAGE_WRITE) && Model.StatusDoc == StatusDamageAmount.None)
  || SRDSession.Current.CheckAccessToFunction(ObjectModel.SRD.SRDCoreFunctions.INSUR_DAMAGE_WRITE_OTHER))
                {
                    @Html.Raw(@"{
                            type: 'button',
                            text: '',
                            icon: 'pencil',
                            id: 'buttonEdit',
                            hidden: " + (Model.Id <= 0 || !Model.CanEdit).ToString().ToLower() + @",
                            enable: " + Model.CanEdit.ToString().ToLower() + @",
                            click: function () {
                            KendoExtension.ToggleEditMode(true);
                                $('#IsReadOnly').val(false);
                            setInvoiceReadOnly();
                            toolbar.hide($('#buttonEdit'));
                            toolbar.show($('#buttonSave'));
                        }
                    },
                    {
                    type: 'button',
                        text: '',
                        icon: 'save',
                        id: 'buttonSave',
                        hidden: " + (Model.Id > 0).ToString().ToLower() + @",
                        click: buttonSaveClick
                    },");
                }

                {
                type: 'button',
                text: '',
                icon: 'refresh',
                id: 'buttonRefresh',
                click: function () {
                        window.location.reload();
                    }
                },
            {
                type: 'button',
                imageUrl: '/images/audit.png',
                id: 'audit',
                hidden: false,
                click: function () {
                        var wndReferenceDetails = $("#wndReferenceDetails").kendoWindow({
                        resizable: false,
                        draggable: false,
                        actions: ["Close"],
                        modal: true,
                        content: "/ReferenceDetails/Index?objectId=" + @Model.Id + "&registerId=313"
                        });

                        wndReferenceDetails.data("kendoWindow").open().maximize();
                    }
                },
                // CIPJS-852 Добавить новую кнопку на карточку "Расчет ущерба" - возврат дела в работу после согласования
                {
                    type: 'button',
                    text: '',
                    icon: 'arrow-up',
                    id: 'recovery',
                    hidden: ($('[name="StatusDoc"]').data('kendoDropDownList').value() != 12165005),
                click: function () {
                      var inumDoc = $('[name="NomDoc"]').val(),
                            date = $('[name="NomDate"]').val(),
                            id = $('[name="Id"]').val();
                        Common.UI.ShowConfirm({
                            title: 'Подтверждение',
                            content: 'Вы подтверждаете, что дело по расчету ущерба №' + inumDoc + '  от ' + date + ' будет переведено в статус " Расчет ущерба совпадает с данными СК"/ " Расчет ущерба не совпадает с данными СК" и связанные с ним счета будут переведены в статус "Создан" ?',
                            height: 200,
                            onSuccess: function (e) {
                                kendo.ui.progress($('body'), true);
                                $.ajax({
                                    type: 'POST',
                                    url: '@Url.Action("ReturnToRevision", "DamageAnalysis")',
                                    data: { 'id': id },
                                    success: function () {
                                             $.ajax({
                                                type: 'GET',
                                                url: '@Url.Action("SetDamageInvoiceCreatedStatus", "DamageAnalysis")',
                                                data: { 'damageId': id },
                                                success: function () {
                                                    location.reload();
                                                },
                                                error: function (response) {
                                                    Common.ShowError(response.responseText);
                                                    kendo.ui.progress($('body'), false);
                                                }
                                             });
                                        location.reload();
                                    },
                                    error: function (response) {
                                        Common.ShowError(response.responseText);
                                        kendo.ui.progress($('body'), false);
                                    }
                                });
                            }
                        });
                    }
                }
            ]
        }).data('kendoToolBar');
        setTimeout(function() {
            toolbar.add({
                type: 'button',
                text: '',
                icon: 'close',
                id: 'buttonExit',
                click: function() {
                    if ($('#IsReadOnly').val() === 'false') {
                        closeWindowRequested = true;
                        saveChanges(false);
                    } else {
                        window.top.close();
                    }
                }
            });
        }, 500);

        $('#toolbar').kendoTooltip({
            filter: "a.k-button",
            content: function (e) {
                switch ($(e.target).attr('id')) {
                    case "buttonExit":
                        return "Выход";
                    case "buttonRefresh":
                        return "Обновить";
                    case "buttonSave":
                        return "Сохранить";
                    case "buttonEdit":
                        return "Редактировать";
                    case "buttonCancel":
                        return "Отмена";
                    case "buttonDelete":
                        return "Удалить";
                    case "audit":
                        return "Аудит";
                    case "print":
                        return "Печать";
                    case "recovery":
                        return "Вернуть дело";
                }
            },
            position: "top",
            autoHide: true,
            showAfter: 500
        });

        $('.static-nav a').on('click', function (e) {
            e.preventDefault();
            var elementId = $(e.target).attr('href');
            if (elementId && $(elementId).offset()) {
                $('html,body').animate({ scrollTop: $(elementId).offset().top - 9 }, 500);
            }
        });

        var panelbar = $('#ls_panelbar').kendoPanelBar().data('kendoPanelBar');
        panelbar.expand('li');

        $('[name="SumDamage"]').data('kendoNumericTextBox').bind('change', function () {
            var flagSlygebka = $('[name="FlagSlygebka"]').is(':checked'),
                sumDamageClone = $('[name="SumDamageClone"]').data('kendoNumericTextBox'),
                sumDamageBase = $('[name="SumDamageBase"]').data('kendoNumericTextBox'),
                sumDamageSummary = $('label[for=SumDamageSummary]'),
                sumDamageBaseSummary = $('label[for=SumDamageBaseSummary]');

            //CIPJS-385 Размер ущерба для расчета выплаты по данным СК = заполнять SUM_DAMAGE (не доступно для редактирования)
            if (sumDamageClone) {
                sumDamageClone.value(this.value());

                if (sumDamageSummary.length > 0) {
                    sumDamageSummary.text(kendo.toString(this.value() != null ? this.value() : 0, "N2"));
                }
            }

            if (!flagSlygebka) {
                //CIPJS-383 По умолчанию SUM_DAMAGE_BASE= SUM_DAMAGE .
                //В дальнейшем для этой переменной будут варианты другие(заложиться  для следующей задачи)
                if (sumDamageBase) {
                    sumDamageBase.value(this.value());
                }

                if (sumDamageBaseSummary.length > 0) {
                    sumDamageBaseSummary.text(kendo.toString(this.value() != null ? this.value() : 0, "N2"));
                }
            }

            updateInvoiceDetailSumOpl();
            updateSummaryStyles();
        });

        var sumDamageBase = $('[name="SumDamageBase"]').data('kendoNumericTextBox');
        if (sumDamageBase) {
            sumDamageBase.bind('change', function () {
                $('label[for=SumDamageBaseSummary]').text(kendo.toString(this.value() != null ? this.value() : 0, "N2"));
                updateInvoiceDetailSumOpl();
                updateSummaryStyles();
            });
        }


        $('[name="FlagSlygebka"]').bind('change', function (e) {
            //CIPJS-357 Как только пользователь заполняет значение Да,
            //автоматически сохранять карточку и обновлять контрольные данные
            var value = $(e.target).is(':checked');
            if (value === true) {
                buttonSaveClick();
            }
            else {
                var sumDamage = $('[name="SumDamage"]').data('kendoNumericTextBox').value();
                $('[name="SumDamageBase"]').data('kendoNumericTextBox').value(sumDamage);
            }

            updateSummaryStyles();
            setInvoiceReadOnly();
        });

        var baseDamageExistsCheckbox = $('[name="BaseDamageExists"]');
        if (baseDamageExistsCheckbox.length > 0) {
            baseDamageExistsCheckbox.bind('change', function (e) {
                var control = $(e.target),
                    value = control.is(':checked'),
                    damageId = kendo.parseInt($('.mainContent > form > input[name="Id"]').val());

                if (damageId == null) {
                    Common.ShowError('Невозможно изменить тип доп.выплаты для не сохраненного дела');
                    return;
                }

                Common.UI.ShowWindow('Внимание',
                    '@Html.Raw(Url.Action("SetBaseDamage", "DamageAnalysis", new { damageId = Model.Id }))&isSetValueType=' + value,
                    'SetBaseDamageWindow',
                    function (e) {
                        if (e.Data) {
                            $('#NomDoc').val(e.Data.DamageNomDoc);
                            $('#BaseDamageNomDoc').val(e.Data.BaseDamageNomDoc);
                        }
                        else {
                            control.prop("checked", !value);
                        }
                    },
                    700,
                    value ? 300 : 175
                );
            });
        }

        var damageDataPicker = $('[name="DamageData"]').data("kendoDatePicker");
        if (damageDataPicker) {
            damageDataPicker.bind('change', function (e) {
                $('#damageDataSummaryRow label[for=DamageDataSummary]').text(this.value() != null ? kendo.toString(this.value(), 'dd.MM.yyyy') : '');
            });
        }

        //CIPJS-398 вызываем сохранение после изменения для перерасчета
        var estimateValue = $('[name="EstimatedValue"]').data('kendoNumericTextBox'),
            buildingStructure = $("#BuildingStructure").data("kendoDropDownList"),
            floors = $("#Floors").data("kendoDropDownList"),
            floorType = $("#FloorType").data("kendoDropDownList"),
            stoveType = $("#StoveType").data("kendoDropDownList");
        if (estimateValue) {
            $('[name="EstimatedValue"]').data('kendoNumericTextBox').bind('change', function () {
                saveChanges(false);
            });
        }
        if (buildingStructure) {
            buildingStructure.bind('change', function () {
                saveChanges(false);
            });
        }
        if (floors) {
            floors.bind('change', function () {
                saveChanges(false);
            });
        }
        if (floorType) {
            floorType.bind('change', function () {
                saveChanges(false);
            });
        }
        if (stoveType) {
            stoveType.bind('change', function () {
                saveChanges(false);
            });
        }

        updateSummaryStyles();

        function getRatingContractTooltip(e) {
            var image = $(e.target[0]).find('img');
            if (image.attr('toolTip') !== undefined) {
                return image.attr('toolTip');
            }
            else {
                return e.target[0].innerText;
            }
        }

        $('#DamageAmountContracts').kendoTooltip({ autoHide: true, showAfter: 2000, position: "right", filter: ".forTooltips", content: getRatingContractTooltip });

        var autoCopmplInsurCompanyName = $('#InsurCompanyName').data('kendoAutoComplete');
        if (autoCopmplInsurCompanyName) {
            autoCopmplInsurCompanyName.bind("select", function (e) {
                $('[name="InsurCompanyId"]').val(e.dataItem.Id);
            });
        }

        $('[editmode="true"]').each(function (i, el) {
            var datePicker = $(el).data('kendoDatePicker');
            if (datePicker) {
                if (datePicker.element[0].name != 'NomDate') {
                    datePicker.bind('change', function (e) {
                        if (e.sender.value() > new Date()) {
                            Common.ShowError("Дата не может быть больше " + (new Date()).toLocaleDateString());
                            e.sender.value(null);
                        }
                    });
                }
                return;
            }
        });

        $('#otherDamagesGrid').kendoGrid({
            scrollable: false,
            resizable: true,
            columns: [
                {
                    field: 'CaseNumber',
                    template: '<a href="@Url.Content("~/ObjectCard/Index")?ObjId=#:DamageId#&RegisterViewId=DamageAnalysisGP&isVertical=true&useMasterPage=true" target="_blank">#:CaseNumber#</a>',
                    title: 'Номер дела в ОПС',
                    attributes: { style: "text-align: center;" }
                },
                {
                    @if (Model.TypeCode == ContractType.Dwelling)
                {<text>field: 'DataZakluchenia', title: 'Дата заключения',</text>}
                else
                {<text>field: 'CaseDate', title: 'Дата дела',</text>}
                    type: "date",
                    format: "{0:dd.MM.yyyy}",
                    attributes: { style: "text-align: center;" }
                },
                {
                    field: 'InsuranceCompany',
                    title: 'Страховая компания',
                    attributes: { style: "word-break: break-word; text-align: center;" }
                },
                {
                    field: 'DamageDate',
                    type: "date",
                    format: "{0:dd.MM.yyyy}",
                    title: 'Дата страхового события',
                    attributes: { style: "text-align: center;" }
                },
                {
                    field: 'DamageAmount',
                    format: "{0:n2}",
                    title: 'Сумма ущерба',
                    attributes: { style: "text-align: center;" }
                },
                {
                    field: 'DamageReason',
                    title: 'Причина ущерба',
                    attributes: { style: "word-break: break-word;" }
                }
                @if (Model.TypeCode == ContractType.Dwelling)
                {<text>,
                 {
                     field: 'SubjectName',
                     title: 'ФИО получателя',
                     attributes: { style: "word-break: break-word;" }
                 },
                 {
                     field: 'Ndog',
                     title: '№ договора'
                 },
                 {
                     field: 'Kodpl',
                     title: '№ кода плательщика'
                 }
                 </text>}
            ],
            dataBound: function () {
                var grid = this,
                    typeCode = $('[name="TypeCode"]').val(),
                    damageDateColumnIndex = grid.element.find('th[data-field="DamageDate"]').index(),
                    damageAmountColumnIndex = grid.element.find('th[data-field="DamageAmount"]').index();

                if (!$('a[href="#DAMAGE"] span').text()) {
                    $('a[href="#DAMAGE"] span').text(this.dataItems().length);
                }

                if (this.dataItems().length == 0) {
                    $('#otherDamages').hide();
                } else {
                    var date = kendo.toString($('#DamageData').data('kendoDatePicker').value(), 'd');

                    $('#otherDamagesTitle').text('Список дел по расчету ущерба, связанных с ' + (typeCode == '@(ContractType.CommonOwnership)' ? 'МКД' : 'помещением'));
                    $('#otherDamages').show();

                    this.tbody.find('tr').each(function (index, row) {
                        var dataItem = grid.dataItem($(row));
                        if (dataItem && kendo.toString(dataItem.get('DamageDate'), 'd') == date) {
                            if (damageDateColumnIndex > -1) {
                                $(row).find('td:eq(' + damageDateColumnIndex + ')').addClass('text-blue');
                            }
                            if (damageAmountColumnIndex > -1) {
                                $(row).find('td:eq(' + damageAmountColumnIndex + ')').addClass('text-blue');
                            }
                        }
                    });

                    if (!firstCheck) {
                        var message = 'Внимание! В системе уже заведено дело, с датой страхового события ' + date + ' по адресу: ' + $('#Address').val();

                        Common.ShowError(message);
                    }
                }

                firstCheck = false;
            },
            autoBind: false,
            dataSource: {
                transport: {
                    read: {
                        url: '@Url.Action(Model.TypeCode == ContractType.Dwelling ? "OtherDamagesDwelling_Read" : "OtherDamages_Read", "DamageAnalysis")',
                        contentType: 'application/json; charset=utf-8',
                        dataType: 'json'
                    }
                }
            }
        });

        //CIPJS-502 прикрепляем обновление панели счетов к обновлению отчетов
        var reportsPanel = $('.printforms-placeholder'),
            invoicePanel = $('.invoice-panel .invoce-panel-ajax-loading');
        if (reportsPanel.length > 0 && invoicePanel.length > 0) {
            invoicePanel.addClass('ajax-data-loading').ajaxDataLoader({
                oncomplete: function (data, $elements) {
                    if ($.isFunction(buttonInvoiceReloadClick)) {
                        reportsPanel.addClass('ajax-data-loading').ajaxDataLoader({
                            oncomplete: function (data, $elements, $currentElement) {
                                var reportsGrid = $currentElement.find('#Grid-809').data('kendoGrid'),
                                    firstLoad = true;
                                if (reportsGrid) {
                                    reportsGrid.bind('dataBound', function (e) {
                                        if (!firstLoad) {
                                            invoicePanel.addClass('ajax-data-loading').ajaxDataLoader({
                                                oncomplete: onInvoicePanelLoadComplete
                                            });
                                        }
                                        else {
                                            firstLoad = false;
                                        }
                                    });
                                }
                            }
                        });
                    }
                    else {
                        reportsPanel.addClass('ajax-data-loading').ajaxDataLoader();
                    }

                    onInvoicePanelLoadComplete();
                }
            });
        }
        else if (invoicePanel.length > 0) {
            invoicePanel.addClass('ajax-data-loading').ajaxDataLoader({
                oncomplete: onInvoicePanelLoadComplete
            });
        }
        else if (reportsPanel.length > 0) {
            reportsPanel.addClass('ajax-data-loading').ajaxDataLoader();
        }

        checkObjectAndDate();

        //CIPJS-585 Не давать выбирать UNOM пока Пользователь не заполнил все поля в разделе "Данные от Страховой компании" ( за исключение полей Подпричина/уточнение) - - При выборе объекта
        if (modelId == null || modelId <= 0) {
            var insurCompanyNameControl = $('#InsurCompanyName').data('kendoAutoComplete'),
                insurDateControl = $('[name="InsurDate"]').data("kendoDatePicker"),
                damageDataControl = $('[name="DamageData"]').data("kendoDatePicker"),
                dateInputGBYControl = $('[name="DateInputGBY"]').data("kendoDatePicker"),
                sumDamageControl = $('[name="SumDamage"]').data('kendoNumericTextBox'),
                strahPlatControl = $('[name="StrahPlat"]').data('kendoNumericTextBox'),
                causesOfDamageOIControl = $("#CausesOfDamageOI").data("kendoDropDownList"),
                causesOfDamageGpControl = $("#CausesOfDamageGP").data("kendoDropDownList");

            if (insurCompanyNameControl) {
                insurCompanyNameControl.bind('change', updateSelectObjectButtonDisable);
            }
            if (insurDateControl) {
                insurDateControl.bind('change', updateSelectObjectButtonDisable);
            }
            if (damageDataControl) {
                damageDataControl.bind('change', updateSelectObjectButtonDisable);
            }
            if (dateInputGBYControl) {
                dateInputGBYControl.bind('change', updateSelectObjectButtonDisable);
            }
            if (sumDamageControl) {
                sumDamageControl.bind('change', updateSelectObjectButtonDisable);
            }
            if (strahPlatControl) {
                strahPlatControl.bind('change', updateSelectObjectButtonDisable);
            }
            if (causesOfDamageOIControl) {
                causesOfDamageOIControl.bind('change', updateSelectObjectButtonDisable);
            }
            if (causesOfDamageGpControl) {
                causesOfDamageGpControl.bind('change', updateSelectObjectButtonDisable);
            }
        }
        else {
            var damageAmountContractsGrid = $('#DamageAmountContracts').data('kendoGrid');
            if (damageAmountContractsGrid) {
                //CIPJS-716 выдавать сообщение - о том что нет связанных договоров
                damageAmountContractsGrid.one('dataBound', checkObjectContracts);
            }
        }
    });
</script>

<style>
    .k-grid-toolbar .k-toolbar {
        text-align: center;
    }

    #otherDamagesGrid.k-grid td {
        white-space: inherit;
    }

    .static-nav > fieldset label {
        font-size: 12px;
    }

    #DamageAmount > table > tbody > tr.k-grid-edit-row {
        background-color: #d8efaa;
    }

    .mrt60 {
        margin-top: 60px;
    }
</style>