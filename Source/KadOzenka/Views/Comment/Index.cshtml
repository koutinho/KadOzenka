@using CIPJS.DAL.Comment;
@using Newtonsoft.Json;

@model CommentListDto

<div id="comment-panel-placeholder">
    <div class="form-horizontal col-sm-12">
        <div class="form-group"></div>
        <div id="toolbarComment"></div>
    </div>
    <div class="form-group"></div>
    @Html.HiddenFor(m => m.CommentReestrId)
    @Html.HiddenFor(m => m.CommentObjectId)
    @Html.HiddenFor(m => m.IsCommentReadOnly)
    @if (Model.Comments != null)
    {
        @foreach (var comm in Model.Comments)
        {
            <div class="comment-details-form">
                @Html.Partial("~/Views/Comment/Details.cshtml", comm)
            </div>
        }
    }
</div>


<script>
    $(document).ready(function () {
        recalcCount();
    });

    function recalcCount() {
        if ($('.static-nav a[nav-name="comments"] span')) {
            $('.static-nav a[nav-name="comments"] span').text($('#comment-panel-placeholder .comment-details-form').length);
        }
    }

    function getCommentDetails() {
        var result = [];
        $('#comment-panel-placeholder .comment-details-form').each(function (index, element) {
            var item = getCommentDetail($(element));
            if (item != null) {
                result.push(item);
            }
        });
        return result;
    }

    function getCommentDetail(formElement) {
        var id = parseInt(formElement.find('input[id^="CommentId"]').val()),
            reestrId = parseInt($('#CommentReestrId').val()),
            objectId = parseInt($('#CommentObjectId').val()),
            comment = formElement.find('textarea[name="Comment"]').val();

        if (isNaN(id) || isNaN(objectId)) {
            return null;
        }

        return {
            CommentId: id,
            LinkReestrId: reestrId,
            LinkObjectId: objectId,
            Comment: comment
        }
    }

    function buttonCommentEditClick(e) {
        Common.ClearNotification();
        var commentPanelPlaceholder = $('#comment-panel-placeholder');
        var data = 'isReadOnly=false';
        var reestrId = parseInt($('#CommentReestrId').val());
        var objectId = parseInt($('#CommentObjectId').val());
        if (reestrId) {
            data = 'reestrId=' + reestrId + '&' + data;
        }
        if (objectId) {
            data = 'objectId=' + objectId + '&' + data;
        }
         $.ajax({
                type: 'GET',
                url: '@Url.Action("Index", "Comment")?' + data,
                success: function (result) {
                    commentPanelPlaceholder.html(result);
                    recalcCount();
                },
                error: function (response) {
                    Common.ShowError(response.responseText);
                }
        });
    };

    function buttonCommentReloadClick(e) {
        var commentPanelPlaceholder = $('#comment-panel-placeholder');
        var data = 'isReadOnly=' + $('[name="IsCommentReadOnly"]').val();
        var reestrId = parseInt($('#CommentReestrId').val());
        var objectId = parseInt($('#CommentObjectId').val());
        if (reestrId) {
            data = 'reestrId=' + reestrId + '&' + data;
        }
        if (objectId) {
            data = 'objectId=' + objectId + '&' + data;
        }
        $.ajax({
            type: 'GET',
            url: '@Url.Action("Index", "Comment")?' + data,
            success: function (result) {
                commentPanelPlaceholder.html(result);
                recalcCount();
            },
            error: function (response) {
                Common.ShowError(response.responseText);
            }
        });
    }

    function buttonCommentAddClick(e) {
        var reestrId = parseInt($('#CommentReestrId').val()),
            objectId = parseInt($('#CommentObjectId').val()),
            commentPanelPlaceholder = $('#comment-panel-placeholder');

        var commentDetailElement = createCommentDetailElement(-1, reestrId, objectId);
        commentPanelPlaceholder.append(commentDetailElement);
        commentPanelPlaceholder.append($('<div></div>').addClass('form-group'));
        commentPanelPlaceholder.find('.ajax-data-loading').ajaxDataLoader();
        recalcCount();
    }

    function buttonCommentSaveClick(e) {
        var Comment = { 'CommentReestrId': $('[name="CommentReestrId"]').val(), 'CommentObjectId': $('[name="CommentObjectId"]').val() };
        Comment.Comments = getCommentDetails();
        $.ajax({
            type: 'POST',
            url: '@Url.Action("Index", "Comment")',
            data: { json: JSON.stringify(Comment) },
            success: function (result) {
                buttonCommentReloadClick(e);
            },
            error: function (response) {
                Common.ShowError(response.responseText);
            }
        });
    }

    function createCommentDetailElement(id, reestrId, objectId) {
        var dataUrl = '@Url.Action("GetComment", "Comment")',
            readOnly = '@Html.Raw(JsonConvert.SerializeObject(Model.IsCommentReadOnly))',
            result = $('<div></div>'),
            divFormHorisontal = $('<div></div>').addClass('form-horizontal').addClass('col-sm-12'),
            divCommentDetailForm = $('<div></div>')
                .addClass('ajax-data-loading')
                .addClass('comment-details-form')
                .attr('data-request-type', 'GET')
                .attr('data-url', dataUrl)
                .attr('data-param-id', id)
                .attr('data-param-reestrId', reestrId)
                .attr('data-param-objectId', objectId)
                .attr('data-loader', 'true')
                .attr('data-param-readOnly', readOnly);

        divFormHorisontal.append(divCommentDetailForm);
        return result.append(divCommentDetailForm);
    }

    $(function () {
        $("#toolbarComment").kendoToolBar({
            items: [
                @{
                    if (!Model.IsCommentReadOnly)
                    {
                        <text> {
                            type: "button",
                            id: "buttonCommentRefresh",
                            text: "",
                            click: buttonCommentReloadClick,
                            icon: "refresh",
                            overflow: "never"
                        },
                        {
                            type: "button",
                            id: "buttonCommentAdd",
                            text: "",
                            click: buttonCommentAddClick,
                            icon: "add",
                            overflow: "never"
                        }</text>
                    }
                    else if (Model.IsCommentReadOnly)
                    {
                        <text> {
                            type: "button",
                            id: "buttonCommentRefresh",
                            text: "",
                            click: buttonCommentReloadClick,
                            icon: "refresh",
                            overflow: "never"
                        },{
                            type: "button",
                            id: "buttonCommentEdit",
                            text: "",
                            click: buttonCommentEditClick,
                            icon: "pencil",
                            overflow: "never"
                        }</text>
                    }
                }
            ]
        });

        $('#toolbarComment').kendoTooltip({
            filter: "a.k-button",
            content: function (e) {
                switch ($(e.target).attr('id')) {
                    case "buttonCommentRefresh":
                        return "Обновить";
                    case "buttonCommentAdd":
                        return "Добавить";
                    case "buttonCommentEdit":
                        return "Редактировать";
                    case "buttonCommentCancel":
                        return "Отмена";
                }
            },
            position: "top",
            autoHide: true,
            showAfter: 500
        });
    });
</script>
