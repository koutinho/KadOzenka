@using CIPJS.DAL.Invoice;
@using Core.Shared.Extensions;
@using ObjectModel.Directory;

@model InvoiceDto

@Html.HiddenFor(m => m.InvoiceId, (object)new { @id = $"InvoiceId{Model.GuidId}" })
@Html.Hidden($"StatusCode{Model.GuidId}", (long)Model.StatusCode)
@Html.Hidden($"HasCCCReport{Model.GuidId}", Model.HasCCCReport)
@Html.Hidden($"InsurSymmaOtchetChanged{Model.GuidId}", Model.InsurSymmaOtchetChanged)
@Html.Hidden($"GuidId{Model.GuidId}", Model.GuidId)
@Html.Hidden($"ContractNumber{Model.GuidId}", Model.ContractNumber)

@(Html.Kendo().PanelBar()
    .Name("PanelBar" + Model.GuidId)
    .HtmlAttributes(new { @class = "panelbar" })
    .Items(panelbar =>
    {
        panelbar.Add().Text($"{Model.HeaderText}").Expanded(false)
        .Content(@<div class="form-horizontal col-sm-12">
            <div class="form-group"></div>
            <div class="form-group">
                <div class="col-sm-10">
                </div>
                <div class="col-sm-1">
                    @Html.KendoButton("saveInvoice" + Model.GuidId, "", isReadonly: Model.ReadOnly, icon: "save")
                </div>
                <div class="col-sm-1">
                    @Html.KendoButton("deleteInvoice" + Model.GuidId, "", isReadonly: Model.ReadOnly, icon: "close")
                </div>
            </div>
            @if (Model.DamageId.HasValue)
            {
                <div class="form-group">
                    @Html.HiddenFor(m => m.NoPayNoteId, (object)new { @id = $"NoPayNoteId{Model.GuidId}" })
                    <div class="col-sm-2">
                        @Html.CustomLabelFor(m => m.NoPayNoteReason)
                    </div>
                    <div class="col-sm-9">
                        @Html.TextBoxFor(m => m.NoPayNoteReason, htmlAttributes: (object)new { @id = $"NoPayNoteReason{Model.GuidId}", @class = "k-textbox", @style = "width: 100%;resize: none;", data_skip = "true", @readonly = "readonly" })
                    </div>
                    <div class="col-sm-1">
                        @Html.KendoButton("selectNoPayNote" + Model.GuidId, "...", isReadonly: Model.ReadOnly)
                    </div>
                </div>
                <div class="form-group">
                    @if(Model.IsFisical)
                    {
                        <div class="col-sm-2">
                            @Html.CustomLabelFor(m => m.FspId)
                        </div>
                        <div class="col-sm-4">
                            @Html.KendoDropDownListFor(m => m.FspId, "GetDamageContracts", "DamageAnalysis", new { damageId = Model.DamageId }, "FspId", "ContractNumber", Model.ReadOnly, Model.GuidId, editMode: true)
                        </div>
                    }
                    else
                    {
                        <div class="col-sm-2">
                            @Html.CustomLabelFor(m => m.AllPropertyId)
                        </div>
                        <div class="col-sm-4">
                            @Html.KendoDropDownListFor(m => m.AllPropertyId, "GetDamageContracts", "DamageAnalysis", new { damageId = Model.DamageId }, "AllPropertyId", "ContractNumber", Model.ReadOnly, Model.GuidId, editMode: true)
                        </div>
                    }
                    <div class="col-sm-2">
                        @Html.CustomLabel(Model.IsFisical ? "Свидетельство/Полис" : "Полис")
                    </div>
                    <div class="col-sm-2">
                        @Html.KendoTextBoxFor(m => m.SvidPolycNum, Model.ReadOnly, true, id: "SvidPolycNum" + Model.GuidId)
                    </div>
                    <div class="col-sm-2">
                        <div class="form-group">
                            <div class="col-sm-2">
                                @Html.CustomLabel("от")
                            </div>
                            <div class="col-sm-10">
                                @Html.KendoDatePickerFor(m => m.SvdPolyceDate, Model.ReadOnly, editMode: true, id: "SvdPolyceDate" + Model.GuidId)
                            </div>
                        </div>
                    </div>
                </div>
            }
            <div class="form-group">
                @if (Model.DamageId.HasValue)
                {
                    <div class="col-sm-2">
                        @Html.CustomLabelFor(m => m.PartDog)
                    </div>
                    <div class="col-sm-4">
                        @Html.KendoNumericExTextBoxFor(m => m.PartDog, 2, Model.GuidId, Model.ReadOnly, true, minValue: 0m, maxValue: 1m)
                    </div>
                }
                <div class="col-sm-2">
                    @Html.CustomLabelFor(m => m.SumOpl)
                </div>
                <div class="col-sm-4">
                    @Html.KendoNumericExTextBoxFor(m => m.SumOpl, 2, Model.GuidId, Model.ReadOnly, true)
                </div>
            </div>
            @if (Model.AllPropertyId.HasValue && Model.IsFisical)
            {
                <div class="form-group">
                    <div class="col-sm-2">
                        @Html.CustomLabelFor(m => m.NumInvoice)
                    </div>
                    <div class="col-sm-4">
                        @Html.KendoTextBoxFor(m => m.NumInvoice, Model.ReadOnly, true, id: "NumInvoice" + Model.GuidId)
                    </div>
                    <div class="col-sm-2">
                        @Html.CustomLabelFor(m => m.DateInvoice)
                    </div>
                    <div class="col-sm-4">
                        @Html.KendoDatePickerFor(m => m.DateInvoice, Model.ReadOnly, id: "DateInvoice" + Model.GuidId, maxDate: DateTime.Today)
                    </div>
                </div>
            }
            <div class="form-group">
                @Html.HiddenFor(m => m.SubjectId, (object)new { @id = $"SubjectId{Model.GuidId}" })
                <div class="col-sm-2">
                    @Html.CustomLabelFor(m => m.SubjectName)
                </div>
                <div class="col-sm-3">
                    @Html.KendoAutoCopmplite("SubjectName" + Model.GuidId, Model.SubjectName, "SubjectName", "Subject", "GetSubjectByName", "function() {return {name: $('#SubjectName" + Model.GuidId + "').val(), subjectType: " + (long)(Model.IsFisical ? SubjectType.Individual : SubjectType.ManagementCompany) + "};}", isReadonly: Model.ReadOnly)
                </div>
                <div class="col-sm-1">
                    @Html.KendoButton("selectSubject" + Model.GuidId, "...", isReadonly: Model.ReadOnly)
                </div>
                <div class="col-sm-2">
                    @Html.CustomLabelFor(m => m.Phone)
                </div>
                <div class="col-sm-4">
                    @Html.KendoMaskedTextBoxFor(m => m.Phone, "(999) 000-0000", Model.ReadOnly, false, true, Model.GuidId, false)
                </div>
            </div>
            <div class="form-group">
                @Html.HiddenFor(m => m.BankId, (object)new { @id = $"BankId{Model.GuidId}" })
                <div class="col-sm-2">
                    @Html.CustomLabelFor(m => m.BicBank)
                </div>
                <div class="col-sm-3">
                    @Html.KendoAutoCopmplite("BicBank" + Model.GuidId, Model.BicBank, "BankBic", "Bank", "GetBankByBik", "function() {return {bic: $('#BicBank" + Model.GuidId + "').val()};}", isReadonly: Model.NoPayNoteId.HasValue || Model.ReadOnly, editMode: !Model.NoPayNoteId.HasValue)
                </div>
                <div class="col-sm-1">
                    @Html.KendoButton("selectBank" + Model.GuidId, "...", isReadonly: Model.NoPayNoteId.HasValue || Model.ReadOnly, editMode: !Model.NoPayNoteId.HasValue)
                </div>
                <div class="col-sm-2">
                    @Html.CustomLabelFor(m => m.BankName)
                </div>
                <div class="col-sm-4">
                    @Html.KendoTextBoxFor(m => m.BankName, Model.NoPayNoteId.HasValue || Model.ReadOnly, true, id: "BankName" + Model.GuidId, editMode: !Model.NoPayNoteId.HasValue)
                </div>
            </div>
            @if (!Model.IsFisical)
            {
                <div class="form-group">
                    <div class="col-sm-2">
                        @Html.CustomLabelFor(m => m.Inn)
                    </div>
                    <div class="col-sm-4">
                        @*@Html.KendoTextValidator(m => m.Inn, "", isReadonly: Model.ReadOnly, skipSerialize: true, id: "Inn" + Model.GuidId)*@
                        @Html.KendoTextBoxFor(x => x.Inn, Model.ReadOnly, true, id: "Inn" + Model.GuidId)
                    </div>
                    <div class="col-sm-2">
                        @Html.CustomLabelFor(m => m.Kpp)
                    </div>
                    <div class="col-sm-4">
                        @Html.KendoTextValidator(m => m.Kpp, "^(\\d{9})$", isReadonly: Model.ReadOnly, skipSerialize: true, id: "Kpp" + Model.GuidId, validMes: "КПП: 9 символов")
                    </div>
                </div>
            }
            <div class="form-group">
                <div class="col-sm-2">
                    @Html.CustomLabelFor(m => m.InnBank)
                </div>
                <div class="col-sm-4">
                    @if (Model.DamageId.HasValue)
                    {
                        @Html.KendoTextBoxFor(x => x.InnBank, Model.NoPayNoteId.HasValue || Model.ReadOnly, true, !Model.NoPayNoteId.HasValue, "BankInn" + Model.GuidId)
                    }
                    else
                    {
                        @Html.KendoTextValidator(m => m.InnBank, @"^(\d{10}|\d{12})$", isReadonly: Model.NoPayNoteId.HasValue || Model.ReadOnly, skipSerialize: true, id: "BankInn" + Model.GuidId, validMes: "ИНН банка: 10 или 12 символов", editMode: !Model.NoPayNoteId.HasValue)
                    }
                </div>
                <div class="col-sm-2">
                    @Html.CustomLabelFor(m => m.KppBank)
                </div>
                <div class="col-sm-4">
                    @Html.KendoTextValidator(m => m.KppBank, "^(\\d{9})$", isReadonly: Model.NoPayNoteId.HasValue || Model.ReadOnly, skipSerialize: true, id: "BankKpp" + Model.GuidId, validMes: "КПП банка: 9 символов", editMode: !Model.NoPayNoteId.HasValue)
                </div>
            </div>
            <div class="form-group">
                <div class="col-sm-2">
                    @Html.CustomLabelFor(m => m.KorAcc)
                </div>
                <div class="col-sm-4">
                    @Html.KendoTextValidator(m => m.KorAcc, "^(\\d{20})$", isReadonly: Model.NoPayNoteId.HasValue || Model.ReadOnly, skipSerialize: true, id: "KorAcc" + Model.GuidId, validMes: "Кор.счет: 20 символов", editMode: !Model.NoPayNoteId.HasValue)
                </div>
                <div class="col-sm-2">
                    @Html.CustomLabelFor(m => m.RachAcc)
                </div>
                <div class="col-sm-4">
                    @Html.KendoTextValidator(m => m.RachAcc, "^(\\d{20})$", isReadonly: Model.NoPayNoteId.HasValue || Model.ReadOnly, skipSerialize: true, id: "RachAcc" + Model.GuidId, validMes: "Расч. счет: 20 символов", editMode: !Model.NoPayNoteId.HasValue)
                </div>
                
            </div>
   @if (!Model.IsFisical) {
            <div class="form-group">
                <div class="col-sm-2">
                    @Html.CustomLabelFor(m => m.Kbk)
                </div>
                <div class="col-sm-4">
                    @Html.KendoTextBoxFor(x => x.Kbk, Model.ReadOnly, true, id: "Kbk" + Model.GuidId)
                </div>
                <div class="col-sm-2">
                    @Html.CustomLabelFor(m => m.Oktmo)
                </div>
                <div class="col-sm-4">
                    @Html.KendoTextBoxFor(x => x.Oktmo, Model.ReadOnly, true, id: "Oktmo" + Model.GuidId)
                </div>
            </div>
   }
            @if (Model.DamageId.HasValue)
            {
                <div class="form-group">
                    <div class="col-sm-6">
                    </div>
                    <div class="col-sm-2">
                        @Html.CustomLabelFor(m => m.BankCardNumber)
                    </div>
                    <div class="col-sm-4">
                        @Html.KendoTextValidator(m => m.BankCardNumber, "^[\\d]*$", isReadonly: Model.NoPayNoteId.HasValue || Model.ReadOnly, skipSerialize: true, id: "BankCardNumber" + Model.GuidId, validMes: "Номер карты: Допустимы только цифры", editMode: !Model.NoPayNoteId.HasValue)
                    </div>
                </div>
            }
            @if (Model.DamageId.HasValue)
            {
                <hr>
                <div class="form-group">
                    <div class="col-sm-2">
                        @Html.CustomLabel("Номер Заключения")
                    </div>
                    <div class="col-sm-2">
                        @Html.KendoTextBoxFor(m => m.NumInvoice, Model.ReadOnly, true, id: "NumInvoice" + Model.GuidId)
                    </div>
                    <div class="col-sm-1">
                        @Html.CustomLabelFor(m => m.Sort)
                    </div>
                    <div class="col-sm-1">
                        @Html.KendoNumericExTextBoxFor(m => m.Sort, 0, Model.GuidId, Model.ReadOnly, true)
                    </div>
                    @if (Model.IsFisical)
                    {
                    <div class="col-sm-2" >
                        @Html.CustomLabelFor(m => m.InsurSymmaOtchet)
                    </div>
                    <div class="col-sm-4">
                        @Html.KendoNumericExTextBoxFor(m => m.InsurSymmaOtchet, 2, Model.GuidId, Model.ReadOnly, true)
                    </div>
                    }
                </div>
                <div class="form-group">
                    <div class="col-sm-2">
                        @Html.CustomLabelFor(x => x.DateZackluchenia)
                    </div>
                    <div class="col-sm-4">
                        @Html.KendoDatePickerFor(x => x.DateZackluchenia, Model.ReadOnly, id: "DateZackluchenia" + Model.GuidId)
                    </div>
                </div>
                <hr>
            }
            <div class="form-group">
                <div class="col-sm-2">
                    @Html.CustomLabelFor(m => m.Comment)
                </div>
                <div class="col-sm-10">
                    @Html.TextBoxFor(m => m.Comment, htmlAttributes: Model.ReadOnly ?
        (object)new { @class = "k-textbox", @style = "width: 100%;resize: none;", data_skip = "true", @readonly = "readonly" } :
        new { @class = "k-textbox", @style = "width: 100%;resize: none;", data_skip = "true" })
                </div>
            </div>
            <div class="form-group">
                <div class="col-sm-2">
                </div>
                <div class="col-sm-2">
                    @Html.CustomLabelFor(m => m.DataInput)
                </div>
                <div class="col-sm-3">
                    @Html.TextBoxFor(m => m.DataInput, "{0:dd.MM.yyyy HH:mm}", new { @class = "k-textbox", @style = "width: 100%;", @readonly = "readonly", data_skip = "true" })
                </div>
                <div class="col-sm-2">
                    @Html.CustomLabelFor(m => m.UserName)
                </div>
                <div class="col-sm-3">
                    @Html.KendoTextBoxFor(m => m.UserName, true, true)
                </div>
            </div>
            @if (Model.InvoiceId > -1)
            {
                <div class="form-group">
                    <div class="col-sm-2">
                        @Html.KendoButton("invoiceAgree" + Model.GuidId, "Согласовать счет", isReadonly: Model.ReadOnly)
                    </div>
                    <div class="col-sm-2">
                        @Html.CustomLabelFor(m => m.DateAgree)
                    </div>
                    <div class="col-sm-3">
                        @Html.TextBoxFor(m => m.DateAgree, "{0:dd.MM.yyyy HH:mm}", new { @class = "k-textbox", @style = "width: 100%;", @readonly = "readonly", data_skip = "true" })
                    </div>
                    <div class="col-sm-2">
                        @Html.CustomLabelFor(m => m.UserNameAgree)
                    </div>
                    <div class="col-sm-3">
                        @Html.KendoTextBoxFor(m => m.UserNameAgree, true, true)
                    </div>
                </div>
            }
        </div>
        );
    })
)

                  <script>
    $(document).ready(function () {
        var dateInvoiceDatePicker = $('#DateInvoice@(Model.GuidId)').data('kendoDatePicker'),
            partDogTextBox = $('[name=PartDog' + '@Model.GuidId]').data('kendoNumericTextBox'),
            fspIdDropDownList = $('#FspId@(Model.GuidId)').data('kendoDropDownList');

        if (dateInvoiceDatePicker) {
            dateInvoiceDatePicker.bind('change', function () {
                var value = this.value();

                if (value == null) {
                    this.element.val('')
                } else if (value > new Date()) {
                    common.ShowError('Дата счета не может быть больше текущей даты!');
                    this.value(new Date());
                }
            });
        }

        if (partDogTextBox) {
            partDogTextBox.bind('change', function () {
                var currentDetailsForm = this.element.closest('div.invoice-details-form'),
                    overallPartDog = getOverallInvoicePartDog(),
                    partDog = this.value();

                if (partDog == null) {
                    updateInvoiceDetailSumOpl(currentDetailsForm);
                }
                else {
                    if (overallPartDog > 1) {
                        var availableValue = 1 - (overallPartDog - partDog);
                        Common.ClearNotification();
                        Common.ShowError("Внимание! Установлена некорректная доля в праве в счете. Максимально возможное значение = " + kendo.toString(availableValue >= 0 ? availableValue : 0, 'n2'));
                    }
                    else {
                        updateInvoiceDetailSumOpl(currentDetailsForm);
                    }
                }

                updatePartDogStyle(currentDetailsForm);
            });
        }

        if (fspIdDropDownList) {
            fspIdDropDownList.bind('change', function () {
                updatePartDogStyle(this.element.closest('div.invoice-details-form'));
            });
        }
    });

    $('#selectNoPayNote' + '@Model.GuidId').click(function (e) {
        e.preventDefault();
        var currentInvoiceForm = $(e.target).closest('.invoice-details-form'),
            contentUrl = '@Url.Action("Index", "RegistersView", new { registerId = "GbuNoPayReasonSelect", Transition = 1 })&357000300=@(Html.Raw(Model.IsFisical ? "ЖИ" : "ОИ"))',
            title = 'Выбор Причины отказа в выплате ущерба ГБУ',
                callbackFn = function (item) {
                    $.ajax({
                    type: 'POST',
                        url: '@Url.Action("GetById", "GbuNoPayReason")',
                        data: { 'id': item.id },
                        success: function (data) {
                            $('[id="NoPayNoteId' + '@Model.GuidId' + '"]').val(data.Id);
                            $('[id="NoPayNoteReason' + '@Model.GuidId' + '"]').val(data.Reason);

                            clearBankCredentials(currentInvoiceForm);
                            setBankCredentialsEditable(currentInvoiceForm, false);
                        }
                    });
                };

        Common.UI.ChooseWindow(title, contentUrl, callbackFn, 'Grid-357');
    });

    $('#selectSubject' + '@Model.GuidId').click(function (e) {
        e.preventDefault();
        var contentUrl = '@Url.Action("Index", "RegistersView")' + '?registerId=SubjectSelect&IsFisical=@Model.IsFisical',
            title = 'Выбор Получателя',
                callbackFn = function (item) {
                    $.ajax({
                    type: 'POST',
                        url: '@Url.Action("GetById", "Subject")',
                        data: { 'id': item.id },
                        success: function (data) {
                            $('[id="SubjectId' + '@Model.GuidId' + '"]').val(data.EmpId);
                            $('[id="SubjectName' + '@Model.GuidId' + '"]').val(data.SubjectName);
                            $('[id="Phone' + '@Model.GuidId' + '"]').val(data.OrgPhone);
                            $('[id="Inn' + '@Model.GuidId' + '"]').val(data.Inn);
                            $('[id="Kpp' + '@Model.GuidId' + '"]').val(data.Kpp);
                            $('[id="RachAcc' + '@Model.GuidId' + '"]').val(data.RachAcc);
                            $('[id="BankCardNumber' + '@Model.GuidId' + '"]').val(data.NumCard);
                            $('[id="Ls' + '@Model.GuidId' + '"]').val(data.LicAcc);

                            $('[id="BankId' + '@Model.GuidId' + '"]').val(data.BankId);
                            $('[id="BankName' + '@Model.GuidId' + '"]').val(data.BankName);
                            $('[id="BankInn' + '@Model.GuidId' + '"]').val(data.BankInn);
                            $('[id="BankKpp' + '@Model.GuidId' + '"]').val(data.BankKpp);
                            $('[id="BankKpp' + '@Model.GuidId' + '"]').val(data.BankKpp);
                            $('[id="BicBank' + '@Model.GuidId' + '"]').val(data.BankBic);
                            $('[id="KorAcc' + '@Model.GuidId' + '"]').val(data.BankKorAcc);
                        }
                    });
                };

        Common.UI.ChooseWindow(title, contentUrl, callbackFn, 'Grid-@ObjectModel.Insur.OMSubject.GetRegisterId()');
    });

    $('#selectBank' + '@Model.GuidId').click(function (e) {
        e.preventDefault();
        var contentUrl = '@Url.Action("Index", "RegistersView")' + '?registerId=BankSelect',
            title = 'Выбор Банка',
                callbackFn = function (item) {
                    $.ajax({
                    type: 'POST',
                        url: '@Url.Action("GetById", "Bank")',
                        data: { 'id': item.id },
                        success: function (data) {
                            $('[id="BankId' + '@Model.GuidId' + '"]').val(data.EmpId);
                            $('[id="BankName' + '@Model.GuidId' + '"]').val(data.BankName);
                            $('[id="BankInn' + '@Model.GuidId' + '"]').val(data.BankInn);
                            $('[id="BankKpp' + '@Model.GuidId' + '"]').val(data.BankKpp);
                            $('[id="BankKpp' + '@Model.GuidId' + '"]').val(data.BankKpp);
                            $('[id="BicBank' + '@Model.GuidId' + '"]').val(data.BankBic);
                            $('[id="KorAcc' + '@Model.GuidId' + '"]').val(data.BankKorAcc);
                        }
                    });
                };

        Common.UI.ChooseWindow(title, contentUrl, callbackFn, 'Grid-@ObjectModel.Insur.OMBank.GetRegisterId()');
    });

    function agreeInvoice(e) {
        var id = $('[id="InvoiceId' + '@Model.GuidId' + '"]').val();
        $.ajax({
            type: 'POST',
            url: '@Url.Action("Agreed", "Invoice")',
            data: { 'id': id },
            success: function () {
                buttonInvoiceReloadClick(e);
            },
            error: function (response) {
                Common.ShowError(response.responseText);
                kendo.ui.progress($('body'), false);
            }
        });
    }

    $('#invoiceAgree' + '@Model.GuidId').click(function (e) {
        e.preventDefault();
        Common.UI.ShowConfirm({
            title: 'Подтверждение',
            content: 'Вы подтверждаете что счет согласован?',
            onSuccess: agreeInvoice
        });
    });

    $('#saveInvoice' + '@Model.GuidId').click(function (e) {
        e.preventDefault();
        buttonInvoiceSaveClick(e);
    });

    function deleteInvoice(e) {
        var idComment = $('[id="InvoiceId' + '@Model.GuidId' + '"]').val();
        $.ajax({
            type: 'POST',
            url: '@Url.Action("Delete", "Invoice")',
            data: { 'id': idComment },
            success: function () {
                buttonInvoiceReloadClick(e);
            },
            error: function (response) {
                Common.ShowError(response.responseText);
            }
        });
    }

    $('#deleteInvoice' + '@Model.GuidId').click(function (e) {
        e.preventDefault();
        Common.UI.ShowConfirm({
            title: 'Подтверждение',
            content: 'Вы уверены, что требуется удалить счет?',
            onSuccess: deleteInvoice
        });
    });

    $(function () {
        var autoCopmpl = $('#BicBank' + '@Model.GuidId').data('kendoAutoComplete'),
            subjAutoCopmpl = $('#SubjectName' + '@Model.GuidId').data('kendoAutoComplete'),
            fspIdDropDownList = $('#FspId' + '@Model.GuidId').data('kendoDropDownList'),
            svidPolycNumTextBox = $('#SvidPolycNum' + '@Model.GuidId'),
            svdPolyceDatePicker = $('#SvdPolyceDate' + '@Model.GuidId').data('kendoDatePicker'),
            partDogTextBox = $('[name=PartDog' + '@Model.GuidId]').data('kendoNumericTextBox'),
            sumOplTextBox = $('#SumOpl' + '@Model.GuidId').data('kendoNumericTextBox'),
            bankNameTextBox = $('[id="BankName' + '@Model.GuidId' + '"]'),
            bankInnTextBox = $('[id="BankInn' + '@Model.GuidId' + '"]'),
            bankKppTextBox = $('[id="BankKpp' + '@Model.GuidId' + '"]'),
            bankBicTextBox = $('[id="BicBank' + '@Model.GuidId' + '"]'),
            bankKorAccTextBox = $('[id="KorAcc' + '@Model.GuidId' + '"]'),
            allPropertyIdDropDownList = $('#AllPropertyId' + '@Model.GuidId').data('kendoDropDownList');

        if (autoCopmpl) {
            autoCopmpl.bind("select", function (e) {
                $('[id="BankId' + '@Model.GuidId' + '"]').val(e.dataItem.EmpId);
                bankNameTextBox.val(e.dataItem.BankName);
                bankInnTextBox.val(e.dataItem.BankInn);
                bankKppTextBox.val(e.dataItem.BankKpp);
                bankBicTextBox.val(e.dataItem.BankBic);
                bankKorAccTextBox.val(e.dataItem.BankKorAcc);
            });
            autoCopmpl.bind('change', function () {
                if (bankBicTextBox.val().length == 0) {
                    $('[id="BankId' + '@Model.GuidId' + '"]').val('');
                }
            });
            autoCopmpl.setOptions({ noDataTemplate: false });
        }

        if (subjAutoCopmpl) {
            subjAutoCopmpl.bind("select", function (e) {
                $('[id="SubjectId' + '@Model.GuidId' + '"]').val(e.dataItem.EmpId);
                $('[id="SubjectName' + '@Model.GuidId' + '"]').val(e.dataItem.SubjectName);
                $('[id="Phone' + '@Model.GuidId' + '"]').val(e.dataItem.OrgPhone);
                $('[id="Inn' + '@Model.GuidId' + '"]').val(e.dataItem.Inn);
                $('[id="Kpp' + '@Model.GuidId' + '"]').val(e.dataItem.Kpp);
                $('[id="RachAcc' + '@Model.GuidId' + '"]').val(e.dataItem.RachAcc);
                $('[id="BankCardNumber' + '@Model.GuidId' + '"]').val(e.dataItem.NumCard);
                $('[id="Ls' + '@Model.GuidId' + '"]').val(e.dataItem.LicAcc);

                $('[id="BankId' + '@Model.GuidId' + '"]').val(e.dataItem.BankId);
                bankNameTextBox.val(e.dataItem.BankName);
                bankInnTextBox.val(e.dataItem.BankInn);
                bankKppTextBox.val(e.dataItem.BankKpp);
                bankBicTextBox.val(e.dataItem.BankBic);
                bankKorAccTextBox.val(e.dataItem.BankKorAcc);
            });
            subjAutoCopmpl.setOptions({ noDataTemplate: false });
            subjAutoCopmpl.element.on('keyup', KendoExtension.CapitalizeFirstCharInWord);
        }

        //CIPJS-502 Как только заполнены все поля ( кроме телефона+ комментарий + причина отказа) + (р/с ИЛИ банковская карта )
        //выдавать сообщение "Сохранить счет ? Да/Нет , Если "Да то сэмитировать нажатие на кнопку сохранить
        if (autoCopmpl) {
            autoCopmpl.bind('change', function (e) {
                checkNeedSaveInvoice(this.element);
            });
        }
        if (subjAutoCopmpl) {
            subjAutoCopmpl.bind('change', function (e) {
                checkNeedSaveInvoice(this.element);
            });
        }
        if (fspIdDropDownList) {
            fspIdDropDownList.bind('change', function (e) {
                checkNeedSaveInvoice(this.element);
            });
        }
        if (allPropertyIdDropDownList) {
            allPropertyIdDropDownList.bind('change', function (e) {
                checkNeedSaveInvoice(this.element);
            });
        }
        if (svdPolyceDatePicker) {
            svdPolyceDatePicker.bind('change', function (e) {
                checkNeedSaveInvoice(this.element);
            });
        }
        if (partDogTextBox) {
            partDogTextBox.bind('change', function (e) {
                checkNeedSaveInvoice(this.element);
            });
        }
        if (sumOplTextBox) {
            sumOplTextBox.bind('change', function (e) {
                checkNeedSaveInvoice(this.element);
            });
        }
        if (bankNameTextBox) {
            bankNameTextBox.on('change', function (e) {
                checkNeedSaveInvoice($(this));
            });
        }
        if (bankInnTextBox) {
            bankInnTextBox.on('change', function (e) {
                checkNeedSaveInvoice($(this));
            });
        }
        if (bankKppTextBox) {
            bankKppTextBox.on('change', function (e) {
                checkNeedSaveInvoice($(this));
            });
        }
        if (bankBicTextBox) {
            bankBicTextBox.on('change', function (e) {
                checkNeedSaveInvoice($(this));
            });
        }
        if (bankKorAccTextBox) {
            bankKorAccTextBox.on('change', function (e) {
                checkNeedSaveInvoice($(this));
            });
        }
    });
                  </script>