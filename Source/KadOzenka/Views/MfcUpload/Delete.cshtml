@using CIPJS.DAL.Mfc.Upload
@using Core.Shared.Extensions
@using ObjectModel.Insur

@model MfcDeleteOkrugPeriodDto

@if(Model.Okrug != null && Model.PeriodRegDate.HasValue)
{
    string message = $"Вы действительно хотите удалить результаты загрузки за период {Model.PeriodRegDate.Value : MM.yyyy}?";
<div id="questionMessage">
    <p>
        @message
    </p>
    @if (Model.Districts != null && Model.Districts.Count > 0)
    {
    <ul>
        Районы:
        @foreach(OMDistrict district in Model.Districts)
        {
        <li>
            @district.Name
        </li>
        }
    </ul>
    }
    <p style="padding-top: 1em; text-align: right">
        <button type="submit" class="k-button k-primary">Удалить</button>
    </p>
</div>
<div id="successMessage" style="display:none;">
    Удаление завершено
</div>
<script type="text/javascript">
    $(document).ready(function () {
        $('button[type="submit"]').on('click', function (e) {
            e.preventDefault();
            Common.ClearNotification();
            kendo.ui.progress($('body'), false);
            $.ajax({
                type: 'POST',
                url: '@Url.Action("Delete","MfcUpload")',
                data: { okrugCode: @Model.Okrug.Code, periodRegDate: '@Model.PeriodRegDate.Value.ToString("dd.MM.yyyy")' },
                dataType: 'json',
                success: function (data) {
                    kendo.ui.progress($('body'), false);
                    if (data.Success === true) {
                        $('#questionMessage').hide();
                        $('#successMessage').show();
                    }
                    else {
                        var message = 'Произошла ошибка';
                        if (data.Errors) {
                            for (var i = 0; i < data.Errors.length; i++) {
                                message += '<br>' + data.Errors[i];
                            }
                        }
                        Common.ShowError(message)
                    }
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    Common.ShowError(jqXHR.responseText);
                }
            });
        });
    });
</script>
}
else
{
    string errorMessage = Model.Okrug != null && Model.Okrug.ShortName.IsNotEmpty() ?
        $"Не удалось определить последний загруженный период для округа {Model.Okrug.ShortName}" :
        "Не удалось определить последний загруженный период для округа";
<p>
    @errorMessage
</p>
}
