/*
 * CadAppraisalDataApi
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class RRDataLoadModel : IEquatable<RRDataLoadModel>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id")]
        public long? Id { get; set; }

        /// <summary>
        /// Дата загрузки
        /// </summary>
        /// <value>Дата загрузки</value>
        [DataMember(Name="LoadDate")]
        public DateTime? LoadDate { get; set; }

        /// <summary>
        /// Номер документа
        /// </summary>
        /// <value>Номер документа</value>
        [DataMember(Name="DocNumber")]
        public string DocNumber { get; set; }

        /// <summary>
        /// Дата документа
        /// </summary>
        /// <value>Дата документа</value>
        [DataMember(Name="DocDate")]
        public DateTime? DocDate { get; set; }

        /// <summary>
        /// Наименование документа
        /// </summary>
        /// <value>Наименование документа</value>
        [DataMember(Name="DocName")]
        public string DocName { get; set; }

        /// <summary>
        /// Организация
        /// </summary>
        /// <value>Организация</value>
        [DataMember(Name="OrgName")]
        public string OrgName { get; set; }

        /// <summary>
        /// Дата оценки
        /// </summary>
        /// <value>Дата оценки</value>
        [DataMember(Name="DateAppraisal")]
        public DateTime? DateAppraisal { get; set; }

        /// <summary>
        /// Тип загрузки
        /// </summary>
        /// <value>Тип загрузки</value>
        [DataMember(Name="LoadType")]
        public string LoadType { get; set; }

        /// <summary>
        /// Ссылка на файл основание
        /// </summary>
        /// <value>Ссылка на файл основание</value>
        [DataMember(Name="DocBaseUrl")]
        public DocUrl DocBaseUrl { get; set; }

        /// <summary>
        /// Список ссылок на файлы xml
        /// </summary>
        /// <value>Список ссылок на файлы xml</value>
        [DataMember(Name="XmlDocUrls")]
        public List<DocUrl> XmlDocUrls { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RRDataLoadModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LoadDate: ").Append(LoadDate).Append("\n");
            sb.Append("  DocNumber: ").Append(DocNumber).Append("\n");
            sb.Append("  DocDate: ").Append(DocDate).Append("\n");
            sb.Append("  DocName: ").Append(DocName).Append("\n");
            sb.Append("  OrgName: ").Append(OrgName).Append("\n");
            sb.Append("  DateAppraisal: ").Append(DateAppraisal).Append("\n");
            sb.Append("  LoadType: ").Append(LoadType).Append("\n");
            sb.Append("  DocBaseUrl: ").Append(DocBaseUrl).Append("\n");
            sb.Append("  XmlDocUrls: ").Append(XmlDocUrls).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((RRDataLoadModel)obj);
        }

        /// <summary>
        /// Returns true if RRDataLoadModel instances are equal
        /// </summary>
        /// <param name="other">Instance of RRDataLoadModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RRDataLoadModel other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    LoadDate == other.LoadDate ||
                    LoadDate != null &&
                    LoadDate.Equals(other.LoadDate)
                ) && 
                (
                    DocNumber == other.DocNumber ||
                    DocNumber != null &&
                    DocNumber.Equals(other.DocNumber)
                ) && 
                (
                    DocDate == other.DocDate ||
                    DocDate != null &&
                    DocDate.Equals(other.DocDate)
                ) && 
                (
                    DocName == other.DocName ||
                    DocName != null &&
                    DocName.Equals(other.DocName)
                ) && 
                (
                    OrgName == other.OrgName ||
                    OrgName != null &&
                    OrgName.Equals(other.OrgName)
                ) && 
                (
                    DateAppraisal == other.DateAppraisal ||
                    DateAppraisal != null &&
                    DateAppraisal.Equals(other.DateAppraisal)
                ) && 
                (
                    LoadType == other.LoadType ||
                    LoadType != null &&
                    LoadType.Equals(other.LoadType)
                ) && 
                (
                    DocBaseUrl == other.DocBaseUrl ||
                    DocBaseUrl != null &&
                    DocBaseUrl.Equals(other.DocBaseUrl)
                ) && 
                (
                    XmlDocUrls == other.XmlDocUrls ||
                    XmlDocUrls != null &&
                    XmlDocUrls.SequenceEqual(other.XmlDocUrls)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (LoadDate != null)
                    hashCode = hashCode * 59 + LoadDate.GetHashCode();
                    if (DocNumber != null)
                    hashCode = hashCode * 59 + DocNumber.GetHashCode();
                    if (DocDate != null)
                    hashCode = hashCode * 59 + DocDate.GetHashCode();
                    if (DocName != null)
                    hashCode = hashCode * 59 + DocName.GetHashCode();
                    if (OrgName != null)
                    hashCode = hashCode * 59 + OrgName.GetHashCode();
                    if (DateAppraisal != null)
                    hashCode = hashCode * 59 + DateAppraisal.GetHashCode();
                    if (LoadType != null)
                    hashCode = hashCode * 59 + LoadType.GetHashCode();
                    if (DocBaseUrl != null)
                    hashCode = hashCode * 59 + DocBaseUrl.GetHashCode();
                    if (XmlDocUrls != null)
                    hashCode = hashCode * 59 + XmlDocUrls.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(RRDataLoadModel left, RRDataLoadModel right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(RRDataLoadModel left, RRDataLoadModel right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
