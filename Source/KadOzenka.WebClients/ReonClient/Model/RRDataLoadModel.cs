/* 
 * CadAppraisalDataApi
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// RRDataLoadModel
    /// </summary>
    [DataContract]
    public partial class RRDataLoadModel :  IEquatable<RRDataLoadModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RRDataLoadModel" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="loadDate">Дата загрузки.</param>
        /// <param name="docNumber">Номер документа.</param>
        /// <param name="docDate">Дата документа.</param>
        /// <param name="docName">Наименование документа.</param>
        /// <param name="orgName">Организация.</param>
        /// <param name="dateAppraisal">Дата оценки.</param>
        /// <param name="loadType">Тип загрузки.</param>
        /// <param name="docBaseUrl">Ссылка на файл основание.</param>
        /// <param name="xmlDocUrls">Список ссылок на файлы xml.</param>
        public RRDataLoadModel(long? id = default(long?), DateTime? loadDate = default(DateTime?), string docNumber = default(string), DateTime? docDate = default(DateTime?), string docName = default(string), string orgName = default(string), DateTime? dateAppraisal = default(DateTime?), string loadType = default(string), DocUrl docBaseUrl = default(DocUrl), List<DocUrl> xmlDocUrls = default(List<DocUrl>))
        {
            this.Id = id;
            this.LoadDate = loadDate;
            this.DocNumber = docNumber;
            this.DocDate = docDate;
            this.DocName = docName;
            this.OrgName = orgName;
            this.DateAppraisal = dateAppraisal;
            this.LoadType = loadType;
            this.DocBaseUrl = docBaseUrl;
            this.XmlDocUrls = xmlDocUrls;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Дата загрузки
        /// </summary>
        /// <value>Дата загрузки</value>
        [DataMember(Name="LoadDate", EmitDefaultValue=false)]
        public DateTime? LoadDate { get; set; }

        /// <summary>
        /// Номер документа
        /// </summary>
        /// <value>Номер документа</value>
        [DataMember(Name="DocNumber", EmitDefaultValue=false)]
        public string DocNumber { get; set; }

        /// <summary>
        /// Дата документа
        /// </summary>
        /// <value>Дата документа</value>
        [DataMember(Name="DocDate", EmitDefaultValue=false)]
        public DateTime? DocDate { get; set; }

        /// <summary>
        /// Наименование документа
        /// </summary>
        /// <value>Наименование документа</value>
        [DataMember(Name="DocName", EmitDefaultValue=false)]
        public string DocName { get; set; }

        /// <summary>
        /// Организация
        /// </summary>
        /// <value>Организация</value>
        [DataMember(Name="OrgName", EmitDefaultValue=false)]
        public string OrgName { get; set; }

        /// <summary>
        /// Дата оценки
        /// </summary>
        /// <value>Дата оценки</value>
        [DataMember(Name="DateAppraisal", EmitDefaultValue=false)]
        public DateTime? DateAppraisal { get; set; }

        /// <summary>
        /// Тип загрузки
        /// </summary>
        /// <value>Тип загрузки</value>
        [DataMember(Name="LoadType", EmitDefaultValue=false)]
        public string LoadType { get; set; }

        /// <summary>
        /// Ссылка на файл основание
        /// </summary>
        /// <value>Ссылка на файл основание</value>
        [DataMember(Name="DocBaseUrl", EmitDefaultValue=false)]
        public DocUrl DocBaseUrl { get; set; }

        /// <summary>
        /// Список ссылок на файлы xml
        /// </summary>
        /// <value>Список ссылок на файлы xml</value>
        [DataMember(Name="XmlDocUrls", EmitDefaultValue=false)]
        public List<DocUrl> XmlDocUrls { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RRDataLoadModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LoadDate: ").Append(LoadDate).Append("\n");
            sb.Append("  DocNumber: ").Append(DocNumber).Append("\n");
            sb.Append("  DocDate: ").Append(DocDate).Append("\n");
            sb.Append("  DocName: ").Append(DocName).Append("\n");
            sb.Append("  OrgName: ").Append(OrgName).Append("\n");
            sb.Append("  DateAppraisal: ").Append(DateAppraisal).Append("\n");
            sb.Append("  LoadType: ").Append(LoadType).Append("\n");
            sb.Append("  DocBaseUrl: ").Append(DocBaseUrl).Append("\n");
            sb.Append("  XmlDocUrls: ").Append(XmlDocUrls).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RRDataLoadModel);
        }

        /// <summary>
        /// Returns true if RRDataLoadModel instances are equal
        /// </summary>
        /// <param name="input">Instance of RRDataLoadModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RRDataLoadModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.LoadDate == input.LoadDate ||
                    (this.LoadDate != null &&
                    this.LoadDate.Equals(input.LoadDate))
                ) && 
                (
                    this.DocNumber == input.DocNumber ||
                    (this.DocNumber != null &&
                    this.DocNumber.Equals(input.DocNumber))
                ) && 
                (
                    this.DocDate == input.DocDate ||
                    (this.DocDate != null &&
                    this.DocDate.Equals(input.DocDate))
                ) && 
                (
                    this.DocName == input.DocName ||
                    (this.DocName != null &&
                    this.DocName.Equals(input.DocName))
                ) && 
                (
                    this.OrgName == input.OrgName ||
                    (this.OrgName != null &&
                    this.OrgName.Equals(input.OrgName))
                ) && 
                (
                    this.DateAppraisal == input.DateAppraisal ||
                    (this.DateAppraisal != null &&
                    this.DateAppraisal.Equals(input.DateAppraisal))
                ) && 
                (
                    this.LoadType == input.LoadType ||
                    (this.LoadType != null &&
                    this.LoadType.Equals(input.LoadType))
                ) && 
                (
                    this.DocBaseUrl == input.DocBaseUrl ||
                    (this.DocBaseUrl != null &&
                    this.DocBaseUrl.Equals(input.DocBaseUrl))
                ) && 
                (
                    this.XmlDocUrls == input.XmlDocUrls ||
                    this.XmlDocUrls != null &&
                    this.XmlDocUrls.SequenceEqual(input.XmlDocUrls)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.LoadDate != null)
                    hashCode = hashCode * 59 + this.LoadDate.GetHashCode();
                if (this.DocNumber != null)
                    hashCode = hashCode * 59 + this.DocNumber.GetHashCode();
                if (this.DocDate != null)
                    hashCode = hashCode * 59 + this.DocDate.GetHashCode();
                if (this.DocName != null)
                    hashCode = hashCode * 59 + this.DocName.GetHashCode();
                if (this.OrgName != null)
                    hashCode = hashCode * 59 + this.OrgName.GetHashCode();
                if (this.DateAppraisal != null)
                    hashCode = hashCode * 59 + this.DateAppraisal.GetHashCode();
                if (this.LoadType != null)
                    hashCode = hashCode * 59 + this.LoadType.GetHashCode();
                if (this.DocBaseUrl != null)
                    hashCode = hashCode * 59 + this.DocBaseUrl.GetHashCode();
                if (this.XmlDocUrls != null)
                    hashCode = hashCode * 59 + this.XmlDocUrls.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
