/* 
 * CadAppraisalDataApi
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRosreestrDataApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Возвращает документ из папки для загрузок кадастровой оценки
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadId">Идентификатор загрузки</param>
        /// <param name="fname">Название файла</param>
        /// <returns>Object</returns>
        Object RosreestrDataGetFileByIdCA (long? loadId, string fname);

        /// <summary>
        /// Возвращает документ из папки для загрузок кадастровой оценки
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadId">Идентификатор загрузки</param>
        /// <param name="fname">Название файла</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> RosreestrDataGetFileByIdCAWithHttpInfo (long? loadId, string fname);
        /// <summary>
        /// Возвращает документ из файлового хранилища по id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="fname"></param>
        /// <returns>Object</returns>
        Object RosreestrDataGetFileByIdZD (long? id, string fname);

        /// <summary>
        /// Возвращает документ из файлового хранилища по id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="fname"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> RosreestrDataGetFileByIdZDWithHttpInfo (long? id, string fname);
        /// <summary>
        /// Возвращает графические факторы по кадастровому номеру
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cadNum">Кадастровый номер</param>
        /// <param name="dateAppraisal">Дата оценки</param>
        /// <returns>Object</returns>
        Object RosreestrDataGetGraphFactorsByCadNum (string cadNum, DateTime? dateAppraisal);

        /// <summary>
        /// Возвращает графические факторы по кадастровому номеру
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cadNum">Кадастровый номер</param>
        /// <param name="dateAppraisal">Дата оценки</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> RosreestrDataGetGraphFactorsByCadNumWithHttpInfo (string cadNum, DateTime? dateAppraisal);
        /// <summary>
        /// Возвращает данные Росреестра по диапазону дат включительно
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateFrom">Дата с</param>
        /// <param name="dateTo">Дата по</param>
        /// <returns>List&lt;RRDataLoadModel&gt;</returns>
        List<RRDataLoadModel> RosreestrDataGetRRData (DateTime? dateFrom, DateTime? dateTo);

        /// <summary>
        /// Возвращает данные Росреестра по диапазону дат включительно
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateFrom">Дата с</param>
        /// <param name="dateTo">Дата по</param>
        /// <returns>ApiResponse of List&lt;RRDataLoadModel&gt;</returns>
        ApiResponse<List<RRDataLoadModel>> RosreestrDataGetRRDataWithHttpInfo (DateTime? dateFrom, DateTime? dateTo);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Возвращает документ из папки для загрузок кадастровой оценки
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadId">Идентификатор загрузки</param>
        /// <param name="fname">Название файла</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> RosreestrDataGetFileByIdCAAsync (long? loadId, string fname);

        /// <summary>
        /// Возвращает документ из папки для загрузок кадастровой оценки
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadId">Идентификатор загрузки</param>
        /// <param name="fname">Название файла</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RosreestrDataGetFileByIdCAAsyncWithHttpInfo (long? loadId, string fname);
        /// <summary>
        /// Возвращает документ из файлового хранилища по id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="fname"></param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> RosreestrDataGetFileByIdZDAsync (long? id, string fname);

        /// <summary>
        /// Возвращает документ из файлового хранилища по id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="fname"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RosreestrDataGetFileByIdZDAsyncWithHttpInfo (long? id, string fname);
        /// <summary>
        /// Возвращает графические факторы по кадастровому номеру
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cadNum">Кадастровый номер</param>
        /// <param name="dateAppraisal">Дата оценки</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> RosreestrDataGetGraphFactorsByCadNumAsync (string cadNum, DateTime? dateAppraisal);

        /// <summary>
        /// Возвращает графические факторы по кадастровому номеру
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cadNum">Кадастровый номер</param>
        /// <param name="dateAppraisal">Дата оценки</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RosreestrDataGetGraphFactorsByCadNumAsyncWithHttpInfo (string cadNum, DateTime? dateAppraisal);
        /// <summary>
        /// Возвращает данные Росреестра по диапазону дат включительно
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateFrom">Дата с</param>
        /// <param name="dateTo">Дата по</param>
        /// <returns>Task of List&lt;RRDataLoadModel&gt;</returns>
        System.Threading.Tasks.Task<List<RRDataLoadModel>> RosreestrDataGetRRDataAsync (DateTime? dateFrom, DateTime? dateTo);

        /// <summary>
        /// Возвращает данные Росреестра по диапазону дат включительно
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateFrom">Дата с</param>
        /// <param name="dateTo">Дата по</param>
        /// <returns>Task of ApiResponse (List&lt;RRDataLoadModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RRDataLoadModel>>> RosreestrDataGetRRDataAsyncWithHttpInfo (DateTime? dateFrom, DateTime? dateTo);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RosreestrDataApi : IRosreestrDataApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RosreestrDataApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RosreestrDataApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RosreestrDataApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RosreestrDataApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Возвращает документ из папки для загрузок кадастровой оценки 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadId">Идентификатор загрузки</param>
        /// <param name="fname">Название файла</param>
        /// <returns>Object</returns>
        public Object RosreestrDataGetFileByIdCA (long? loadId, string fname)
        {
             ApiResponse<Object> localVarResponse = RosreestrDataGetFileByIdCAWithHttpInfo(loadId, fname);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Возвращает документ из папки для загрузок кадастровой оценки 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadId">Идентификатор загрузки</param>
        /// <param name="fname">Название файла</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > RosreestrDataGetFileByIdCAWithHttpInfo (long? loadId, string fname)
        {
            // verify the required parameter 'loadId' is set
            if (loadId == null)
                throw new ApiException(400, "Missing required parameter 'loadId' when calling RosreestrDataApi->RosreestrDataGetFileByIdCA");
            // verify the required parameter 'fname' is set
            if (fname == null)
                throw new ApiException(400, "Missing required parameter 'fname' when calling RosreestrDataApi->RosreestrDataGetFileByIdCA");

            var localVarPath = "/RosreestrData/file_ca_by_id/{load_id}/{fname}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (loadId != null) localVarPathParams.Add("load_id", this.Configuration.ApiClient.ParameterToString(loadId)); // path parameter
            if (fname != null) localVarPathParams.Add("fname", this.Configuration.ApiClient.ParameterToString(fname)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RosreestrDataGetFileByIdCA", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Возвращает документ из папки для загрузок кадастровой оценки 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadId">Идентификатор загрузки</param>
        /// <param name="fname">Название файла</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> RosreestrDataGetFileByIdCAAsync (long? loadId, string fname)
        {
             ApiResponse<Object> localVarResponse = await RosreestrDataGetFileByIdCAAsyncWithHttpInfo(loadId, fname);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Возвращает документ из папки для загрузок кадастровой оценки 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadId">Идентификатор загрузки</param>
        /// <param name="fname">Название файла</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RosreestrDataGetFileByIdCAAsyncWithHttpInfo (long? loadId, string fname)
        {
            // verify the required parameter 'loadId' is set
            if (loadId == null)
                throw new ApiException(400, "Missing required parameter 'loadId' when calling RosreestrDataApi->RosreestrDataGetFileByIdCA");
            // verify the required parameter 'fname' is set
            if (fname == null)
                throw new ApiException(400, "Missing required parameter 'fname' when calling RosreestrDataApi->RosreestrDataGetFileByIdCA");

            var localVarPath = "/RosreestrData/file_ca_by_id/{load_id}/{fname}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (loadId != null) localVarPathParams.Add("load_id", this.Configuration.ApiClient.ParameterToString(loadId)); // path parameter
            if (fname != null) localVarPathParams.Add("fname", this.Configuration.ApiClient.ParameterToString(fname)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RosreestrDataGetFileByIdCA", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Возвращает документ из файлового хранилища по id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="fname"></param>
        /// <returns>Object</returns>
        public Object RosreestrDataGetFileByIdZD (long? id, string fname)
        {
             ApiResponse<Object> localVarResponse = RosreestrDataGetFileByIdZDWithHttpInfo(id, fname);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Возвращает документ из файлового хранилища по id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="fname"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > RosreestrDataGetFileByIdZDWithHttpInfo (long? id, string fname)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RosreestrDataApi->RosreestrDataGetFileByIdZD");
            // verify the required parameter 'fname' is set
            if (fname == null)
                throw new ApiException(400, "Missing required parameter 'fname' when calling RosreestrDataApi->RosreestrDataGetFileByIdZD");

            var localVarPath = "/RosreestrData/file_zd_by_id/{id}/{fname}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fname != null) localVarPathParams.Add("fname", this.Configuration.ApiClient.ParameterToString(fname)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RosreestrDataGetFileByIdZD", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Возвращает документ из файлового хранилища по id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="fname"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> RosreestrDataGetFileByIdZDAsync (long? id, string fname)
        {
             ApiResponse<Object> localVarResponse = await RosreestrDataGetFileByIdZDAsyncWithHttpInfo(id, fname);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Возвращает документ из файлового хранилища по id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="fname"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RosreestrDataGetFileByIdZDAsyncWithHttpInfo (long? id, string fname)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RosreestrDataApi->RosreestrDataGetFileByIdZD");
            // verify the required parameter 'fname' is set
            if (fname == null)
                throw new ApiException(400, "Missing required parameter 'fname' when calling RosreestrDataApi->RosreestrDataGetFileByIdZD");

            var localVarPath = "/RosreestrData/file_zd_by_id/{id}/{fname}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fname != null) localVarPathParams.Add("fname", this.Configuration.ApiClient.ParameterToString(fname)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RosreestrDataGetFileByIdZD", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Возвращает графические факторы по кадастровому номеру 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cadNum">Кадастровый номер</param>
        /// <param name="dateAppraisal">Дата оценки</param>
        /// <returns>Object</returns>
        public Object RosreestrDataGetGraphFactorsByCadNum (string cadNum, DateTime? dateAppraisal)
        {
             ApiResponse<Object> localVarResponse = RosreestrDataGetGraphFactorsByCadNumWithHttpInfo(cadNum, dateAppraisal);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Возвращает графические факторы по кадастровому номеру 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cadNum">Кадастровый номер</param>
        /// <param name="dateAppraisal">Дата оценки</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > RosreestrDataGetGraphFactorsByCadNumWithHttpInfo (string cadNum, DateTime? dateAppraisal)
        {
            // verify the required parameter 'cadNum' is set
            if (cadNum == null)
                throw new ApiException(400, "Missing required parameter 'cadNum' when calling RosreestrDataApi->RosreestrDataGetGraphFactorsByCadNum");
            // verify the required parameter 'dateAppraisal' is set
            if (dateAppraisal == null)
                throw new ApiException(400, "Missing required parameter 'dateAppraisal' when calling RosreestrDataApi->RosreestrDataGetGraphFactorsByCadNum");

            var localVarPath = "/RosreestrData/graph_factors_by_cad_num";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cadNum != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cad_num", cadNum)); // query parameter
            if (dateAppraisal != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date_appraisal", dateAppraisal)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RosreestrDataGetGraphFactorsByCadNum", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Возвращает графические факторы по кадастровому номеру 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cadNum">Кадастровый номер</param>
        /// <param name="dateAppraisal">Дата оценки</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> RosreestrDataGetGraphFactorsByCadNumAsync (string cadNum, DateTime? dateAppraisal)
        {
             ApiResponse<Object> localVarResponse = await RosreestrDataGetGraphFactorsByCadNumAsyncWithHttpInfo(cadNum, dateAppraisal);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Возвращает графические факторы по кадастровому номеру 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cadNum">Кадастровый номер</param>
        /// <param name="dateAppraisal">Дата оценки</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RosreestrDataGetGraphFactorsByCadNumAsyncWithHttpInfo (string cadNum, DateTime? dateAppraisal)
        {
            // verify the required parameter 'cadNum' is set
            if (cadNum == null)
                throw new ApiException(400, "Missing required parameter 'cadNum' when calling RosreestrDataApi->RosreestrDataGetGraphFactorsByCadNum");
            // verify the required parameter 'dateAppraisal' is set
            if (dateAppraisal == null)
                throw new ApiException(400, "Missing required parameter 'dateAppraisal' when calling RosreestrDataApi->RosreestrDataGetGraphFactorsByCadNum");

            var localVarPath = "/RosreestrData/graph_factors_by_cad_num";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cadNum != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cad_num", cadNum)); // query parameter
            if (dateAppraisal != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date_appraisal", dateAppraisal)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RosreestrDataGetGraphFactorsByCadNum", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Возвращает данные Росреестра по диапазону дат включительно 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateFrom">Дата с</param>
        /// <param name="dateTo">Дата по</param>
        /// <returns>List&lt;RRDataLoadModel&gt;</returns>
        public List<RRDataLoadModel> RosreestrDataGetRRData (DateTime? dateFrom, DateTime? dateTo)
        {
             ApiResponse<List<RRDataLoadModel>> localVarResponse = RosreestrDataGetRRDataWithHttpInfo(dateFrom, dateTo);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Возвращает данные Росреестра по диапазону дат включительно 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateFrom">Дата с</param>
        /// <param name="dateTo">Дата по</param>
        /// <returns>ApiResponse of List&lt;RRDataLoadModel&gt;</returns>
        public ApiResponse< List<RRDataLoadModel> > RosreestrDataGetRRDataWithHttpInfo (DateTime? dateFrom, DateTime? dateTo)
        {
            // verify the required parameter 'dateFrom' is set
            if (dateFrom == null)
                throw new ApiException(400, "Missing required parameter 'dateFrom' when calling RosreestrDataApi->RosreestrDataGetRRData");
            // verify the required parameter 'dateTo' is set
            if (dateTo == null)
                throw new ApiException(400, "Missing required parameter 'dateTo' when calling RosreestrDataApi->RosreestrDataGetRRData");

            var localVarPath = "/RosreestrData/xml_by_date";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dateFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateFrom", dateFrom)); // query parameter
            if (dateTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateTo", dateTo)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RosreestrDataGetRRData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RRDataLoadModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RRDataLoadModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RRDataLoadModel>)));
        }

        /// <summary>
        /// Возвращает данные Росреестра по диапазону дат включительно 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateFrom">Дата с</param>
        /// <param name="dateTo">Дата по</param>
        /// <returns>Task of List&lt;RRDataLoadModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<RRDataLoadModel>> RosreestrDataGetRRDataAsync (DateTime? dateFrom, DateTime? dateTo)
        {
             ApiResponse<List<RRDataLoadModel>> localVarResponse = await RosreestrDataGetRRDataAsyncWithHttpInfo(dateFrom, dateTo);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Возвращает данные Росреестра по диапазону дат включительно 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateFrom">Дата с</param>
        /// <param name="dateTo">Дата по</param>
        /// <returns>Task of ApiResponse (List&lt;RRDataLoadModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<RRDataLoadModel>>> RosreestrDataGetRRDataAsyncWithHttpInfo (DateTime? dateFrom, DateTime? dateTo)
        {
            // verify the required parameter 'dateFrom' is set
            if (dateFrom == null)
                throw new ApiException(400, "Missing required parameter 'dateFrom' when calling RosreestrDataApi->RosreestrDataGetRRData");
            // verify the required parameter 'dateTo' is set
            if (dateTo == null)
                throw new ApiException(400, "Missing required parameter 'dateTo' when calling RosreestrDataApi->RosreestrDataGetRRData");

            var localVarPath = "/RosreestrData/xml_by_date";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dateFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateFrom", dateFrom)); // query parameter
            if (dateTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateTo", dateTo)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RosreestrDataGetRRData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RRDataLoadModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RRDataLoadModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RRDataLoadModel>)));
        }

    }
}
