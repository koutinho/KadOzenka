@using ObjectModel.Insur;
@using CIPJS.Models.BankPlat;
@using Newtonsoft.Json;
@using ObjectModel.Directory;

@model LinkBankPlatDto

<style>
    .k-grid > .k-header.k-grid-toolbar > .k-button-icontext > span {
        font-family: 'WebComponentsIcons' !important;
    }

    .k-grid.edit-row-mode > table > tbody > tr:first-child {
        display: none !important;
    }
</style>

<ul id="ls_panelbar" class="panelbar">
    <li>
        <span id="DA_BankPlat">Банковская строка оплат</span>
        <div>
            <div class="form-horizontal col-sm-12">
                <div class="form-group"></div>
                <div class="form-group">
                    <div class="col-sm-12">
                        <div id="LinkBankPlatGrid">
                        </div>
                    </div>
                </div>
                <div class="form-group"></div>
            </div>
        </div>
    </li>
    <li>
        <span id="DA_InputPlats">Связать со строкой зачисления от МФЦ</span>
        <div>
            <div class="form-horizontal col-sm-12">
                <div class="form-group"></div>
                <div class="form-group">
                    <div class="col-sm-12">
                        <div id="LinkInputPlatsGrid">
                        </div>
                    </div>
                </div>
                <div class="form-group"></div>
            </div>
        </div>
    </li>
    <li>
        <span id="DA_Reason">Основание</span>
        <div>
            <div class="form-horizontal col-sm-12">
                <div class="form-group"></div>
                <div class="form-group">
                    <div class="col-sm-12">
                        @Html.TextArea("Reason", null, 3, 0, new { @class = "k-textbox", @style = "width: 100%; resize: none;", editmode = "true" })
                    </div>
                </div>
                <div class="form-group"></div>
            </div>
        </div>
    </li>
</ul>
<div class="static-nav">
    <div id="link-plat-toolbar" style="position:absolute; bottom: 20px;width: 95%;"></div>
</div>

<script type="text/javascript">
    var model = @Html.Raw(JsonConvert.SerializeObject(Model)),
        inputPlatEmpIdAttributeId = @Html.Raw(OMInputPlat.GetColumnAttributeId(x => x.EmpId)),
        inputPlatPeriodRegDateAttributeId = @Html.Raw(OMInputPlat.GetColumnAttributeId(x => x.PeriodRegDate)),
        inputPlatStatusIdentifCodeAttributeId = @Html.Raw(OMInputPlat.GetColumnAttributeId(x => x.StatusIdentif_Code)),
        inputPlatLinkBandIdAttributeId = @Html.Raw(OMInputPlat.GetColumnAttributeId(x => x.LinkBankId)),
        notIdentifiedCode = @Html.Raw((long)StatusIdentifikacii.NotIdentified),
        uniqueSessionKey = '@Html.Raw(ViewBag.CurrentUniqueSessionKey)';

    $(document).ready(function () {
        var linkBankPlatGrid = $('#LinkBankPlatGrid').kendoGrid({
            dataSource: {
                data: model,
                schema: {
                    model: {
                        fields: {
                            Id: { type: 'number' },
                            PeriodRegDate: { type: 'date' },
                            DataPp: { type: 'date' },
                            Kodpl: { type: 'string' },
                            SumByCode: { type: 'number' },
                            NomDoc: { type: 'string' },
                            Period: { type: 'date' },
                            FlagVozvr: { type: 'number' },
                            CodDoc: { type: 'number' },
                            NachAdresT: { type: 'string' },
                            NachUnom: { type: 'number' },
                            NachKvnom: { type: 'string' },
                            NachOpl: { type: 'number' }
                        }
                    }
                }
            },
            columns: [
                { field: 'Id', hidden: true },
                { field: 'PeriodRegDate', title: 'Период учета', format: '{0:MMMM yyyy}', width: '15%' },
                { field: 'DataPp', title: 'Дата платежа', format: '{0:dd.MM.yyyy}', width: '10%' },
                { field: 'Kodpl', title: 'Код плательщика', width: '10%' },
                { field: 'SumByCode', title: 'Сумма платежа', template: KendoExtension.TemplateDecimal('SumByCode'), width: '10%' },
                { field: 'FlagVozvr', title: 'Признак распределения', width: '10%' },
                { field: 'CodDoc', title: 'Уникальный код', width: '10%' },
                { field: 'Period', title: 'Период оплаты', format: '{0:dd.MM.yyyy}', width: '10%' },
                { field: 'NomDoc', title: 'Номер документа', width: '25%' }
            ],
            sortable: false,
            resizable: true,
            scrollable: false
        }).data('kendoGrid');

        var linkInputPlatsGrid = $('#LinkInputPlatsGrid').kendoGrid({
            toolbar: [
                {
                    type: 'button',
                    name: 'add-reestr',
                    text: 'Перейти в реестр зачислений МФЦ'
                },
                {
                    name: 'create'
                },
                {
                    iconClass: '',
                    name: 'edit'
                }
            ],
            dataSource: {
                data: model.InputPlats,
                schema: {
                    model: {
                        id: 'Id',
                        fields: {
                            Id: { type: 'number', editable: false, defaultValue: -1 },
                            PeriodRegDate: { type: 'date' },
                            PmtDate: { type: 'date' },
                            Kodpl: { type: 'string' },
                            SumOpl: { type: 'number' },
                            Adres: { type: 'string' },
                            Nom: { type: 'string' },
                            Unom: { type: 'number', defaultValue: null },
                            TxId: { type: 'string' },
                            Period: { type: 'date' },
                            Opl: { type: 'number' }
                        }
                    }
                }
            },
            columns: [
                { selectable: true, width: '3%' },
                { field: 'Id', hidden: true },
                { field: 'PeriodRegDate', title: 'Период учета', format: '{0:MMMM yyyy}', width: '12%' },
                { field: 'PmtDate', title: 'Дата платежа', format: '{0:dd.MM.yyyy}', width: '10%' },
                { field: 'Kodpl', title: 'Код плательщика', width: '10%' },
                { field: 'SumOpl', title: 'Сумма платежа', template: KendoExtension.TemplateDecimal('SumOpl'), width: '10%' },
                { field: 'Unom', title: 'UNOM', width: '10%' },
                { field: 'TxId', title: 'Банковская кодировка', width: '10%' },
                { field: 'Period', title: 'Период оплаты', format: '{0:dd.MM.yyyy}', width: '10%' },
                { field: 'Adres', title: 'Адрес дома', width: '15%' },
                { field: 'Nom', title: '№ кв', width: '5%' },
                { field: 'Opl', title: 'Площадь', width: '5%' }
            ],
            sortable: false,
            resizable: true,
            scrollable: false,
            messages: {
                commands: {
                    create: 'Создать данные МФЦ',
                    destroy: '',
                    edit: 'Изменить данные МФЦ'
                }
            },
            editable: {
                mode: 'popup',
                confirmation: false,
                window: {
                    title: 'Создание данных МФЦ'
                }
            },
            edit: function (e) {
                var bankPlatDataItem = linkBankPlatGrid.dataSource.at(0),
                    periodRegDatePicker = e.container.find('[name="PeriodRegDate"]').data('kendoDatePicker'),
                    pmtDatePicker = e.container.find('[name="PmtDate"]').data('kendoDatePicker'),
                    periodDatePicker = e.container.find('[name="Period"]').data('kendoDatePicker'),
                    sumOplTextBox = e.container.find('[name="SumOpl"]').data('kendoNumericTextBox'),
                    unomTextBox = e.container.find('[name="Unom"]').data('kendoNumericTextBox'),
                    oplTextBox = e.container.find('[name="Opl"]').data('kendoNumericTextBox'),
                    kodPlTextBox = e.container.find('input[name="Kodpl"]'),
                    adresTextBox = e.container.find('input[name="Adres"]'),
                    nomTextBox = e.container.find('input[name="Nom"]'),
                    txIdTextBox = e.container.find('input[name="TxId"]');
                e.container.find('.k-edit-label:first').hide();
                e.container.find('.k-edit-field:first').hide();

                
                //доработка элементов редактирования
                periodRegDatePicker.setOptions({ parseFormats: ['ddMMyyyy', 'ddMMyy', 'dd.MM.yyyy', 'dd.MM.yy', 'dd/MM/yyyy', 'dd/MM/yy'] });
                pmtDatePicker.setOptions({ parseFormats: ['ddMMyyyy', 'ddMMyy', 'dd.MM.yyyy', 'dd.MM.yy', 'dd/MM/yyyy', 'dd/MM/yy'] });
                periodDatePicker.setOptions({ parseFormats: ['ddMMyyyy', 'ddMMyy', 'dd.MM.yyyy', 'dd.MM.yy', 'dd/MM/yyyy', 'dd/MM/yy'] });
                sumOplTextBox.setOptions({ format: 'n2', spinners: false });
                unomTextBox.setOptions({ min: 0, format: 'n0', spinners: false });
                oplTextBox.setOptions({ format: 'n2', spinners: false });

                //при создании строки зачисления для связывания с банковской строкой в поле "Период платежа" выводить период, 
                //который указан в банковской строке, в поле "Дата платежа" выводить дату, которая указана в строке банка, в поле "Сумма платежа" - сумму из строки банка, 
                //в поле "Период оплаты" - период из строки банка, поле "Адрес дома" заполнить автоматически при выборе UNOM
                if (e.model.Id === -1) {
                    ////скрываем строку при редактировании
                    this.element.addClass('edit-row-mode');

                    periodRegDatePicker.value(bankPlatDataItem.get('PeriodRegDate'));
                    pmtDatePicker.value(bankPlatDataItem.get('DataPp'));
                    periodDatePicker.value(bankPlatDataItem.get('Period'));
                    sumOplTextBox.value(bankPlatDataItem.get('SumByCode'));
                    kodPlTextBox.val(bankPlatDataItem.get('Kodpl'));
                    adresTextBox.val(bankPlatDataItem.get('NachAdresT'));
                    unomTextBox.value(bankPlatDataItem.get('NachUnom'));
                    nomTextBox.val(bankPlatDataItem.get('NachKvnom'));
                    oplTextBox.value(bankPlatDataItem.get('NachOpl'));
                }
                //для редактирования доступна только сумма
                else {
                    periodRegDatePicker.enable(false);
                    pmtDatePicker.enable(false);
                    periodDatePicker.enable(false);
                    unomTextBox.enable(false);
                    oplTextBox.enable(false);
                    unomTextBox.enable(false);
                    kodPlTextBox.addClass('k-state-disabled').attr('disabled', 'disabled');
                    adresTextBox.addClass('k-state-disabled').attr('disabled', 'disabled');
                    nomTextBox.addClass('k-state-disabled').attr('disabled', 'disabled');
                    txIdTextBox.addClass('k-state-disabled').attr('disabled', 'disabled');
                }
            },
            save: function (e) {
                e.preventDefault();
                var grid = this,
                    rowUid = e.model.uid,
                    dataRow = grid.element.find('tr[data-uid="' + rowUid + '"]'),
                    periodRegDatePicker = e.container.find('[name="PeriodRegDate"]').data('kendoDatePicker'),
                    pmtDatePicker = e.container.find('[name="PmtDate"]').data('kendoDatePicker'),
                    periodDatePicker = e.container.find('[name="Period"]').data('kendoDatePicker'),
                    sumOplTextBox = e.container.find('[name="SumOpl"]').data('kendoNumericTextBox'),
                    unomTextBox = e.container.find('[name="Unom"]').data('kendoNumericTextBox'),
                    oplTextBox = e.container.find('[name="Opl"]').data('kendoNumericTextBox'),
                    kodPlTextBox = e.container.find('input[name="Kodpl"]'),
                    adresTextBox = e.container.find('input[name="Adres"]'),
                    nomTextBox = e.container.find('input[name="Nom"]'),
                    txIdTextBox = e.container.find('input[name="TxId"]'),
                    editModel = {
                        Id: e.model.Id,
                        PeriodRegDate: periodRegDatePicker ? periodRegDatePicker.value() : null,
                        PmtDate: pmtDatePicker ? pmtDatePicker.value() : null,
                        Period: periodDatePicker ? periodDatePicker.value() : null,
                        Kodpl: kodPlTextBox.length > 0 ? kodPlTextBox.val() : null,
                        SumOpl: sumOplTextBox ? sumOplTextBox.value() : null,
                        Adres: adresTextBox.length > 0 ? adresTextBox.val() : null,
                        Nom: nomTextBox.length > 0 ? nomTextBox.val() : null,
                        Unom: unomTextBox ? unomTextBox.value() : null,
                        TxId: txIdTextBox.length > 0 ? txIdTextBox.val() : null,
                        Opl: oplTextBox ? oplTextBox.value() : null
                    };
                kendo.ui.progress($('body'), false);

                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("Update", "InputPlat")',
                    data: {
                        Id: editModel.Id,
                        PeriodRegDate: kendo.toString(editModel.PeriodRegDate, 'dd.MM.yyyy HH:mm:ss'),
                        PmtDate: kendo.toString(editModel.PmtDate, 'dd.MM.yyyy HH:mm:ss'),
                        Period: kendo.toString(editModel.Period, 'dd.MM.yyyy HH:mm:ss'),
                        Kodpl: editModel.Kodpl,
                        SumOpl: kendo.toString(editModel.SumOpl, 'n2'),
                        Adres: editModel.Adres,
                        Nom: editModel.Nom,
                        Unom: editModel.Unom,
                        TxId: editModel.TxId,
                        Opl: editModel.Opl
                    },
                    dataType: 'json',
                    success: function (e) {
                        kendo.ui.progress($('body'), false);
                        grid.editable.element.data("kendoWindow").close();
                        if (e.Errors && e.Errors.length > 0) {
                            if (editModel.Id === -1) {
                                grid.removeRow(dataRow);
                            }
                            Common.ShowError(e.Errors.join('<br>'));

                        } else {
                            var dataItem = grid.dataSource.getByUid(rowUid);
                            dataItem.Id = e.Data.Id;
                            dataItem.set('PeriodRegDate', kendo.parseDate(e.Data.PeriodRegDate, 's'));
                            dataItem.set('PmtDate', kendo.parseDate(e.Data.PmtDate, 's'));
                            dataItem.set('Period', kendo.parseDate(e.Data.Period, 's'));
                            dataItem.set('Kodpl', e.Data.Kodpl);
                            dataItem.set('SumOpl', e.Data.SumOpl);
                            dataItem.set('Adres', e.Data.Adres);
                            dataItem.set('Nom', e.Data.Nom);
                            dataItem.set('Unom ', e.Data.Unom);
                            dataItem.set('TxId', e.Data.TxId);
                            dataItem.set('Opl', e.Data.Opl);

                            if (editModel.Id === -1) {
                                grid.element.removeClass('edit-row-mode');
                            }

                            grid.saveChanges();
                            Common.ShowMessage('Операция успешно выполнена');
                        }
                    }
                });
            },
            cancel: function (e) {
                e.preventDefault();
                if (e.model.Id === -1) {
                    linkInputPlatsGrid.element.removeClass('edit-row-mode');
                }
                linkInputPlatsGrid.cancelChanges();
                this.editable.element.data("kendoWindow").close();
            },
            messages: {
                commands: {
                    update: 'Сохранить'
                }
            }
        }).data('kendoGrid');

        var linkPlatToolbar = $('#link-plat-toolbar').kendoToolBar({
            items: [{
                type: 'button',
                id: 'buttonSave',
                text: '',
                click: function () {
                    Common.ClearNotification();
                    var bankPlatDataItem = linkBankPlatGrid.dataSource.at(0),
                        inputPlatSelectedRows = linkInputPlatsGrid.select();

                    if (!bankPlatDataItem) {
                        Common.ShowError('Не удалось определить банковскую строку');
                        return;
                    }

                    if (inputPlatSelectedRows.length == 0) {
                        Common.ShowError('Не выбрано ни одной записи зачисления');
                        return;
                    }

                    if (inputPlatSelectedRows.length > 1) {
                        Common.ShowError('Необходимо оставить только одну строку для связи');
                        return;
                    }
                    
                    kendo.ui.progress($('body'), true);

                    $.ajax({
                        type: 'POST',
                        url: '@Url.Action("LinkPlat", "InputPlat")',
                        data: { inputPlatId: linkInputPlatsGrid.dataItem(inputPlatSelectedRows[0]).get('Id'), bankPlatId: bankPlatDataItem.get('Id'), reason: $('#Reason').val(), rewrite: true },
                        dataType: 'json',
                        success: function (e) {
                            kendo.ui.progress($('body'), false);
                            if (e.Errors && e.Errors.length > 0) {
                                Common.ShowError(e.Errors.join('<br>'));
                            } else {
                                Common.UI.CloseWindow('registerModalWindow', window.parent);
                            }
                        }
                    });
                },
                icon: 'save',
                overflow: 'never'
            },
            {
                type: 'button',
                id: 'buttonEdit',
                text: '',
                click: function () {
                    setEditMode(true);
                },
                icon: 'edit',
                overflow: 'never'
            }]
        }).data('kendoToolBar');

        var panelbar = $('#ls_panelbar').kendoPanelBar().data('kendoPanelBar');
        panelbar.expand('li');

        function setEditMode(value) {
            KendoExtension.ToggleEditMode(value);

            if (value === true) {
                linkPlatToolbar.hide($('#buttonEdit'));
                linkPlatToolbar.show($('#buttonSave'));
            }
            else {
                linkPlatToolbar.show($('#buttonEdit'));
                linkPlatToolbar.hide($('#buttonSave'));
            }
        }

        function updateGridsStyles() {
            var inputPlatDataItems = linkInputPlatsGrid.dataItems(),
                bankPlatDataItem = linkBankPlatGrid.dataSource.at(0);

            if (inputPlatDataItems && bankPlatDataItem) {
                var platKodplColumnIndex = linkInputPlatsGrid.element.find('th[data-field="Kodpl"]').index(),
                    platSumOplColumnIndex = linkInputPlatsGrid.element.find('th[data-field="SumOpl"]').index(),
                    bankSum = bankPlatDataItem.get('SumByCode'),
                    bankKodpl = bankPlatDataItem.get('Kodpl');

                for (var i = 0; i < inputPlatDataItems.length; i++) {
                    var platRow = linkInputPlatsGrid.element.find('tr[data-uid="' + inputPlatDataItems[i].uid + '"]'),
                        platSumOpl = inputPlatDataItems[i].get('SumOpl'),
                        platKodpl = inputPlatDataItems[i].get('Kodpl');

                    if (bankKodpl != platKodpl) {
                        platRow.find('td:eq(' + platKodplColumnIndex + ')').addClass('k-grid-no');
                    }
                    else {
                        platRow.find('td:eq(' + platKodplColumnIndex + ')').removeClass('k-grid-no');
                    }

                    if (bankSum != platSumOpl) {
                        platRow.find('td:eq(' + platSumOplColumnIndex + ')').addClass('k-grid-no');
                    }
                    else {
                        platRow.find('td:eq(' + platSumOplColumnIndex + ')').removeClass('k-grid-no');
                    }
                }
            }
        }

        linkInputPlatsGrid.bind('dataBound', updateGridsStyles);
        linkBankPlatGrid.bind('dataBound', updateGridsStyles);

        setTimeout(function () {
            linkInputPlatsGrid.element.find('.k-grid-toolbar > a.k-grid-add-reestr').attr('editmode', 'true').on('click', function (e) {
                e.preventDefault();

                var inputPlatsItems = linkInputPlatsGrid.dataItems(),
                    contentUrl = '@Url.Action("Index", "RegistersView",
                    new {
                        registerId = "MfcInputPlatSelect",
                        Transition = 1,
                        UniqueSessionKey = ViewBag.CurrentUniqueSessionKey
                    })',
                    title = 'Выбор зачисления',
                    qs = '&qs=(' + inputPlatPeriodRegDateAttributeId + 'equal%27' + kendo.toString(model.PeriodRegDate, 'dd.MM.yyyy') + '%27' +
                        'and' + inputPlatStatusIdentifCodeAttributeId + 'equal%27' + notIdentifiedCode + '%27' +
                        'and' + inputPlatLinkBandIdAttributeId + 'isnull)',
                    callbackFn = function (item) {
                        $.ajax({
                            type: 'GET',
                            url: '@Url.Action("GetCurrentList", "InputPlat")',
                            data: { 'id': item.id, 'UniqueSessionKey': uniqueSessionKey },
                            dataType: 'json',
                            success: function (data) {
                                if (data && data.length > 0) {
                                    for (var i = 0; i < data.length; i++) {
                                        linkInputPlatsGrid.dataSource.add({
                                            Id: data[i].Id,
                                            PeriodRegDate: kendo.parseDate(data[i].PeriodRegDate),
                                            PmtDate: kendo.parseDate(data[i].PmtDate),
                                            Period: kendo.parseDate(data[i].Period),
                                            Kodpl: data[i].Kodpl,
                                            SumOpl: data[i].SumOpl,
                                            Adres: data[i].Adres,
                                            Nom: data[i].Nom,
                                            Unom: data[i].Unom,
                                            TxId: data[i].TxId,
                                            Opl: data[i].Opl
                                        });
                                    }
                                }
                            }
                        });
                    };

                if (inputPlatsItems.length > 0) {
                    var inputPlatsIds = [];

                    for (var i = 0; i < inputPlatsItems.length; i++) {
                        inputPlatsIds.push(inputPlatsItems[i].get('Id'));
                    }

                    qs = qs.substr(0, qs.length - 1) + 'and' + inputPlatEmpIdAttributeId + 'notin%27' + inputPlatsIds.join(',') + '%27)';
                }

                Common.UI.ChooseWindow(title, contentUrl + qs, callbackFn, 'Grid-@OMInputPlat.GetRegisterId()');
            });

            linkInputPlatsGrid.element.find('.k-grid-toolbar > a.k-grid-add').attr('editmode', 'true').find('span.k-icon').hide();
            
            linkInputPlatsGrid.element.find('.k-grid-toolbar > a.k-grid-edit').attr('editmode', 'true');
            
            linkInputPlatsGrid.element.find('.k-grid-toolbar > a.k-grid-edit').on('click', function (e) {
                e.preventDefault();
                var selected = linkInputPlatsGrid.select();

                if (selected.length > 0) {
                    linkInputPlatsGrid.editRow(selected[0]);
                }
            });

            setEditMode(model.CreateMode);
        }, 0);
    });
</script>