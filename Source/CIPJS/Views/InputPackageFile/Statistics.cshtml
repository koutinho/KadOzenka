@using CIPJS.DAL.InputFilePackage;
@using Core.Shared.Extensions;
@using Newtonsoft.Json;
@using ObjectModel.Directory;

@model InputFilePackageDto

@{ 
    var cultureRu = new System.Globalization.CultureInfo("ru-RU");

    string nachPanelHeader = $"Начисления" +
        $"{(Model.OkrugName.IsNotEmpty() ? $" {Model.OkrugName}" : string.Empty)}" +
        $"{(Model.PeriodRegDate.HasValue ? $" {Model.PeriodRegDate.Value.ToString("MMMM yyyy", cultureRu)}" : string.Empty)}";
    string platPanelHeader = $"Зачисления" +
        $"{(Model.OkrugName.IsNotEmpty() ? $" {Model.OkrugName}" : string.Empty)}" +
        $"{(Model.PeriodRegDate.HasValue ? $" {Model.PeriodRegDate.Value.ToString("MMMM yyyy", cultureRu)}" : string.Empty)}";
    string svodBankPanelHeader = $"Сводная таблица по зачислениям" +
        $"{(Model.OkrugName.IsNotEmpty() ? $" {Model.OkrugName}" : string.Empty)}" +
        $"{(Model.PeriodRegDate.HasValue ? $" {Model.PeriodRegDate.Value.ToString("MMMM yyyy", cultureRu)}" : string.Empty)}";
    string bankPlatPanelHeader = $"Анализ банковских файлов оплат" +
        $"{(Model.OkrugName.IsNotEmpty() ? $" {Model.OkrugName}" : string.Empty)}" +
        $"{(Model.PeriodRegDate.HasValue ? $" {Model.PeriodRegDate.Value.ToString("MMMM yyyy", cultureRu)}" : string.Empty)}";
}

<style type="text/css">
    td span.link {
        text-decoration-line: underline;
        text-decoration-style: dotted;
        cursor: pointer;
    }

    .k-grid .k-grid-header .k-header .k-link {
        height: auto;
        text-align: center;
        font-weight: bold;
    }

    .k-grid .k-grid-header .k-header {
        white-space: normal;
    }
</style>

<div>
    <ul id="StatisticsPanelbar">
        <li class="k-state-active">
            @svodBankPanelHeader
            <div id="StatisticsSvodBankGrid">
            </div>
        </li>
        <li>
            @platPanelHeader
            <div id="StatisticsPlatGrid">
            </div>
        </li>
        <li>
            @bankPlatPanelHeader
            <div id="StatisticsBankPlatGrid">
            </div>
        </li>
        <li>
            @nachPanelHeader
            <div id="StatisticsNachGrid">
            </div>
        </li>
    </ul>
</div>

<script type="text/javascript">
    var packageId = @Html.Raw(JsonConvert.SerializeObject(Model.Id))
    var okrugId = @Html.Raw(JsonConvert.SerializeObject(Model.OkrugId));
    var periodRegDate = @Html.Raw(JsonConvert.SerializeObject(Model.PeriodRegDate));
    var nachDistrictUrl = '@Html.Raw(Url.Content("~/RegistersView/MfcInputNach?Transition=1"))';
    var platDistrictUrl = '@Html.Raw(Url.Content("~/RegistersView/MfcInputPlat?Transition=1"))';
    var bankPlatKodPostUrl = '@Html.Raw(Url.Content("~/RegistersView/BankPaymentFiles?Transition=1"))';
    var loadMfcLogUrl = '@Html.Raw(Url.Content("~/RegistersView/InsurLogFile?Transition=1"))';
    var processMfcLogUrl = '@Html.Raw(Url.Content("~/RegistersView/InsurFileProcessLog?Transition=1"))';
    var platIdentifyLogUrl = '@Html.Raw(Url.Content("~/RegistersView/InsurFilePlatIdentifyLog?Transition=1"))';
    var classDisabled = 'k-state-disabled';
    var loadedCode = @Html.Raw((long)UFKFileProcessingStatus.Loaded);
    var linkedBankInProcessCode = @Html.Raw((long)UFKFileProcessingStatus.LinkedBankInProcess);
    var linkedBankPartiallyCode = @Html.Raw((long)UFKFileProcessingStatus.LinkedBankPartially);
    var linkedBankCompletelyCode = @Html.Raw((long)UFKFileProcessingStatus.LinkedBankCompletely);
    var inProcessCode = @Html.Raw((long)UFKFileProcessingStatus.InProcess);
    var processedPartiallyCode = @Html.Raw((long)UFKFileProcessingStatus.ProcessedPartially);
    var processedCompletelyCode = @Html.Raw((long)UFKFileProcessingStatus.ProcessedCompletely);
    var identifiedCode = @Html.Raw((long)StatusIdentifikacii.Identified);
    var partiallyIdentifiedCode = @Html.Raw((long)StatusIdentifikacii.PartiallyIdentified);
    var notIdentifiedCode = @Html.Raw((long)StatusIdentifikacii.NotIdentified);
    var notConfirmedByBankCode = @Html.Raw((long)StatusIdentifikacii.NotConfirmedByBank);

    $(document).ready(function () {
        //грид начислений
        var statisticsNachDataSource = new kendo.data.DataSource({
            transport: {
                read: {
                    url: '@Url.Action("GetStatisticNachList", "InputFile")',
                    data: { okrugId: okrugId, periodRegDate: periodRegDate },
                    dataType: 'json'
                }
            },
            schema: {
                model: {
                    id: 'DistrictId',
                    fields: {
                        DistrictId: { type: 'number', defaultValue: null },
                        DistrictName: { type: 'string', defaultValue: null },
                        DistrictCode: { type: 'number', defaultValue: null },
                        InputFileId: { type: 'number', editable: false, defaultValue: null },
                        FileName: { type: 'string', defaultValue: null },
                        Status: { type: 'string', defaultValue: null },
                        StatusCode: { type: 'number', defaultValue: null },
                        CountStrLoad: { type: 'number', defaultValue: 0 },
                        CountStr: { type: 'number', defaultValue: 0 },
                        CountError: { type: 'number', defaultValue: 0 },
                        SumNach: { type: 'number', defaultValue: null }
                    }
                }
            },
            aggregate: [
                { field: 'SumNach', aggregate: 'sum' },
                { field: 'CountStrLoad', aggregate: 'sum' },
                { field: 'CountStr', aggregate: 'sum' }
            ]
        });

        var statisticsNachGrid = $('#StatisticsNachGrid').kendoGrid({
            toolbar: [
                {
                    type: 'button',
                    name: 'refresh',
                    text: 'Обновить'
                },
                {
                    type: 'button',
                    name: 'process',
                    text: 'Учесть на ФСП'
                },
                {
                    type: 'button',
                    name: 'delete',
                    text: 'Удалить'
                },
                {
                    name: 'excel',
                }
            ],
            excelExport: function (e) {
                e.workbook.fileName = '@Html.Raw(nachPanelHeader)' + '_' + kendo.toString(new Date(), 'dd.MM.yyyy') + '.xlsx';
                KendoExtension.ExportGridWithTemplatesContent(e);
            },
            dataSource: statisticsNachDataSource,
            dataBound: function () {
                var districtNameColumnIndex = this.element.find('th[data-field="DistrictName"]').index(),
                    statusColumnIndex = this.element.find('th[data-field="Status"]').index();

                this.tbody.find('tr').each(function (index, row) {
                    var dataRow = $(row),
                        dataItem = statisticsNachGrid.dataItem(dataRow);
                    if (dataItem) {
                        var districtId = dataItem.get('DistrictId'),
                            inputFileId = dataItem.get('InputFileId');

                        if (districtNameColumnIndex > -1) {
                            if (districtId && inputFileId != null && inputFileId > 0) {
                                dataRow.find('td:eq(' + districtNameColumnIndex + ') > span.link').on('click', function (e) {
                                    var url = nachDistrictUrl + '&305000200=' + inputFileId + '&305000900=' + districtId + '&305000700=' + periodRegDate;
                                    var newWindow = window.open(url, '_blank');
                                    newWindow.focus();
                                });
                            }

                            //CIPJS-241 Строки , в статусе "Обработан полностью" выделять зеленым (названия районов)
                            if (dataItem.get('StatusCode') == processedCompletelyCode) {
                                dataRow.find('td:eq(' + districtNameColumnIndex + ')').addClass('k-grid-opl');
                            }
                        }

                        if (statusColumnIndex > -1 && inputFileId != null && inputFileId > 0) {
                            var logUrl = null,
                                currentStatus = dataItem.get('StatusCode');
                            switch (currentStatus) {
                                case 0:
                                case loadedCode:
                                    logUrl = loadMfcLogUrl + '&301000100=' + inputFileId;
                                    break;
                                case inProcessCode:
                                case processedPartiallyCode:
                                case processedCompletelyCode:
                                    logUrl = processMfcLogUrl + '&370000200=' + inputFileId;
                                    break;
                            }

                            if (logUrl != null) {
                                dataRow.find('td:eq(' + statusColumnIndex + ') > span.link').on('click', function (e) {
                                    var newWindow = window.open(logUrl, '_blank');
                                    newWindow.focus();
                                });
                            }
                        }
                    }
                });
            },
            columns: [
                { selectable: true, width: "50px" },
                { field: 'DistrictId', hidden: true },
                { field: 'InputFileId', hidden: true },
                { field: 'StatusCode', hidden: true },
                {
                    field: 'DistrictName',
                    width: 200,
                    title: 'Название района',
                    template: '<span class="link">#:DistrictName#</span>',
                    footerTemplate: '<div style="font-weight:bold">Всего</div>'
                },
                {
                    field: 'DistrictCode',
                    title: 'Код',
                    template: Common.UI.CustomTemplate('DistrictCode', '#: DistrictCode ? kendo.toString(DistrictCode, "n0") : ""#')
                },
                {
                    field: 'FileName',
                    title: 'Файл МФЦ',
                    hidden: true
                },
                {
                    field: 'Status',
                    title: 'Статус файла',
                    template: '<span class="link">#:Status != null ? Status : ""#</span>',
                },
                {
                    field: 'SumNach',
                    title: 'Начислено, руб.',
                    aggregates: ['sum'],
                    attributes: {
                        class: 'text-right'
                    },
                    template: Common.UI.CustomTemplate('SumNach', '#: SumNach != null ? kendo.toString(SumNach, "n2") : ""#'),
                    footerTemplate: '<div style="font-weight:bold;text-align:right">#=sum != null ? kendo.toString(sum, "n2") : ""#</div>'
                },
                {
                    field: 'CountStr',
                    title: 'Кол-во строк, всего',
                    aggregates: ['sum'],
                    attributes: {
                        class: 'text-right'
                    },
                    template: Common.UI.CustomTemplate('CountStr', '#: CountStr != null ? kendo.toString(CountStr, "n0") : ""#'),
                    footerTemplate: '<div style="font-weight:bold;text-align:right">#=sum != null ? kendo.toString(sum, "n0") : ""#</div>'
                },
                {
                    field: 'CountStrLoad',
                    title: 'Кол-во строк, загружено',
                    aggregates: ['sum'],
                    attributes: {
                        class: 'text-right'
                    },
                    template: Common.UI.CustomTemplate('CountStrLoad', '#: CountStrLoad != null ? kendo.toString(CountStrLoad, "n0") : ""#'),
                    footerTemplate: '<div style="font-weight:bold;text-align:right">#=sum != null ? kendo.toString(sum, "n0") : ""#</div>'
                }
            ],
            sortable: true,
            resizable: true,
            scrollable: false,
            messages: {
                commands: {
                    excel: "Экспорт в Excel"
                }
            }
        }).data('kendoGrid');

        //грид зачислений
        var statisticsPlatDataSource = new kendo.data.DataSource({
            transport: {
                read: {
                    url: '@Url.Action("GetStatisticPlatList", "InputFile")',
                    data: { okrugId: okrugId, periodRegDate: periodRegDate },
                    dataType: 'json'
                }
            },
            schema: {
                model: {
                    id: 'DistrictId',
                    fields: {
                        DistrictId: { type: 'number', defaultValue: null },
                        DistrictName: { type: 'string', defaultValue: null },
                        DistrictCode: { type: 'number', defaultValue: null },
                        InputFileId: { type: 'number', editable: false, defaultValue: null },
                        FileName: { type: 'string', defaultValue: null },
                        Status: { type: 'string', defaultValue: null },
                        StatusCode: { type: 'number', defaultValue: null },
                        CountStr: { type: 'number', defaultValue: 0 },
                        CountStrLoad: { type: 'number', defaultValue: 0 },
                        CountError: { type: 'number', defaultValue: 0 },
                        SumOpl: { type: 'number', defaultValue: null },
                        IdentifiedCount: { type: 'number', defaultValue: 0 },
                        NotIdentifiedCount: { type: 'number', defaultValue: 0 },
                        NotIdentifiedBankCount: { type: 'number', defaultValue: 0 },
                        IdentifiedFullCount: { type: 'number', defaultValue: 0 },
                        InputPlatSumNotNullCount: { type: 'number', defaultValue: 0 },
                        PartiallyIdentifiedCount: { type: 'number', defaultValue: 0 },
                        NotConfirmedByBankCount: { type: 'number', defaultValue: 0 }
                    }
                }
            },
            aggregate: [
                { field: 'SumOpl', aggregate: 'sum' },
                { field: 'CountStr', aggregate: 'sum' },
                { field: 'CountStrLoad', aggregate: 'sum' },
                { field: 'IdentifiedCount', aggregate: 'sum' },
                { field: 'NotIdentifiedCount', aggregate: 'sum' },
                { field: 'NotIdentifiedBankCount', aggregate: 'sum' },
                { field: 'IdentifiedFullCount', aggregate: 'sum' },
                { field: 'InputPlatSumNotNullCount', aggregate: 'sum' },
                { field: 'NotConfirmedByBankCount', aggregate: 'sum' }
            ]
        });

        var statisticsPlatGrid = $('#StatisticsPlatGrid').kendoGrid({
            toolbar: [
                {
                    type: 'button',
                    name: 'refresh',
                    text: 'Обновить'
                },
                {
                    type: 'button',
                    name: 'identify-plat',
                    text: 'Связать с банковскими строками оплат'
                },
                {
                    type: 'button',
                    name: 'process',
                    text: 'Учесть на ФСП'
                },
                {
                    type: 'button',
                    name: 'delete',
                    text: 'Удалить'
                },
                {
                    name: 'excel'
                }
            ],
            excelExport: function (e) {
                e.workbook.fileName = '@Html.Raw(platPanelHeader)' + '_' + kendo.toString(new Date(), 'dd.MM.yyyy') + '.xlsx';
                KendoExtension.ExportGridWithTemplatesContent(e);
            },
            dataSource: statisticsPlatDataSource,
            dataBound: function () {
                var notIdentifiedCountColumnIndex = this.element.find('th[data-field="NotIdentifiedCount"]').index(),
                    districtNameColumnIndex = this.element.find('th[data-field="DistrictName"]').index(),
                    identifiedCountColumnIndex = this.element.find('th[data-field="IdentifiedCount"]').index(),
                    identifiedFullCountColumnIndex = this.element.find('th[data-field="IdentifiedFullCount"]').index(),
                    inputPlatSumNotNullCountColumnIndex = this.element.find('th[data-field="InputPlatSumNotNullCount"]').index(),
                    notIdentifiedBankCountColumnIndex = this.element.find('th[data-field="NotIdentifiedBankCount"]').index(),
                    notConfirmedByBankCountColumnIndex = this.element.find('th[data-field="NotConfirmedByBankCount"]').index(),
                    statusColumnIndex = this.element.find('th[data-field="Status"]').index();

                this.tbody.find('tr').each(function (index, row) {
                    var dataRow = $(row),
                        dataItem = statisticsPlatGrid.dataItem(dataRow);
                    if (dataItem) {
                        var districtId = dataItem.get('DistrictId'),
                            inputFileId = dataItem.get('InputFileId');

                        if (notIdentifiedCountColumnIndex > -1) {
                            if (inputFileId != null && inputFileId > 0) {
                                //Колонка "Подтверждено банком, кол-во строк"
                                dataRow.find('td:eq(' + notIdentifiedCountColumnIndex + ') > span.link').on('click', function (e) {
                                    var qsquery = '&qs=(306000200equal\'' + inputFileId + '\'and306002200equal\'' + notIdentifiedCode + '\'and306002200notequal\'0\')';
                                    var newWindow = window.open(platDistrictUrl + qsquery, '_blank');
                                    newWindow.focus();
                                });
                            }

                            //CIPJS-241 Ячейки , в колонке "Не подтверждено банком, кол-во строк" , в которых значение не ноль и не пусто- выделять красным.
                            if (dataItem.get('NotIdentifiedCount') > 0) {
                                dataRow.find('td:eq(' + notIdentifiedCountColumnIndex + ')').addClass('k-grid-no');
                            }
                        }

                        if (identifiedCountColumnIndex > -1) {
                            if (inputFileId != null && inputFileId > 0) {
                                //Колонка "Не подтверждено банком, кол-во строк"
                                dataRow.find('td:eq(' + identifiedCountColumnIndex + ') > span.link').on('click', function (e) {
                                    var qsquery = '&qs=(306000200equal\'' + inputFileId + '\'and(306002200equal\'' + identifiedCode + '\'or306002200equal\'' + partiallyIdentifiedCode + '\'))';
                                    var newWindow = window.open(platDistrictUrl + qsquery, '_blank');
                                    newWindow.focus();
                                });
                            }
                        }

                        if (identifiedFullCountColumnIndex > -1) {
                            if (inputFileId != null && inputFileId > 0) {
                                //Колонка " Учтено на ФСП, кол-во строк"
                                dataRow.find('td:eq(' + identifiedFullCountColumnIndex + ') > span.link').on('click', function (e) {
                                    var qsquery = '&qs=(306000200equal\'' + inputFileId + '\'and306002200equal\'' + identifiedCode + '\')';
                                    var newWindow = window.open(platDistrictUrl + qsquery, '_blank');
                                    newWindow.focus();
                                });
                            }
                        }

                        if (inputPlatSumNotNullCountColumnIndex > -1) {
                            if (inputFileId != null && inputFileId > 0) {
                                //Колонка "Всего, кол-во строк"
                                dataRow.find('td:eq(' + inputPlatSumNotNullCountColumnIndex + ') > span.link').on('click', function (e) {
                                    var qsquery = '&qs=(306000200equal\'' + inputFileId + '\'and306001600isnotnulland306001600notequal\'0\')';
                                    var newWindow = window.open(platDistrictUrl + qsquery, '_blank');
                                    newWindow.focus();
                                });
                            }
                        }

                        if (notIdentifiedBankCountColumnIndex > -1) {
                            //Колонка "Строки банка, не связанные с зачислениями МФЦ"
                            if (districtId) {
                                dataRow.find('td:eq(' + notIdentifiedBankCountColumnIndex + ') > span.link').on('click', function (e) {
                                    var qsquery = '&qs=(303000400equal\'' + districtId + '\'and303000700equal\'' + periodRegDate + '\'and306000100isnull)';
                                    var newWindow = window.open(bankPlatKodPostUrl + qsquery, '_blank');
                                    newWindow.focus();
                                });
                            }
                            
                            if (dataItem.get('NotIdentifiedBankCount') > 0) {
                                dataRow.find('td:eq(' + notIdentifiedBankCountColumnIndex + ')').addClass('k-grid-no');
                            }
                        }

                        if (notConfirmedByBankCountColumnIndex > -1) {
                            //Колонка "Ошибочно МФЦ"
                            if (inputFileId != null && inputFileId > 0) {
                                dataRow.find('td:eq(' + notConfirmedByBankCountColumnIndex + ') > span.link').on('click', function (e) {
                                    var qsquery = '&qs=(306000200equal\'' + inputFileId + '\'and306002200equal\'' + notConfirmedByBankCode + '\')';
                                    var newWindow = window.open(platDistrictUrl + qsquery, '_blank');
                                    newWindow.focus();
                                });
                            }

                            if (dataItem.get('NotConfirmedByBankCount') > 0) {
                                dataRow.find('td:eq(' + notConfirmedByBankCountColumnIndex + ')').addClass('k-grid-no');
                            }
                        }

                        if (districtNameColumnIndex > -1) {
                            if (districtId) {
                                dataRow.find('td:eq(' + districtNameColumnIndex + ') > span.link').on('click', function (e) {
                                    if (inputFileId != null && inputFileId > 0) {
                                        var url = platDistrictUrl + '&306000200=' + inputFileId + '&306003300=' + districtId + '&306001400=' + periodRegDate;
                                        var newWindow = window.open(url, '_blank');
                                        newWindow.focus();
                                    }
                                    
                                });
                            }

                            //CIPJS-241 Строки , в статусе "Обработан полностью" выделять зеленым (названия районов)
                            if (dataItem.get('StatusCode') == processedCompletelyCode) {
                                dataRow.find('td:eq(' + districtNameColumnIndex + ')').addClass('k-grid-opl');
                            }
                        }

                        if (statusColumnIndex > -1 && inputFileId != null && inputFileId > 0) {
                            var logUrl = null,
                                currentStatus = dataItem.get('StatusCode');
                            switch (currentStatus) {
                                case 0:
                                case loadedCode:
                                    logUrl = loadMfcLogUrl + '&301000100=' + inputFileId;
                                    break;
                                case linkedBankInProcessCode:
                                case linkedBankPartiallyCode:
                                case linkedBankCompletelyCode:
                                    logUrl = platIdentifyLogUrl + '&359000200=' + inputFileId;
                                    break;
                                case inProcessCode:
                                case processedPartiallyCode:
                                case processedCompletelyCode:
                                    logUrl = processMfcLogUrl + '&370000200=' + inputFileId;
                                    break;
                            }

                            if (logUrl != null) {
                                dataRow.find('td:eq(' + statusColumnIndex + ') > span.link').on('click', function (e) {
                                    var newWindow = window.open(logUrl, '_blank');
                                    newWindow.focus();
                                });
                            }
                        }
                    }
                });
            },
            columns: [
                { selectable: true, width: "50px" },
                { field: 'DistrictId', hidden: true },
                { field: 'InputFileId', hidden: true },
                { field: 'StatusCode', hidden: true },
                {
                    field: 'DistrictName',
                    width: 200,
                    title: 'Название района',
                    template: '<span class="link">#:DistrictName#</span>',
                    footerTemplate: '<div style="font-weight:bold">Всего</div>'
                },
                {
                    field: 'DistrictCode',
                    title: 'Код',
                    template: Common.UI.CustomTemplate('DistrictCode', '#: DistrictCode ? kendo.toString(DistrictCode, "n0") : ""#')
                },
                {
                    field: 'FileName',
                    title: 'Файл МФЦ',
                    hidden: true
                },
                {
                    field: 'Status',
                    title: 'Статус файла',
                    width: 180,
                    template: '<span class="link">#:Status != null ? Status : ""#</span>',
                },
                {
                    field: 'SumOpl',
                    title: 'Зачислено, руб.',
                    aggregates: ['sum'],
                    attributes: {
                        class: 'text-right'
                    },
                    width: 150,
                    template: Common.UI.CustomTemplate('SumOpl', '#: SumOpl != null ? kendo.toString(SumOpl, "n2") : ""#'),
                    footerTemplate: '<div style="font-weight:bold;text-align:right">#=sum != null ? kendo.toString(sum, "n2") : ""#</div>'
                },
                {
                    field: 'InputPlatSumNotNullCount',
                    title: 'Всего строк',
                    aggregates: ['sumInputPlatSumNotNullCount'],
                    attributes: {
                        class: 'text-right'
                    },
                    template: Common.UI.CustomTemplate('InputPlatSumNotNullCount', '<span class="link">#: InputPlatSumNotNullCount != null ? kendo.toString(InputPlatSumNotNullCount, "n0") : ""#</span>'),
                    footerTemplate: '<div style="font-weight:bold;text-align:right">#=sum != null ? kendo.toString(sum, "n0") : ""#</div>'
                },
                {
                    field: 'CountStrLoad',
                    title: 'Загружено строк',
                    aggregates: ['sum'],
                    attributes: {
                        class: 'text-right'
                    },
                    template: Common.UI.CustomTemplate('CountStrLoad', '#: CountStrLoad != null ? kendo.toString(CountStrLoad, "n0") : ""#'),
                    footerTemplate: '<div style="font-weight:bold;text-align:right">#=sum != null ? kendo.toString(sum, "n0") : ""#</div>'
                },
                {
                    field: 'IdentifiedCount',
                    title: 'Подтверждено банком, строк',
                    aggregates: ['sumIdentifiedCount'],
                    attributes: {
                        class: 'text-right'
                    },
                    template: Common.UI.CustomTemplate('IdentifiedCount', '<span class="link">#: IdentifiedCount != null ? kendo.toString(IdentifiedCount, "n0") : ""#</span>'),
                    footerTemplate: '<div style="font-weight:bold;text-align:right">#=sum != null ? kendo.toString(sum, "n0") : ""#</div>'
                },
                {
                    field: 'IdentifiedFullCount',
                    title: 'Учтено на ФСП, строк',
                    aggregates: ['sumIdentifiedFullCount'],
                    attributes: {
                        class: 'text-right'
                    },
                    template: Common.UI.CustomTemplate('IdentifiedFullCount', '<span class="link">#: IdentifiedFullCount != null ? kendo.toString(IdentifiedFullCount, "n0") : ""#</span>'),
                    footerTemplate: '<div style="font-weight:bold;text-align:right">#=sum != null ? kendo.toString(sum, "n0") : ""#</div>'
                },
                {
                    field: 'NotIdentifiedCount',
                    title: 'Не подтверждено банком, строк',
                    aggregates: ['sumNotIdentifiedCount'],
                    attributes: {
                        class: 'text-right'
                    },
                    template: Common.UI.CustomTemplate('NotIdentifiedCount', '<span class="link">#: NotIdentifiedCount != null ? kendo.toString(NotIdentifiedCount, "n0") : ""#</span>'),
                    footerTemplate: '<div style="font-weight:bold;text-align:right">#=sum != null ? kendo.toString(sum, "n0") : ""#</div>'
                },
                {
                    field: 'NotIdentifiedBankCount',
                    title: 'Строки банка, не связанные с МФЦ',
                    aggregates: ['sumNotIdentifiedBankCount'],
                    attributes: {
                        class: 'text-right'
                    },
                    template: Common.UI.CustomTemplate('NotIdentifiedBankCount', '<span class="link">#: NotIdentifiedBankCount != null ? kendo.toString(NotIdentifiedBankCount, "n0") : ""#</span>'),
                    footerTemplate: '<div style="font-weight:bold;text-align:right">#=sum != null ? kendo.toString(sum, "n0") : ""#</div>'
                },
                {
                    field: 'NotConfirmedByBankCount',
                    title: 'Ошибочно МФЦ, строк',
                    aggregates: ['sumNotConfirmedByBankCount'],
                    attributes: {
                        class: 'text-right'
                    },
                    template: Common.UI.CustomTemplate('NotConfirmedByBankCount', '<span class="link">#: NotConfirmedByBankCount != null ? kendo.toString(NotConfirmedByBankCount, "n0") : ""#</span>'),
                    footerTemplate: '<div style="font-weight:bold;text-align:right">#=sum != null ? kendo.toString(sum, "n0") : ""#</div>'
                }
            ],
            sortable: true,
            resizable: true,
            scrollable: false,
            messages: {
                commands: {
                    excel: "Экспорт в Excel"
                }
            }
        }).data('kendoGrid');

        //грид банковских сводов
        var statisticsSvodBankSource = new kendo.data.DataSource({
            transport: {
                read: {
                    url: '@Url.Action("GetStatisticSvodBankList", "InputFile")',
                    data: { okrugId: okrugId, periodRegDate: periodRegDate },
                    dataType: 'json'
                }
            },
            schema: {
                model: {
                    id: 'DistrictId',
                    fields: {
                        DistrictId: { type: 'number', defaultValue: null },
                        DistrictName: { type: 'string', defaultValue: null },
                        DistrictCode: { type: 'number', defaultValue: null },
                        CountStrMfc: { type: 'number', defaultValue: null },
                        CountStrPost1: { type: 'number', defaultValue: null },
                        CountStrPost2: { type: 'number', defaultValue: null },
                        CountStrSvodBank: { type: 'number', defaultValue: null },
                        SumOpl: { type: 'number', defaultValue: null },
                        SumOplPost1: { type: 'number', defaultValue: null },
                        SumOplPost2: { type: 'number', defaultValue: null },
                        SumOplSvodBank: { type: 'number', defaultValue: null },
                        CountStrDifference: { type: 'number', defaultValue: null },
                        SumOplDifference: { type: 'number', defaultValue: null },
                        CountStrMfcError: { type: 'number', defaultValue: null },
                        SumOplError: { type: 'number', defaultValue: null },
                        KodPost1: { type: 'number', defaultValue: null },
                        KodPost2: { type: 'number', defaultValue: null }
                    }
                }
            },
            aggregate: [
                { field: 'CountStrMfc', aggregate: 'sum' },
                { field: 'CountStrPost1', aggregate: 'sum' },
                { field: 'CountStrPost2', aggregate: 'sum' },
                { field: 'CountStrSvodBank', aggregate: 'sum' },
                { field: 'SumOpl', aggregate: 'sum' },
                { field: 'SumOplPost1', aggregate: 'sum' },
                { field: 'SumOplPost2', aggregate: 'sum' },
                { field: 'SumOplSvodBank', aggregate: 'sum' },
                { field: 'CountStrDifference', aggregate: 'sum' },
                { field: 'SumOplDifference', aggregate: 'sum' },
                { field: 'CountStrMfcError', aggregate: 'sum' },
                { field: 'SumOplError', aggregate: 'sum' }
            ]
        });

        var statisticsSvodBankGrid = $('#StatisticsSvodBankGrid').kendoGrid({
            toolbar: [
                {
                    type: 'button',
                    name: 'refresh',
                    text: 'Обновить'
                },
                {
                    type: 'button',
                    name: 'delete',
                    text: 'Удалить'
                },
                {
                    name: 'excel',
                }
            ],
            excelExport: function (e) {
                e.workbook.fileName = '@Html.Raw(svodBankPanelHeader)' + '_' + kendo.toString(new Date(), 'dd.MM.yyyy') + '.xlsx';
                KendoExtension.ExportGridWithTemplatesContent(e);
            },
            dataSource: statisticsSvodBankSource,
            columns: [
                { selectable: true, width: "50px" },
                { field: 'DistrictId', hidden: true },
                {
                    field: 'DistrictName',
                    width: 200,
                    title: 'Название района',
                    footerTemplate: '<div style="font-weight:bold">Всего</div>',
                    template: Common.UI.CustomTemplate('DistrictName', '<span class="link">#:DistrictName#</span>')
                },
                {
                    field: 'DistrictCode',
                    title: 'Код',
                    template: Common.UI.CustomTemplate('DistrictCode', '#: DistrictCode ? kendo.toString(DistrictCode, "n0") : ""#')
                },
                {
                    field: 'CountStrMfc',
                    title: 'МФЦ. Кол-во строк',
                    aggregates: ['sum'],
                    attributes: {
                        class: 'text-right'
                    },
                    template: Common.UI.CustomTemplate('CountStrMfc', '<span class="link">#: CountStrMfc != null ? kendo.toString(CountStrMfc, "n0") : ""#</span>'),
                    footerTemplate: '<div style="font-weight:bold;text-align:right">#=sum != null ? kendo.toString(sum, "n0") : ""#</div>'
                },
                {
                    field: 'CountStrPost1',
                    title: 'Банк. Строк. Код1',
                    aggregates: ['sum'],
                    attributes: {
                        class: 'text-right'
                    },
                    template: Common.UI.CustomTemplate('CountStrPost1', '<span class="link">#: CountStrPost1 != null ? kendo.toString(CountStrPost1, "n0") : ""#</span>'),
                    footerTemplate: '<div style="font-weight:bold;text-align:right">#=sum != null ? kendo.toString(sum, "n0") : ""#</div>'
                },
                {
                    field: 'CountStrPost2',
                    title: 'Банк. Строк. Код2',
                    aggregates: ['sum'],
                    attributes: {
                        class: 'text-right'
                    },
                    template: Common.UI.CustomTemplate('CountStrPost2', '<span class="link">#: CountStrPost2 != null ? kendo.toString(CountStrPost2, "n0") : ""#</span>'),
                    footerTemplate: '<div style="font-weight:bold;text-align:right">#=sum != null ? kendo.toString(sum, "n0") : ""#</div>'
                },
                {
                    field: 'CountStrSvodBank',
                    title: 'Банк. Кол-во строк, всего',
                    aggregates: ['sum'],
                    attributes: {
                        class: 'text-right'
                    },
                    template: Common.UI.CustomTemplate('CountStrSvodBank', '<span class="link">#: CountStrSvodBank != null ? kendo.toString(CountStrSvodBank, "n0") : ""#</span>'),
                    footerTemplate: '<div style="font-weight:bold;text-align:right">#=sum != null ? kendo.toString(sum, "n0") : ""#</div>'
                },
                {
                    field: 'SumOpl',
                    title: 'МФЦ. Зачислено',
                    aggregates: ['sum'],
                    attributes: {
                        class: 'text-right'
                    },
                    template: Common.UI.CustomTemplate('SumOpl', '#: SumOpl != null ? kendo.toString(SumOpl, "n2") : ""#'),
                    footerTemplate: '<div style="font-weight:bold;text-align:right">#=sum != null ? kendo.toString(sum, "n2") : ""#</div>'
                },
                {
                    field: 'SumOplPost1',
                    title: 'Банк. Суммы. Код1',
                    aggregates: ['sum'],
                    attributes: {
                        class: 'text-right'
                    },
                    template: KendoExtension.TemplateDecimal('SumOplPost1'),
                    footerTemplate: '<div style="font-weight:bold;text-align:right">#=sum != null ? kendo.toString(sum, "n2") : ""#</div>'
                },
                {
                    field: 'SumOplPost2',
                    title: 'Банк. Суммы. Код2',
                    aggregates: ['sum'],
                    attributes: {
                        class: 'text-right'
                    },
                    template: Common.UI.CustomTemplate('SumOplPost2', '#: SumOplPost2 != null ? kendo.toString(SumOplPost2, "n2") : ""#'),
                    footerTemplate: '<div style="font-weight:bold;text-align:right">#=sum != null ? kendo.toString(sum, "n2") : ""#</div>'
                },
                {
                    field: 'SumOplSvodBank',
                    title: 'Банк. Сумма оплат, всего',
                    aggregates: ['sum'],
                    attributes: {
                        class: 'text-right'
                    },
                    template: Common.UI.CustomTemplate('SumOplSvodBank', '#: SumOplSvodBank != null ? kendo.toString(SumOplSvodBank, "n2") : ""#'),
                    footerTemplate: '<div style="font-weight:bold;text-align:right">#=sum != null ? kendo.toString(sum, "n2") : ""#</div>'
                },
                {
                    field: 'CountStrDifference',
                    title: 'Расхождений в строках',
                    attributes: {
                        class: 'text-right'
                    },
                    aggregates: ['sum'],
                    template: Common.UI.CustomTemplate('CountStrDifference', '#: CountStrDifference != null ? kendo.toString(CountStrDifference, "n0") : ""#'),
                    footerTemplate: '<div style="font-weight:bold;text-align:right">#=sum != null ? kendo.toString(sum, "n0") : ""#</div>'
                },
                {
                    field: 'SumOplDifference',
                    title: 'Расхождение в суммах',
                    attributes: {
                        class: 'text-right'
                    },
                    aggregates: ['sum'],
                    template: Common.UI.CustomTemplate('SumOplDifference', '#: SumOplDifference != null ? kendo.toString(SumOplDifference, "n2") : ""#'),
                    footerTemplate: '<div style="font-weight:bold;text-align:right">#=sum != null ? kendo.toString(sum, "n2") : ""#</div>'
                },
                {
                    field: 'CountStrMfcError',
                    title: 'Ошибочно МФЦ, строк',
                    aggregates: ['sum'],
                    attributes: {
                        class: 'text-right'
                    },
                    template: Common.UI.CustomTemplate('CountStrMfcError', '#: CountStrMfcError != null ? kendo.toString(CountStrMfcError, "n0") : ""#'),
                    footerTemplate: '<div style="font-weight:bold;text-align:right">#=sum != null ? kendo.toString(sum, "n0") : ""#</div>'
                },
                {
                    field: 'SumOplError',
                    title: 'Ошибочно МФЦ, сумма',
                    aggregates: ['sum'],
                    attributes: {
                        class: 'text-right'
                    },
                    template: Common.UI.CustomTemplate('SumOplError', '#: SumOplError != null ? kendo.toString(SumOplError, "n2") : ""#'),
                    footerTemplate: '<div style="font-weight:bold;text-align:right">#=sum != null ? kendo.toString(sum, "n2") : ""#</div>'
                }
            ],
            sortable: true,
            resizable: true,
            scrollable: false,
            messages: {
                commands: {
                    excel: "Экспорт в Excel"
                }
            },
            dataBound: function () {
                var districtNameColumnIndex = this.element.find('th[data-field="DistrictName"]').index(),
                    countStrMfcColumnIndex = this.element.find('th[data-field="CountStrMfc"]').index(),
                    countStrPost1ColumnIndex = this.element.find('th[data-field="CountStrPost1"]').index(),
                    countStrPost2ColumnIndex = this.element.find('th[data-field="CountStrPost2"]').index(),
                    countStrSvodBankColumnIndex = this.element.find('th[data-field="CountStrSvodBank"]').index(),
                    countStrDifferenceColumnIndex = this.element.find('th[data-field="CountStrDifference"]').index(),
                    sumOplDifferenceColumnIndex = this.element.find('th[data-field="SumOplDifference"]').index(),
                    countStrMfcErrorColumnIndex = this.element.find('th[data-field="CountStrMfcError"]').index(),
                    sumOplErrorColumnIndex = this.element.find('th[data-field="SumOplError"]').index();

                this.tbody.find('tr').each(function (index, row) {
                    var dataRow = $(row),
                        dataItem = statisticsSvodBankGrid.dataItem(dataRow);
                    if (dataItem) {
                        var districtId = dataItem.get('DistrictId'),
                            countStrMfc = dataItem.get('CountStrMfc') || 0,
                            countStrDifference = dataItem.get('CountStrDifference'),
                            sumOplDifference = dataItem.get('SumOplDifference'),
                            countStrMfcError = dataItem.get('CountStrMfcError'),
                            sumOplError = dataItem.get('SumOplError'),
                            kodPost1 = dataItem.get('KodPost1'),
                            kodPost2 = dataItem.get('KodPost2');

                        if (districtId && districtNameColumnIndex > -1) {
                            dataRow.find('td:eq(' + districtNameColumnIndex + ') > span.link').on('click', function (e) {
                                var url = bankPlatKodPostUrl + '&303000400=' + districtId + '&303000700=' + periodRegDate;
                                var newWindow = window.open(url, '_blank');
                                newWindow.focus();
                            });

                            if (countStrMfc > 0 && (countStrDifference == null || countStrDifference == 0) && (sumOplDifferenceColumnIndex == null || sumOplDifference == 0)) {
                                dataRow.find('td:eq(' + districtNameColumnIndex + ')').addClass('k-grid-opl');
                            }

                            if (countStrMfcColumnIndex > -1) {
                                dataRow.find('td:eq(' + countStrMfcColumnIndex + ') > span.link').on('click', function (e) {
                                    var url = platDistrictUrl + '&306003300=' + districtId + '&306001400=' + periodRegDate;
                                    var newWindow = window.open(url, '_blank');
                                    newWindow.focus();
                                });
                            }

                            if (countStrPost1ColumnIndex > -1 && kodPost1 != null) {
                                dataRow.find('td:eq(' + countStrPost1ColumnIndex + ') > span.link').on('click', function (e) {
                                    var url = bankPlatKodPostUrl + '&303000400=' + districtId + '&303000700=' + periodRegDate + '&303001600=' + kodPost1;
                                    var newWindow = window.open(url, '_blank');
                                    newWindow.focus();
                                });
                            }

                            if (countStrPost2ColumnIndex > -1 && kodPost2 != null) {
                                dataRow.find('td:eq(' + countStrPost2ColumnIndex + ') > span.link').on('click', function (e) {
                                    var url = bankPlatKodPostUrl + '&303000400=' + districtId + '&303000700=' + periodRegDate + '&303001600=' + kodPost2;
                                    var newWindow = window.open(url, '_blank');
                                    newWindow.focus();
                                });
                            }

                            if (countStrSvodBankColumnIndex > -1) {
                                dataRow.find('td:eq(' + countStrSvodBankColumnIndex + ') > span.link').on('click', function (e) {
                                    var url = bankPlatKodPostUrl + '&303000400=' + districtId + '&303000700=' + periodRegDate;
                                    var newWindow = window.open(url, '_blank');
                                    newWindow.focus();
                                });
                            }
                        }

                        if (countStrDifferenceColumnIndex > -1 && countStrDifference != null && countStrDifference > 0) {
                            dataRow.find('td:eq(' + countStrDifferenceColumnIndex + ')').addClass('k-grid-no');
                        }

                        if (sumOplDifferenceColumnIndex > -1 && sumOplDifference != null && sumOplDifference > 0) {
                            dataRow.find('td:eq(' + sumOplDifferenceColumnIndex + ')').addClass('k-grid-no');
                        }

                        if (countStrMfcErrorColumnIndex > -1 && countStrMfcError != null && countStrMfcError > 0) {
                            dataRow.find('td:eq(' + countStrMfcErrorColumnIndex + ')').addClass('k-grid-no');
                        }

                        if (sumOplErrorColumnIndex > -1 && sumOplError != null && sumOplError > 0) {
                            dataRow.find('td:eq(' + sumOplErrorColumnIndex + ')').addClass('k-grid-no');
                        }
                    }
                });
            }
        }).data('kendoGrid');

        //грид банковских оплат
        var statisticsBankPlatSource = new kendo.data.DataSource({
            transport: {
                read: {
                    url: '@Url.Action("GetStatisticBankPlatList", "InputFile")',
                    data: { okrugId: okrugId, periodRegDate: periodRegDate },
                    dataType: 'json'
                }
            },
            schema: {
                model: {
                    fields: {
                        KodPost: { type: 'number', defaultValue: null },
                        CountStr: { type: 'number', defaultValue: null },
                        CountStrNotFlagVozvr: { type: 'number', defaultValue: null },
                        CountStrFlagVozvr: { type: 'number', defaultValue: null },
                        Sum: { type: 'number', defaultValue: null },
                        SumNotFlagVozvr: { type: 'number', defaultValue: null },
                        SumFlagVozvr: { type: 'number', defaultValue: null },
                        SumDifference: { type: 'number', defaultValue: null }
                    }
                }
            },
            aggregate: [
                { field: 'CountStr', aggregate: 'sum' },
                { field: 'CountStrNotFlagVozvr', aggregate: 'sum' },
                { field: 'CountStrFlagVozvr', aggregate: 'sum' },
                { field: 'Sum', aggregate: 'sum' },
                { field: 'SumNotFlagVozvr', aggregate: 'sum' },
                { field: 'SumFlagVozvr', aggregate: 'sum' },
                { field: 'SumDifference', aggregate: 'sum' }
            ]
        });

        var statisticsBankPlatGrid = $('#StatisticsBankPlatGrid').kendoGrid({
            selectable: 'row',
            toolbar: [
                {
                    type: 'button',
                    name: 'refresh',
                    text: 'Обновить'
                },
                {
                    name: 'excel',
                }
            ],
            excelExport: function (e) {
                e.workbook.fileName = '@Html.Raw(bankPlatPanelHeader)' + '_' + kendo.toString(new Date(), 'dd.MM.yyyy') + '.xlsx';
                KendoExtension.ExportGridWithTemplatesContent(e);
            },
            dataSource: statisticsBankPlatSource,
            columns: [
                {
                    field: 'KodPost',
                    title: 'Код СК (код поставщика)',
                    template: Common.UI.CustomTemplate('KodPost', '<span class="link">#: KodPost ? kendo.toString(KodPost, "n0") : ""#</span>'),
                    footerTemplate: '<div style="font-weight:bold">Итого</div>'
                },
                {
                    field: 'CountStr',
                    title: 'Кол-во строк',
                    aggregates: ['sum'],
                    attributes: {
                        class: 'text-right'
                    },
                    template: Common.UI.CustomTemplate('CountStr', '#: CountStr != null ? kendo.toString(CountStr, "n0") : ""#'),
                    footerTemplate: '<div style="font-weight:bold;text-align:right">#=sum != null ? kendo.toString(sum, "n0") : ""#</div>'
                },
                {
                    field: 'CountStrNotFlagVozvr',
                    title: 'Кол-во строк без признака распределения',
                    aggregates: ['sum'],
                    attributes: {
                        class: 'text-right'
                    },
                    template: Common.UI.CustomTemplate('CountStrNotFlagVozvr', '#: CountStrNotFlagVozvr != null ? kendo.toString(CountStrNotFlagVozvr, "n0") : ""#'),
                    footerTemplate: '<div style="font-weight:bold;text-align:right">#=sum != null ? kendo.toString(sum, "n0") : ""#</div>'
                },
                {
                    field: 'CountStrFlagVozvr',
                    title: 'Кол-во строк с признаком распределения',
                    aggregates: ['sum'],
                    attributes: {
                        class: 'text-right'
                    },
                    template: Common.UI.CustomTemplate('CountStrFlagVozvr', '#: CountStrFlagVozvr != null ? kendo.toString(CountStrFlagVozvr, "n0") : ""#'),
                    footerTemplate: '<div style="font-weight:bold;text-align:right">#=sum != null ? kendo.toString(sum, "n0") : ""#</div>'
                },
                {
                    field: 'Sum',
                    title: 'Сумма всего',
                    aggregates: ['sum'],
                    attributes: {
                        class: 'text-right'
                    },
                    template: Common.UI.CustomTemplate('Sum', '#: Sum ? kendo.toString(Sum, "n2") : ""#'),
                    footerTemplate: '<div style="font-weight:bold;text-align:right">#=sum != null ? kendo.toString(sum, "n2") : ""#</div>'
                },
                {
                    field: 'SumNotFlagVozvr',
                    title: 'Сумма без признака распределения',
                    aggregates: ['sum'],
                    attributes: {
                        class: 'text-right'
                    },
                    template: Common.UI.CustomTemplate('SumNotFlagVozvr', '#: SumNotFlagVozvr != null ? kendo.toString(SumNotFlagVozvr, "n2") : ""#'),
                    footerTemplate: '<div style="font-weight:bold;text-align:right">#=sum != null ? kendo.toString(sum, "n2") : ""#</div>'
                },
                {
                    field: 'SumFlagVozvr',
                    title: 'Сумма с признаком распределения',
                    aggregates: ['sum'],
                    attributes: {
                        class: 'text-right'
                    },
                    template: Common.UI.CustomTemplate('SumFlagVozvr', '#: SumFlagVozvr != null ? kendo.toString(SumFlagVozvr, "n2") : ""#'),
                    footerTemplate: '<div style="font-weight:bold;text-align:right">#=sum != null ? kendo.toString(sum, "n2") : ""#</div>'
                },
                {
                    field: 'SumDifference',
                    title: 'Разность сумм',
                    aggregates: ['sum'],
                    attributes: {
                        class: 'text-right'
                    },
                    template: Common.UI.CustomTemplate('SumDifference', '#: SumDifference != null ? kendo.toString(SumDifference, "n2") : ""#'),
                    footerTemplate: '<div style="font-weight:bold;text-align:right">#=sum != null ? kendo.toString(sum, "n2") : ""#</div>'
                }
            ],
            dataBound: function () {
                this.tbody.find('tr > td > span.link').on('click', function (e) {
                    var dataItem = statisticsBankPlatGrid.dataItem($(e.target).closest('tr'));
                    if (dataItem) {
                        var kodPost = dataItem.get('KodPost');
                        var url = bankPlatKodPostUrl + '&303001600=' + kodPost + '&303000700=' + periodRegDate;
                        var newWindow = window.open(url, '_blank');
                        newWindow.focus();
                    }
                });
            },
            sortable: true,
            resizable: true,
            scrollable: false,
            messages: {
                commands: {
                    excel: "Экспорт в Excel"
                }
            }
        }).data('kendoGrid');

        //обработать начисления
        statisticsNachGrid.element.find('.k-grid-toolbar > a.k-grid-process').on('click', function (e) {
            e.preventDefault();
            var errorMessages = [];
            Common.ClearNotification();

            var nachInputFileIds = getSelectedNachInputFileIds(statisticsNachGrid.select(), errorMessages);

            if (errorMessages.length > 0) {
                Common.ShowError(errorMessages.join('<br>'));
                return;
            }

            if (nachInputFileIds.length == 0) {
                Common.ShowError('Не выбраны строки начислений для учета на ФСП');
                return;
            }
            
            processInputFiles({
                nachInputFileIds: nachInputFileIds,
                periodRegDate: periodRegDate
            }, statisticsNachGrid);
        });

        //удалить начисления
        statisticsNachGrid.element.find('.k-grid-toolbar > a.k-grid-delete').on('click', function (e) {
            e.preventDefault();
            var errorMessages = [];
            Common.ClearNotification();

            var nachInputFileIds = getSelectedNachInputFileIds(statisticsNachGrid.select(), errorMessages);

            if (errorMessages.length > 0) {
                Common.ShowError(errorMessages.join('<br>'));
                return;
            }

            if (nachInputFileIds.length == 0) {
                Common.ShowError('Не выбраны строки начислений для удаления');
                return;
            }

            deleteInputFiles({
                nachInputFileIds: nachInputFileIds,
                periodRegDate: periodRegDate
            }, statisticsNachGrid);
        });

        //обработать зачисления
        statisticsPlatGrid.element.find('.k-grid-toolbar > a.k-grid-process').on('click', function (e) {
            e.preventDefault();
            var errorMessages = [];
            Common.ClearNotification();

            var platInputFileIds = getSelectedPlatInputFileIds(statisticsPlatGrid.select(), errorMessages);

            if (errorMessages.length > 0) {
                Common.ShowError(errorMessages.join('<br>'));
                return;
            }

            if (platInputFileIds.length == 0) {
                Common.ShowError('Не выбраны строки зачислений для обработки');
                return;
            }

            //CIPJS-241 Когда пользователь выбрал строки с районами, и нажал на кнопку "Учесть на ФСП", для всех выделенных записей ,
            //суммируем кол - во строк в статусе "Подтверждена Банком" и выдаем сообщение
            var partiallyIdentifiefiedCount = 0,
                statisticsPlatGridItems = statisticsPlatGrid.dataItems();

            for (var i = 0; i < statisticsPlatGridItems.length; i++) {
                var inputFilePlatId = statisticsPlatGridItems[i].get('InputFileId');
                if (platInputFileIds.indexOf(inputFilePlatId) > -1) {
                    var inputFilePlatPartiallyIdentifiedCount = statisticsPlatGridItems[i].get('PartiallyIdentifiedCount');
                    partiallyIdentifiefiedCount += inputFilePlatPartiallyIdentifiedCount || 0;
                }
            }

            if (partiallyIdentifiefiedCount == 0) {
                Common.ShowError('Не удалось найти ни одной строки оплат в статусе "Подтверждена Банком". Только эти зачисления будут учтены на ФСП');
                return;
            }
            Common.UI.ShowConfirm({
                title: 'Подтверждение',
                content: 'Внимание!<br><br>Кол-во зачислений МФЦ, подтвержденных банком = ' + partiallyIdentifiefiedCount + '.<br><br>'
                        + 'Только эти зачисления будут учтены на ФСП.<br><br>'
                        + 'Для того чтобы произвести операцию по сопоставлению строк, выберите соответствующие строки и нажмите на кнопку "Связь с банковскими строками оплат".<br><br>'
                        + 'Продолжить?',
                height: 280,
                onSuccess: function (e) {
                    processInputFiles({
                        platInputFileIds: platInputFileIds,
                        periodRegDate: periodRegDate
                    }, statisticsPlatGrid);
                }
            });
        });

        //удалить зачисления
        statisticsPlatGrid.element.find('.k-grid-toolbar > a.k-grid-delete').on('click', function (e) {
            e.preventDefault();
            var errorMessages = [];
            Common.ClearNotification();

            var platInputFileIds = getSelectedPlatInputFileIds(statisticsPlatGrid.select(), errorMessages);

            if (errorMessages.length > 0) {
                Common.ShowError(errorMessages.join('<br>'));
                return;
            }

            if (platInputFileIds.length == 0) {
                Common.ShowError('Не выбраны строки зачислений для удаления');
                return;
            }

            deleteInputFiles({
                platInputFileIds: platInputFileIds,
                periodRegDate: periodRegDate
            }, statisticsPlatGrid);
        });

        //идентифкация зачислений
        statisticsPlatGrid.element.find('.k-grid-toolbar > a.k-grid-identify-plat').on('click', function (e) {
            e.preventDefault();
            var errorMessages = [];
            Common.ClearNotification();
            
            var platInputFileIds = getSelectedPlatInputFileIds(statisticsPlatGrid.select(), errorMessages, true, true);

            if (errorMessages.length > 0) {
                Common.ShowError(errorMessages.join('<br>'));
                return;
            }

            if (platInputFileIds.length == 0) {
                Common.ShowError('Не выбраны строки зачислений для идентификации');
                return;
            }

            kendo.ui.progress($('body'), true);

            $.ajax({
                type: 'POST',
                url: '@Url.Action("PlatIdentifyProcess", "InputPackageFile")',
                data: JSON.stringify({
                    platInputFileIds: platInputFileIds
                }),
                contentType: 'application/json; charset=utf-8',
                dataType: 'json',
                success: function (e) {
                    if (e.Errors && e.Errors.length > 0) {
                        Common.ShowError(e.Errors.join('<br>'));
                    } else {
                        Common.ShowMessage('Идентифкация зачислений запущена успешно');
                    }

                    statisticsPlatGrid.dataSource.read();

                    kendo.ui.progress($('body'), false);
                },
                error: function (e) {
                    Common.ShowError(e.responseText);

                    kendo.ui.progress($('body'), false);
                }
            });
        });
    
        //удалить банковские строки
        statisticsSvodBankGrid.element.find('.k-grid-toolbar > a.k-grid-delete').on('click', function (e) {
            e.preventDefault();
            Common.ClearNotification();

            var oplDistrictIds = getSelectedSvodBankDistrictIds(statisticsSvodBankGrid.select());

            if (oplDistrictIds.length == 0) {
                Common.ShowError('Не выбраны строки банковских файлов для удаления');
                return;
            }

            deleteInputFiles({
                oplDistrictIds: oplDistrictIds,
                periodRegDate: periodRegDate
            }, statisticsSvodBankGrid);
        });

        //обновить
        $('#StatisticsNachGrid,' +
            '#StatisticsPlatGrid,' +
            '#StatisticsSvodBankGrid,' +
            '#StatisticsBankPlatGrid').find('.k-grid-toolbar > a.k-grid-refresh').on('click', function (e) {
                e.preventDefault();
                $(e.target).closest('.k-grid').data('kendoGrid').dataSource.read();
            });

        //методы обработки
        function getSelectedNachInputFileIds(nachSelectedRows, errorMessages) {
            var result = [];
            if (nachSelectedRows && nachSelectedRows.length > 0) {
                $.each(nachSelectedRows, function (index, row) {
                    var dataItem = statisticsNachGrid.dataItem(row);
                    if (dataItem) {
                        var inputFileId = parseInt(dataItem.get('InputFileId'));
                        var districtName = dataItem.get('DistrictName');
                        var statusCode = parseInt(dataItem.get('StatusCode'));

                        if (isNaN(inputFileId)) {
                            if (errorMessages) {
                                errorMessages.push('Обработка невозможна. Для выбраного района ' + (districtName ? ' \"' + districtName + '\" ' : '') + 'не загружен файл с начислением.');
                            }
                            return;
                        }

                        if (statusCode != loadedCode) {
                            if (errorMessages) {
                                errorMessages.push('Обработка невозможна. Для выбраного района ' + (districtName ? ' \"' + districtName + '\" ' : '') + 'файл загрузки не находится в статусе \"Загружен\".');
                            }
                            return;
                        }

                        result.push(inputFileId);
                    }
                });
            }
            return result;
        }

        function getSelectedPlatInputFileIds(platSelectedRows, errorMessages, skipStatusCheck, identifyProcess) {
            var result = [];
            if (platSelectedRows && platSelectedRows.length > 0) {
                $.each(platSelectedRows, function (index, row) {
                    var dataItem = statisticsPlatGrid.dataItem(row);
                    if (dataItem) {
                        var inputFileId = parseInt(dataItem.get('InputFileId'));
                        var districtName = dataItem.get('DistrictName');
                        var statusCode = parseInt(dataItem.get('StatusCode'));
                        if (errorMessages) {
                            if (isNaN(inputFileId)) {
                                errorMessages.push('Обработка невозможна. Для выбраного района ' + (districtName ? ' \"' + districtName + '\" ' : '') + 'не загружен файл с начислением.');
                                return;
                            }
                            if (skipStatusCheck !== true && statusCode != processedPartiallyCode && statusCode != linkedBankCompletelyCode && statusCode != linkedBankPartiallyCode) {
                                errorMessages.push('Обработка невозможна. Для выбраного района ' + (districtName ? ' \"' + districtName + '\" ' : '') + 'файл загрузки не находится в статусе \"Обработан частично\", \"Связан с банком (частично)\", \"Связан с банком (полностью)\".');
                                return;
                            }
                            if (identifyProcess === true && statusCode == processedCompletelyCode) {
                                errorMessages.push('Обработка невозможна. Для выбраного района ' + (districtName ? ' \"' + districtName + '\" ' : '') + 'файл загрузки находится в статусе \"Обработан полностью\".');
                                return;
                            }
                        }
                        result.push(inputFileId);
                    }
                });
            }
            return result;
        }

        function getSelectedSvodBankDistrictIds(svodBankSelectedRows) {
            var result = [];
            if (svodBankSelectedRows && svodBankSelectedRows.length > 0) {
                $.each(svodBankSelectedRows, function (index, row) {
                    var dataItem = statisticsSvodBankGrid.dataItem(row);
                    if (dataItem) {
                        var districtId = parseInt(dataItem.get('DistrictId'));
                        if (!isNaN(districtId)) {
                            result.push(districtId);
                        }
                    }
                });
            }
            return result;
        }

        function processInputFiles(data, grid) {
            kendo.ui.progress($('body'), true);

            $.ajax({
                type: 'POST',
                url: '@Url.Action("Process", "InputPackageFile")',
                data: JSON.stringify(data),
                contentType: 'application/json; charset=utf-8',
                dataType: 'json',
                success: function (e) {
                    if (e.Errors && e.Errors.length > 0) {
                        Common.ShowError(e.Errors.join('<br>'));
                    } else {
                        Common.ShowMessage('Обработка файла запущена успешно');
                    }

                    kendo.ui.progress($('body'), false);

                    grid.dataSource.read();
                },
                error: function (e) {
                    Common.ShowError(e.responseText);

                    kendo.ui.progress($('body'), false);
                }
            });
        }

        function deleteInputFiles(data, grid) {
            kendo.ui.progress($('body'), true);

            $.ajax({
                type: 'POST',
                url: '@Url.Action("Delete", "InputPackageFile")',
                data: JSON.stringify(data),
                contentType: 'application/json; charset=utf-8',
                dataType: 'json',
                success: function (e) {
                    if (e.Errors && e.Errors.length > 0) {
                        Common.ShowError(e.Errors.join('<br>'));
                    } else {
                        Common.ShowMessage('Файлы успешно удалены');

                        grid.dataSource.read();
                    }

                    kendo.ui.progress($('body'), false);
                },
                error: function (e) {
                    Common.ShowError(e.responseText);

                    kendo.ui.progress($('body'), false);
                }
            });
        }

        $('#StatisticsPanelbar').kendoPanelBar({ 'expandMode': 'multiple' });
    });
</script>
