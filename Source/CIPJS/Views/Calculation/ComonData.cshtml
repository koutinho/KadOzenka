@using CIPJS.Models.Calculation;
@using Core.Shared.Extensions;
@using CIPJS.Models.Documents;
@using ObjectModel.Insur;
@using ObjectModel.Directory;
@using Core.SRD
@using Newtonsoft.Json;

@model CalculationDetails

<style>
    .printforms-placeholder .k-header.k-grid-toolbar {
        text-align: center;
    }

    #projectReceived {
        pointer-events: auto;
    }
</style>

@using (Html.BeginForm("Edit", "Calculation", FormMethod.Post))
{
    @Html.HiddenFor(m => m.Id)
    @Html.HiddenFor(m => m.ObjId)
    @Html.HiddenFor(m => m.OkrugId)
    @Html.HiddenFor(m => m.SubjectId)
    @Html.HiddenFor(m => m.IsReadOnly)

    <ul id="ls_panelbar" class="panelbar">
        <li id="DA_CommonData">
            <span>Общие данные</span>
            <div>
                <div class="form-horizontal col-sm-12">
                    <div class="form-group"></div>
                    <div class="form-group">
                        <div class="com-sm-2">
                            <div class="col-sm-2">
                                @Html.CustomLabelFor(m => m.PackageNum)
                            </div>
                            <div class="col-sm-4">
                                @Html.KendoTextBoxFor(x => x.PackageNum, editMode: false)
                            </div>
                            <div class="col-sm-2">
                                @Html.CustomLabelFor(m => m.StatusCode)
                            </div>
                            <div class="col-sm-4">
                                @Html.TextBox("StatusCode", Model.StatusCode.HasValue ? Model.StatusCode.Value.GetEnumDescription() : string.Empty, new { @class = "k-textbox", @style = "width: 100%;", @readonly = "readonly", data_skip = "true" })
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-2">
                            @Html.CustomLabelFor(m => m.RequestNumber)
                        </div>
                        <div class="col-sm-4">
                            @Html.KendoAutoCopmpliteFor(x => x.RequestNumber, null, "Calculation", "RequestNumberAutocomplete", "function() {return {searchString: $('#RequestNumber').val()};}", allowInsert: true)
                        </div>
                        <div class="col-sm-2">
                            @Html.CustomLabelFor(m => m.RequestDate)
                        </div>
                        <div class="col-sm-4">
                            @Html.KendoDatePickerFor(m => m.RequestDate)
                            @Html.ValidationMessageFor(m => m.RequestDate, null, new { @class = "k-syntax-error" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-2">
                            @Html.CustomLabelFor(m => m.SubjectName)
                        </div>
                        <div class="col-sm-9">
                            @Html.KendoAutoCopmpliteFor(x => x.SubjectName, "SubjectName", "Subject", "GetSubjectByName", $"function() {{return {{name: $('#SubjectName').val(), subjectType: {(long)ObjectModel.Directory.SubjectType.ManagementCompany} }};}}"@*, editMode: Model.CanEditInsuredName*@)
                        </div>
                        <div class="col-sm-1">
                            @Html.KendoButton("selectSubject", "...", true@*, editMode: Model.CanEditInsuredName*@)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-2">
                            @Html.CustomLabelFor(m => m.InsuranceCompanyName)
                        </div>
                        <div class="col-sm-4">
                            @Html.KendoAutoCopmpliteFor(x => x.InsuranceCompanyName, "FullName", "InsuranceOrganization", "GetByName", "function() {return {name: $('#InsuranceCompanyName').val()};}")
                            @Html.HiddenFor(m => m.InsuranceId)
                        </div>
                        <div class="col-sm-1">
                            @Html.KendoButton("selectInsurCompany", "...", true)
                        </div>
                        <div class="col-sm-3">
                            @Html.CustomLabelFor(m => m.PartCompensation)
                        </div>
                        <div class="col-sm-2">
                            @Html.KendoNumericTextBoxFor(m => m.PartCompensation, 2, editMode: false)
                        </div>
                    </div>
                </div>
            </div>
        </li>
        <li id="DA_MKDData">
            <span>Данные МКД</span>
            <div>
                <div class="form-horizontal col-sm-12">
                    <div class="form-group"></div>
                    <div class="form-group">
                        <div class="col-sm-2">
                            <a id="BtiPremiseExportExcel" href="#">UNOM</a>
                        </div>
                        <div class="col-sm-1">
                            @Html.KendoAutoCopmpliteFor(x => x.Unom, "Unom", "Building", "GetByName", "function() {return {name: $('#Unom').val()};}")
                            <input id="FlagInsur" type="hidden" />
                            <input id="FlagInsurCalculated" type="hidden" />
                        </div>
                        <div class="col-sm-1">
                            @Html.KendoButton("selectObjectByUnom", "...", true)
                        </div>
                        <div class="col-sm-2">
                            @Html.CustomLabelFor(m => m.Address)
                        </div>
                        <div class="col-sm-6">
                            @Html.KendoTextBoxFor(m => m.Address, editMode: false)
                            @Html.ValidationMessageFor(m => m.Address, null, new { @class = "k-syntax-error" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-2">
                            @Html.CustomLabelFor(m => m.YearBuild)
                        </div>
                        <div class="col-sm-2">
                            @Html.KendoNumericTextBoxFor(m => m.YearBuild, 0, editMode: false)
                        </div>
                        <div class="col-sm-2">
                            @Html.CustomLabelFor(m => m.CountFloor)
                        </div>
                        <div class="col-sm-2">
                            @Html.KendoNumericTextBoxFor(m => m.CountFloor, 0, editMode: false)
                        </div>
                        <div class="col-sm-4">
                        </div>
                    </div>
                    <div class="form-group">

                        <div class="col-sm-2">
                            @Html.CustomLabelFor(m => m.KolGp)
                        </div>
                        <div class="col-sm-2">
                            @Html.KendoNumericTextBoxFor(m => m.KolGp, 0, editMode: false)
                        </div>
                        <div class="col-sm-1">
                            @Html.CustomLabelFor("Лифты")
                        </div>
                        <div class="col-sm-1">
                            @Html.CustomLabelFor(m => m.PassengerElevators)
                        </div>
                        <div class="col-sm-2">
                            @Html.KendoNumericTextBoxFor(m => m.PassengerElevators, 0)
                        </div>
                        <div class="col-sm-2">
                            @Html.CustomLabelFor(m => m.CargoElevators)
                        </div>
                        <div class="col-sm-2">
                            @Html.KendoNumericTextBoxFor(m => m.CargoElevators, 0)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-2" style="display:none;">
                            @Html.CustomLabelFor(m => m.Opl)
                        </div>
                        <div class="col-sm-2" style="display:none;">
                            @Html.KendoNumericTextBoxFor(m => m.Opl, 2, editMode: false)
                        </div>
                        <div class="col-sm-2">
                            @Html.CustomLabelFor(m => m.OplBti)
                        </div>
                        <div class="col-sm-2">
                            @Html.KendoNumericTextBoxFor(m => m.OplBti, 2, editMode: false)
                        </div>
                        <div class="col-sm-2">
                            @Html.CustomLabelFor(m => m.Bpl)
                        </div>
                        <div class="col-sm-2">
                            @Html.KendoNumericTextBoxFor(m => m.Bpl, 2, editMode: false)
                        </div>
                        <div class="col-sm-2">
                            @Html.CustomLabelFor(m => m.Lpl)
                        </div>
                        <div class="col-sm-2">
                            @Html.KendoNumericTextBoxFor(m => m.Lpl, 2, editMode: false)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-2">
                            @Html.CustomLabelFor(m => m.OplEgrn)
                        </div>
                        <div class="col-sm-2">
                            @Html.KendoNumericTextBoxFor(m => m.OplEgrn, 2, editMode: false)
                        </div>
                        <div class="col-sm-2">
                            @Html.CustomLabelFor(m => m.Krovpl)
                        </div>
                        <div class="col-sm-2">
                            @Html.KendoNumericTextBoxFor(m => m.Krovpl, 2, editMode: false)
                        </div>
                        <div class="col-sm-2">
                            @Html.CustomLabelFor(m => m.Hpl)
                        </div>
                        <div class="col-sm-2">
                            @Html.KendoNumericTextBoxFor(m => m.Hpl, 2, editMode: false)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-2">
                            @Html.CustomLabelFor(m => m.Epl)
                        </div>
                        <div class="col-sm-2">
                            @Html.KendoNumericTextBoxFor(m => m.Epl, 2)
                        </div>
                    </div>
                    <div class="form-group" style="display:none">
                        <div class="col-sm-2">
                            @Html.CustomLabelFor(m => m.StroiPrice)
                        </div>
                        <div class="col-sm-2">
                            @Html.KendoNumericTextBoxFor(m => m.StroiPrice, 2, editMode: false)
                        </div>
                        <div class="col-sm-2">
                            @Html.CustomLabelFor(m => m.Pizn)
                        </div>
                        <div class="col-sm-2">
                            @Html.KendoNumericTextBoxFor(m => m.Pizn, 2)
                        </div>
                    </div>
                </div>
            </div>
        </li>
        <li id="DA_CalcInsurCost">
            <span>Расчет страховой стоимости</span>
            <div>
                <div class="form-horizontal col-sm-12">
                    @Html.HiddenFor(x => x.OplcIncludeHpl)
                    @Html.HiddenFor(x => x.CalculatedAreaIncludeHpl)
                    <div class="form-group"></div>
                    <div class="form-group">
                        <div class="col-sm-2 col-sm-offset-8">
                            @Html.CustomLabelFor(x => x.FlagOkrugl)
                        </div>
                        <div class="col-sm-2">
                            @Html.KendoCheckBoxFor(x => x.FlagOkrugl)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-2">
                            @Html.CustomLabelFor("Общая площадь по зданию (включая холодные помещения), кв.м.")
                        </div>
                        <div class="col-sm-2">
                            @Html.KendoNumericTextBoxFor(m => m.Oplc, 2)
                        </div>
                        <div class="col-sm-2">
                            @Html.CustomLabelFor(m => m.CalculatedArea)
                        </div>
                        <div class="col-sm-2">
                            @Html.KendoNumericTextBoxFor(m => m.CalculatedArea, 2)
                        </div>
                        <div class="col-sm-2">
                            @Html.CustomLabelFor(m => m.IndicatorR)
                        </div>
                        <div class="col-sm-2">
                            @Html.KendoNumericTextBoxFor(m => m.IndicatorR, ((Model.FlagOkrugl ?? false) ? 2 : 10))
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-2">
                            @Html.CustomLabelFor(m => m.ActualCost)
                        </div>
                        <div class="col-sm-2">
                            @Html.KendoNumericTextBoxFor(m => m.ActualCost, 2)
                        </div>
                        <div class="col-sm-2">
                            @Html.CustomLabelFor(m => m.CoefActualCost)
                        </div>
                        <div class="col-sm-2">
                            @Html.KendoNumericTextBoxFor(m => m.CoefActualCost, 2)
                        </div>
                        <div class="col-sm-2">
                            @Html.CustomLabelFor(m => m.ActualCostCurrent)
                        </div>
                        <div class="col-sm-2">
                            @Html.KendoNumericTextBoxFor(m => m.ActualCostCurrent, 2)
                        </div>
                    </div>
                    <div class="form-group"></div>
                    <h5 class="text-center">
                        <strong>
                            Таблица "Определение удельного веса (Ui) отдельных конструкций на основании IV раздела технического паспорта,
                            а также показателей удельного веса значения стоимости по каждой конструкции на основании базовой стоимости всего дома"
                        </strong>
                    </h5>
                    <table class="table table-bordered table-striped">
                        <thead>
                            <tr>
                                <th class="text-center">№ категории</th>
                                <th class="text-center">№ конструкции,i</th>
                                <th class="text-center">Наименование конструкциии</th>
                                <th class="text-center">Удельный вес конструкции, Ui, %</th>
                                <th class="text-center">Стоимость констр. по зданию, Ci=Cб*Ui, руб</th>
                                <th class="text-center">Стоимость констр. общей зоны, Cim=Ci*R, руб</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr class="cat_1">
                                <td class="text-center" rowspan="8">I</td>
                                <td class="center"><label class="control-label category">1</label></td>
                                <td>@Html.CustomLabelFor(m => m.Ui1)</td>
                                <td>
                                    @(Html.Kendo().NumericTextBoxFor(m => m.Ui1)
                                                                        .Format("N2")
                                                                        .Min(0)
                                                                        .Decimals(2)
                                                                        .HtmlAttributes(new { @editMode = "true", @class = "specific_weight", @style = "width: 100%;", @readonly = "readonly" })
                                                                        .Spinners(false))
                                </td>
                                <td id="Ci1" class="text-right">
                                    @Html.ValueFor(x => x.Ci1, "{0:N2}")
                                </td>
                                <td id="Cim1" class="text-right">
                                    @Html.ValueFor(x => x.Cim1, "{0:N2}")
                                </td>
                            </tr>
                            <tr class="cat_1">
                                <td class="center"><label class="control-label category">2</label></td>
                                <td>@Html.CustomLabelFor(m => m.Ui2)</td>
                                <td>
                                    @(Html.Kendo().NumericTextBoxFor(m => m.Ui2)
                                                                                .Format("N2")
                                                                                .Min(0)
                                                                                .Decimals(2)
                                                                                .HtmlAttributes(new { @editMode = "true", @class = "specific_weight", @style = "width: 100%;", @readonly = "readonly" })
                                                                                .Spinners(false))
                                </td>
                                <td id="Ci2" class="text-right">
                                    @Html.ValueFor(x => x.Ci2, "{0:N2}")
                                </td>
                                <td id="Cim2" class="text-right">
                                    @Html.ValueFor(x => x.Cim2, "{0:N2}")
                                </td>
                            </tr>
                            <tr class="cat_1">
                                <td class="center"><label class="control-label category">3</label></td>
                                <td>@Html.CustomLabelFor(m => m.Ui3)</td>
                                <td>
                                    @(Html.Kendo().NumericTextBoxFor(m => m.Ui3)
                                                                                .Format("N2")
                                                                                .Min(0)
                                                                                .Decimals(2)
                                                                                .HtmlAttributes(new { @editMode = "true", @class = "specific_weight", @style = "width: 100%;", @readonly = "readonly" })
                                                                                .Spinners(false))
                                </td>
                                <td id="Ci3" class="text-right">
                                    @Html.ValueFor(x => x.Ci3, "{0:N2}")
                                </td>
                                <td id="Cim3" class="text-right">
                                    @Html.ValueFor(x => x.Cim3, "{0:N2}")
                                </td>
                            </tr>
                            <tr class="cat_1">
                                <td class="center"><label class="control-label category">4</label></td>
                                <td>@Html.CustomLabelFor(m => m.Ui4)</td>
                                <td>
                                    @(Html.Kendo().NumericTextBoxFor(m => m.Ui4)
                                                                                .Format("N2")
                                                                                .Min(0)
                                                                                .Decimals(2)
                                                                                .HtmlAttributes(new { @editMode = "true", @class = "specific_weight", @style = "width: 100%;", @readonly = "readonly" })
                                                                                .Spinners(false))
                                </td>
                                <td id="Ci4" class="text-right">
                                    @Html.ValueFor(x => x.Ci4, "{0:N2}")
                                </td>
                                <td id="Cim4" class="text-right">
                                    @Html.ValueFor(x => x.Cim4, "{0:N2}")
                                </td>
                            </tr>
                            <tr class="cat_1">
                                <td class="center"><label class="control-label category">5</label></td>
                                <td>@Html.CustomLabelFor(m => m.Ui5)</td>
                                <td>
                                    @(Html.Kendo().NumericTextBoxFor(m => m.Ui5)
                                                                                .Format("N2")
                                                                                .Min(0)
                                                                                .Decimals(2)
                                                                                .HtmlAttributes(new { @editMode = "true", @class = "specific_weight", @style = "width: 100%;", @readonly = "readonly" })
                                                                                .Spinners(false))
                                </td>
                                <td id="Ci5" class="text-right">
                                    @Html.ValueFor(x => x.Ci5, "{0:N2}")
                                </td>
                                <td id="Cim5" class="text-right">
                                    @Html.ValueFor(x => x.Cim5, "{0:N2}")
                                </td>
                            </tr>
                            <tr class="cat_1">
                                <td class="center"><label class="control-label category">6</label></td>
                                <td>@Html.CustomLabelFor(m => m.Ui6)</td>
                                <td>
                                    @(Html.Kendo().NumericTextBoxFor(m => m.Ui6)
                                                                                .Format("N2")
                                                                                .Min(0)
                                                                                .Decimals(2)
                                                                                .HtmlAttributes(new { @editMode = "true", @class = "specific_weight", @style = "width: 100%;", @readonly = "readonly" })
                                                                                .Spinners(false))
                                </td>
                                <td id="Ci6" class="text-right">
                                    @Html.ValueFor(x => x.Ci6, "{0:N2}")
                                </td>
                                <td id="Cim6" class="text-right">
                                    @Html.ValueFor(x => x.Cim6, "{0:N2}")
                                </td>
                            </tr>
                            <tr class="cat_1">
                                <td class="center"><label class="control-label category">7</label></td>
                                <td>@Html.CustomLabelFor(m => m.Ui7)</td>
                                <td>
                                    @(Html.Kendo().NumericTextBoxFor(m => m.Ui7)
                                                                                .Format("N2")
                                                                                .Min(0)
                                                                                .Decimals(2)
                                                                                .HtmlAttributes(new { @editMode = "true", @class = "specific_weight", @style = "width: 100%;", @readonly = "readonly" })
                                                                                .Spinners(false))
                                </td>
                                <td id="Ci7" class="text-right">
                                    @Html.ValueFor(x => x.Ci7, "{0:N2}")
                                </td>
                                <td id="Cim7" class="text-right">
                                    @Html.ValueFor(x => x.Cim7, "{0:N2}")
                                </td>
                            </tr>
                            <tr class="cat_1">
                                <td class="center"><label class="control-label category">8</label></td>
                                <td>@Html.CustomLabelFor(m => m.Ui8)</td>
                                <td>
                                    @(Html.Kendo().NumericTextBoxFor(m => m.Ui8)
                                                                                .Format("N2")
                                                                                .Min(0)
                                                                                .Decimals(2)
                                                                                .HtmlAttributes(new { @editMode = "true", @class = "specific_weight", @style = "width: 100%;", @readonly = "readonly" })
                                                                                .Spinners(false))
                                </td>
                                <td id="Ci8" class="text-right">
                                    @Html.ValueFor(x => x.Ci8, "{0:N2}")
                                </td>
                                <td id="Cim8" class="text-right">
                                    @Html.ValueFor(x => x.Cim8, "{0:N2}")
                                </td>
                            </tr>
                            <tr class="cat_2">
                                <td class="text-center">II</td>
                                <td class="center"><label class="control-label category">9</label></td>
                                <td>@Html.CustomLabelFor(m => m.Ui9)</td>
                                <td>
                                    @(Html.Kendo().NumericTextBoxFor(m => m.Ui9)
                                                                                .Format("N2")
                                                                                .Min(0)
                                                                                .Decimals(2)
                                                                                .HtmlAttributes(new { @editMode = "true", @class = "specific_weight", @style = "width: 100%;", @readonly = "readonly" })
                                                                                .Spinners(false))
                                </td>
                                <td id="Ci9" class="text-right">
                                    @Html.ValueFor(x => x.Ci9, "{0:N2}")
                                </td>
                                <td id="Cim9" class="text-right">
                                    @Html.ValueFor(x => x.Cim9, "{0:N2}")
                                </td>
                            </tr>
                            <tr class="cat_3">
                                <td class="text-center">III</td>
                                <td class="center"><label class="control-label category">10</label></td>
                                <td>@Html.CustomLabelFor(m => m.Ui10)</td>
                                <td>
                                    @(Html.Kendo().NumericTextBoxFor(m => m.Ui10)
                                                                                .Format("N2")
                                                                                .Min(0)
                                                                                .Decimals(2)
                                                                                .HtmlAttributes(new { @editMode = "true", @class = "specific_weight", @style = "width: 100%;", @readonly = "readonly" })
                                                                                .Spinners(false))
                                </td>
                                <td id="Ci10" class="text-right">
                                    @Html.ValueFor(x => x.Ci10, "{0:N2}")
                                </td>
                                <td id="Cim10" class="text-right">
                                    @Html.ValueFor(x => x.Cim10, "{0:N2}")
                                </td>
                            </tr>
                            <tr>
                                <td></td>
                                <td></td>
                                <td>@Html.CustomLabelFor(m => m.Ui11)</td>
                                <td style="padding:0;">
                                    <table style="width:100%;">
                                        <tbody>
                                            <tr>
                                                <td style="border:none">
                                                    @(Html.Kendo().NumericTextBoxFor(m => m.Ui11)
                                                                                        .Format("N2")
                                                                                        .Min(0)
                                                                                        .Decimals(2)
                                                                                        .HtmlAttributes(new { @class = "spTotalWeight", @style = "width: 100%;", @readonly = "readonly" })
                                                                                        .Spinners(false))
                                                </td>
                                            </tr>
                                            <tr>
                                                <td style="border:none">
                                                    <span class="field-validation-valid k-syntax-error total_weight_error"></span>
                                                </td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </td>
                                <td class="text-right">
                                    <span id="Ci11" class="spTotalValueByBuilding">@Html.ValueFor(x => x.Ci11, "{0:N2}")</span>
                                </td>
                                <td class="text-right">
                                    <span id="Cim11" class="spTotalValueComonArea">@Html.ValueFor(x => x.Cim11, "{0:N2}")</span>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
            <div class="form-horizontal col-sm-12">
                <div class="form-group"></div>
                <div class="form-group">
                    <div class="col-sm-12 calculationSumInfo">
                        <h5 class="text-center">
                            <strong>
                                Расчет страховой премии и ежемесячного страхового взноса по категориям общего имущества
                            </strong>
                        </h5>
                        <table class="table table-bordered table-striped" id="calculationSumInfo">
                            <thead>
                                <tr>
                                    <th class="text-center" style="width: 30%;" data-field="name">Категории</th>
                                    <th class="text-center" style="width: 13%;" data-field="cost">Страховая стоимость</th>
                                    <th class="text-center" style="width: 13%;" data-field="amount">Страховая сумма</th>
                                    <th class="text-center" style="width: 8%;" data-field="baserate">Базовый страховой тариф, %</th>
                                    <th class="text-center" style="width: 13%;" data-field="annualprem">Годовая страховая премия</th>
                                    <th class="text-center" style="width: 13%;" data-field="monthlyprem">Ежемесячный страховой взнос</th>
                                </tr>
                            </thead>
                            <tr>
                                <td>Общая зона дома без санитарно-технических работи внутридомового инженерного оборудования</td>
                                <td id="TotalCost1" class="text-right">
                                    @Html.ValueFor(x => x.TotalCost1, "{0:N2}")
                                </td>
                                <td id="DesignCost1" class="text-right">
                                    @Html.ValueFor(x => x.DesignCost1, "{0:N2}")
                                </td>
                                <td id="BasicRate1" class="text-right">
                                    @Html.ValueFor(x => x.BasicRate1, "{0:N2}")
                                </td>
                                <td id="AnnualBonus1" class="text-right">
                                    @Html.ValueFor(x => x.AnnualBonus1, "{0:N2}")
                                </td>
                                <td id="MonthlyBonus1" class="text-right">
                                    @Html.ValueFor(x => x.MonthlyBonus1Category, "{0:N2}")
                                </td>
                            </tr>
                            <tr>
                                <td>Общая зона дома по санитарно техническим работам и внутридомовому инженерному оборудованию</td>
                                <td id="TotalCost2" class="text-right">
                                    @Html.ValueFor(x => x.TotalCost2, "{0:N2}")
                                </td>
                                <td id="DesignCost2" class="text-right">
                                    @Html.ValueFor(x => x.DesignCost2, "{0:N2}")
                                </td>
                                <td id="BasicRate2" class="text-right">
                                    @Html.ValueFor(x => x.BasicRate2, "{0:N2}")
                                </td>
                                <td id="AnnualBonus2" class="text-right">
                                    @Html.ValueFor(x => x.AnnualBonus2, "{0:N2}")
                                </td>
                                <td id="MonthlyBonus2" class="text-right">
                                    @Html.ValueFor(x => x.MonthlyBonus2Category, "{0:N2}")
                                </td>
                            </tr>
                            <tr>
                                <td>Лифты и лифтовое оборудование</td>
                                <td id="TotalCost3" class="text-right">
                                    @Html.ValueFor(x => x.TotalCost3, "{0:N2}")
                                </td>
                                <td id="DesignCost3" class="text-right">
                                    @Html.ValueFor(x => x.DesignCost3, "{0:N2}")
                                </td>
                                <td id="BasicRate3" class="text-right">
                                    @Html.ValueFor(x => x.BasicRate3, "{0:N2}")
                                </td>
                                <td id="AnnualBonus3" class="text-right">
                                    @Html.ValueFor(x => x.AnnualBonus3, "{0:N2}")
                                </td>
                                <td id="MonthlyBonus3" class="text-right">
                                    @Html.ValueFor(x => x.MonthlyBonus3Category, "{0:N2}")
                                </td>
                            </tr>
                            <tr>
                                <td>По дому в целом</td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td id="SizeAnnualBonus" class="text-right">
                                    @Html.ValueFor(x => x.SizeAnnualBonus, "{0:N2}")
                                </td>
                                <td id="SizeAnnualBonusMonthlyBonus" class="text-right">
                                    @Html.ValueFor(x => x.SizeAnnualBonusMonthlyBonus, "{0:N2}")
                                </td>
                            </tr>
                            <tr>
                                <td>По одной квартире</td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td id="SizeAnnualBonusFlat" class="text-right">
                                    @Html.ValueFor(x => x.SizeAnnualBonusFlat, "{0:N2}")
                                </td>
                                <td id="SizeAnnualBonusMonthlyBonusFlat" class="text-right">
                                    @Html.ValueFor(x => x.SizeAnnualBonusMonthlyBonusFlat, "{0:N2}")
                                </td>
                            </tr>
                        </table>
                    </div>
                </div>
            </div>
        </li>
        @if (Model.Id > 0)
        {
            <li id="DA_Comments">
                <span>Комментарии</span>
                <div>
                    <div class="form-horizontal col-sm-12">
                        <div class="form-group"></div>
                        <div class="ajax-data-loading" data-request-type="GET" data-url="@Url.Content("~/Comment/Index")" data-param-reestrId="312" data-param-objectId="@Model.Id" data-param-isReadOnly="true" data-loader="true"></div>
                        <div class="form-group">
                        </div>
                    </div>
                </div>
            </li>
        }
        <li id="DA_CalcAgreements">
            <span>Согласование расчета</span>
            <div>
                <div class="form-horizontal col-sm-12">
                    <div class="form-group"></div>
                    <div class="form-group">
                        <div class="col-sm-2">
                            @Html.CustomLabel("Расчет создан")
                        </div>
                        <div class="col-sm-1">
                            @Html.CustomLabelFor(m => m.CalculatePersonDate)
                        </div>
                        <div class="col-sm-2">
                            @Html.KendoDatePickerFor(m => m.CalculatePersonDate, format: "dd.MM.yyyy HH:mm", editMode: Model.CalculatePersonDate.HasValue)
                        </div>
                        <div class="col-sm-1">
                            @Html.CustomLabelFor(m => m.CalculatePersonFIO)
                        </div>
                        <div class="col-sm-6">
                            @Html.KendoTextBoxFor(m => m.CalculatePersonFIO, true)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-5">
                        </div>
                        <div class="col-sm-1">
                            @Html.CustomLabelFor(m => m.CalculatePersonPost)
                        </div>
                        <div class="col-sm-6">
                            @Html.TextBoxAreaFor(m => m.CalculatePersonPost, 1, 2, true)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-2">
                            @Html.KendoButton("calcAgreed", "Согласовано", true)
                        </div>
                        <div class="col-sm-1">
                            @Html.CustomLabelFor(m => m.InspectorPersonDate)
                        </div>
                        <div class="col-sm-2">
                            @Html.KendoDatePickerFor(m => m.InspectorPersonDate, format: "dd.MM.yyyy HH:mm", editMode: Model.InspectorPersonDate.HasValue)
                        </div>
                        <div class="col-sm-1">
                            @Html.CustomLabelFor(m => m.InspectorPersonFIO)
                        </div>
                        <div class="col-sm-6">
                            @Html.KendoTextBoxFor(m => m.InspectorPersonFIO, true)
                            @Html.HiddenFor(x => x.InspectorPersonId)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-5">
                        </div>
                        <div class="col-sm-1">
                            @Html.CustomLabelFor(m => m.InspectorPersonPost)
                        </div>
                        <div class="col-sm-6">
                            @Html.TextBoxAreaFor(m => m.InspectorPersonPost, 1, 2, true)
                        </div>
                    </div>
                    <div class="form-group"></div>
                </div>
            </div>
        </li>
        <li id="DA_ProjAgreements">
            <span>Согласование проекта договора</span>
            <div style="@(Model.StatusCode == CalculationStatus.ProjectAgreement || Model.StatusCode == CalculationStatus.Agreed || Model.StatusCode == CalculationStatus.ProjectAgreed ? "" : "pointer-events:none;")">
                <div class="form-horizontal col-sm-12">
                    <div class="form-group"></div>
                    @Html.HiddenFor(m => m.AgreementId)
                    <div class="form-group"></div>
                    <div class="form-group">
                        <div class="col-sm-2">
                            @Html.KendoButton("projectReceived", "Проект получен", true)
                        </div>
                        <div class="col-sm-1">
                            @Html.CustomLabelFor(m => m.AgreementGotDate)
                        </div>
                        <div class="col-sm-2">
                            @Html.KendoDatePickerFor(m => m.AgreementGotDate, format: "dd.MM.yyyy HH:mm", editMode: Model.AgreementGotDate.HasValue)
                        </div>
                        <div class="col-sm-1">
                            @Html.CustomLabelFor(m => m.AgreementGotUserName)
                        </div>
                        <div class="col-sm-6">
                            @Html.KendoTextBoxFor(m => m.AgreementGotUserName, editMode: Model.AgreementGotDate.HasValue)
                            @Html.HiddenFor(x => x.AgreementGotUserId)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-5">
                        </div>
                        <div class="col-sm-1">
                            @Html.CustomLabelFor(m => m.AgreementGotUserPost)
                        </div>
                        <div class="col-sm-6">
                            @Html.TextBoxAreaFor(m => m.AgreementGotUserPost, 1, 2, true, editMode: Model.AgreementGotDate.HasValue)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-2">
                            @Html.CustomLabelFor(m => m.AgreementPartMoscow)
                        </div>
                        <div class="col-sm-3">
                            @Html.KendoNumericTextBoxFor(m => m.AgreementPartMoscow, 2, editMode: true)
                        </div>
                        <div class="col-sm-2">
                            @Html.CustomLabelFor(m => m.ProgectNum)
                        </div>
                        <div class="col-sm-5">
                            @Html.KendoTextBoxFor(x => x.ProgectNum, editMode: Model.AgreementGotDate.HasValue)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-2">
                        </div>
                        <div class="col-sm-3">
                        </div>
                        <div class="col-sm-2">
                            @Html.CustomLabelFor(m => m.EstimatedInsuranceStartDate)
                        </div>
                        <div class="col-sm-5">
                            @Html.KendoDatePickerFor(m => m.EstimatedInsuranceStartDate, format: "dd.MM.yyyy", editMode: true)
                        </div>
                    </div>
                    @{
                        var showDraftContractsTerms = Model.StatusCode.HasValue
                            && Model.StatusCode.Value != CalculationStatus.None
                            && Model.StatusCode.Value != CalculationStatus.Created;
                        <div id="draftContractsTerms" style="@(showDraftContractsTerms ? "" : "display: none;")">
                            <h5 class="text-center">
                                <strong>
                                    Таблица "Условия проекта договора"
                                </strong>
                            </h5>
                            <div class="form-group">
                                <div class="col-sm-12">
                                    <div id="AgreementProjectCategoriesGrid"></div>
                                </div>
                            </div>
                        </div>
                    }

                    <div class="form-group">
                    </div>
                    <div class="form-group">
                        <div class="col-sm-2">
                            @Html.CustomLabelFor(m => m.AgreementCommentSpravka)
                        </div>
                        <div class="col-sm-10">
                            @Html.TextAreaFor(m => m.AgreementCommentSpravka, new { @class = "k-textbox", @style = "width: 100%;height: 70px;resize: none;", @readonly = "readonly", @editMode = $"{Model.AgreementGotDate.HasValue.ToString().ToLower()}" })
                            @Html.ValidationMessageFor(m => m.AgreementCommentSpravka, null, new { @class = "k-syntax-error" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-2">
                            @Html.CustomLabelFor(m => m.AgreementResumeSpravka)
                        </div>
                        <div class="col-sm-10">
                            @Html.TextAreaFor(m => m.AgreementResumeSpravka, new { @class = "k-textbox", @style = "width: 100%;height: 70px;resize: none;", @readonly = "readonly", @editMode = $"{Model.AgreementGotDate.HasValue.ToString().ToLower()}" })
                            @Html.ValidationMessageFor(m => m.AgreementResumeSpravka, null, new { @class = "k-syntax-error" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-2">
                            @Html.CustomLabelFor(m => m.AgreementNote)
                        </div>
                        <div class="col-sm-10">
                            @Html.TextAreaFor(m => m.AgreementNote, new { @class = "k-textbox", @style = "width: 100%;height: 70px;resize: none;", @readonly = "readonly", @editMode = $"{Model.AgreementGotDate.HasValue.ToString().ToLower()}" })
                            @Html.ValidationMessageFor(m => m.AgreementNote, null, new { @class = "k-syntax-error" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-2">
                            @Html.KendoButton("projectAgreed", "Проект согласован", true, editMode: Model.AgreementGotDate.HasValue)
                        </div>
                        <div class="col-sm-1">
                            @Html.CustomLabelFor(m => m.AgreementApprovalDate)
                        </div>
                        <div class="col-sm-2">
                            @Html.KendoDatePickerFor(m => m.AgreementApprovalDate, format: "dd.MM.yyyy HH:mm", editMode: Model.AgreementApprovalDate.HasValue)
                        </div>
                        <div class="col-sm-1">
                            @Html.CustomLabelFor(m => m.AgreementApprovalUserName)
                        </div>
                        <div class="col-sm-6">
                            @Html.KendoTextBoxFor(m => m.AgreementApprovalUserName, editMode: Model.AgreementApprovalDate.HasValue)
                            @Html.HiddenFor(x => x.AgreementApprovalUserId)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-5">
                        </div>
                        <div class="col-sm-1">
                            @Html.CustomLabelFor(m => m.AgreementApprovalUserPost)
                        </div>
                        <div class="col-sm-6">
                            @Html.TextBoxAreaFor(m => m.AgreementApprovalUserPost, 1, 2, true, editMode: Model.AgreementApprovalDate.HasValue)
                        </div>
                    </div>
                    <div class="form-group"></div>
                </div>
            </div>
        </li>
        @if (Model.Id > 0)
        {
            <li id="DA_Documents">
                <span>Документы от СК</span>
                <div>
                    <div class="form-horizontal col-sm-12">
                        <div class="form-group"></div>
                        @Html.Partial("~/Views/Documents/Documents.cshtml", new DocumentObjDto { ObjId = Model.Id, ReestrId = OMParamCalculation.GetRegisterId() })
                    </div>
                    <div class="form-group"></div>
                </div>
            </li>
            <li id="DA_PrintForms">
                <span>Печатные формы</span>
                <div>
                    <div class="form-horizontal col-sm-12">
                        <div class="form-group"></div>
                        <div id="printFormLoader" class="ajax-data-loading printforms-placeholder" data-request-type="GET" data-url="@Url.Content("~/RegistersView/FinanceSavedReport?Pageable=false&Scrollable=false")" data-param-transition="1" data-param-transition80900700="@Model.Id" data-param-transition80900600="312" data-param-calculationstatus="@((long)Model.StatusCode.GetValueOrDefault(CalculationStatus.None))" data-param-partialview="1" data-loader="true"></div>
                        <div class="form-group"></div>
                    </div>
                </div>
            </li>
        }
        @*@if (Model.ContractId.HasValue)
            {
                <li>
                    <span id="DA_ContractDetails">Договор</span>
                    <div>
                        <div class="form-horizontal col-sm-12">
                            <div class="form-group"></div>
                            <div class="ajax-data-loading" data-request-type="GET" data-url="@Url.Content("~/Contract/Details")" data-param-id="@Model.ContractId.Value"></div>
                            <div class="form-group"></div>
                        </div>
                    </div>
                </li>
            }*@
    </ul>
    <div class="static-nav">
        <nav id="navigation-menu">
            <a href="#DA_CommonData">Общие данные</a>
            <a href="#DA_MKDData">Данные МКД</a>
            <a href="#DA_CalcInsurCost">Расчет страховой стоимости</a>
            <a href="#DA_Comments">Комментарии</a>
            <a href="#DA_CalcAgreements">Согласование расчета</a>
            <a href="#DA_ProjAgreements">Согласование проекта договора</a>
            <a href="#DA_Documents">Документы от СК</a>
            <a href="#DA_PrintForms">Печатные формы</a>
        </nav>
        @*@if (Model.ContractId.HasValue)
            {
                <a href="#DA_ContractDetails">Договор</a>
            }*@

        @if (Model.StatusCode.HasValue && Model.StatusCode.Value != ObjectModel.Directory.CalculationStatus.None)
        {
            <fieldset style="margin-top: 120px;">
                <div class="form-group">
                    <div class="col-xs-12 label-value" style="text-align: center; padding: 4px; border: 1px solid #99979c; border-radius: 6px;">
                        @Html.Label("StatusDocSummary", Model.StatusCode.GetEnumDescription())
                    </div>
                </div>
                <div class="form-group" style="@(Model.SizeBonusMkd.HasValue ? "" : "display: none")">
                    <div class="col-xs-12 label-value" style="font-size: 16px;display: inline-block;">
                        <div class="col-xs-6 label-value">
                            @Html.Label("SizeBonusMkdPostfix", "Премия (проект)", new { style = "font-weight: normal;" })
                        </div>
                        <div class="col-xs-6 label-value" style="text-align: right;">
                            @Html.Label("SizeBonusMkd", Model.SizeBonusMkd.HasValue ? Model.SizeBonusMkd.Value.ToString("N2") : "0,00", new { @class = "text-green", style = "font-size: 16px;" })
                        </div>
                    </div>
                </div>
                <div class="form-group" style="@(Model.SizeBonusMkd.HasValue ? "" : "display: none")">
                    <div class="col-xs-12 label-value" style="font-size: 16px;display: inline-block;">
                        <div class="col-xs-6 label-value">
                            @Html.Label("ContributionPostfix", "Взнос (проект)", new { style = "font-weight: normal;" })
                        </div>
                        <div class="col-xs-6 label-value" style="text-align: right;">
                            @Html.Label("Contribution", Model.Contribution.HasValue ? Model.Contribution.Value.ToString("N2") : "0,00", new { @class = "text-green", style = "font-size: 16px;" })
                        </div>
                    </div>
                </div>
                @*<div class="form-group" style="display: block;">
                        <div class="col-xs-6 label-value" style="font-size: 18px;">
                            @Html.Label("TotalSumPayPrefix", "Всего к выплате:")
                        </div>
                        <div class="col-xs-6 label-value" style="text-align: right;">
                            @Html.Label("TotalSumPay", Model.TotalSumPay.HasValue ? Model.TotalSumPay.Value.ToString("N2") : "0,00", new { style = "font-size: 18px;" })
                        </div>
                    </div>
                    <div class="form-group" style="display: block;">
                        <div class="col-xs-6 label-value" style="font-size: 18px;">
                            @Html.Label("TotalSumPaidPrefix", "Выплачено:")
                        </div>
                        <div class="col-xs-6 label-value" style="text-align: right;">
                            @Html.Label("TotalSumPaid", Model.TotalSumPaid.HasValue ? Model.TotalSumPaid.Value.ToString("N2") : "0,00", new { style = "font-size: 18px;" })
                        </div>
                    </div>
                    <div class="form-group" style="display: block;">
                        <div class="col-xs-6 label-value" style="font-size: 18px;">
                            @Html.Label("TotalMustPayPrefix", "Подлежит оплате:")
                        </div>
                        <div class="col-xs-6 label-value" style="text-align: right;">
                            @Html.Label("TotalMustPay", Model.TotalMustPay.HasValue ? Model.TotalMustPay.Value.ToString("N2") : "0,00", new { style = "font-size: 18px;" })
                        </div>
                    </div>
                    <div class="form-group" style="display: block;">
                        <div class="col-xs-6 label-value" style="font-size: 18px;">
                            @Html.Label("TotalRemainderPrefix", "Остаток:")
                        </div>
                        <div class="col-xs-6 label-value" style="text-align: right;">
                            @Html.Label("TotalRemainder", Model.TotalRemainder.HasValue ? Model.TotalRemainder.Value.ToString("N2") : "0,00", new { style = "font-size: 18px;" })
                        </div>
                    </div>*@
            </fieldset>
        }

        <div id="toolbar" style="position:absolute; bottom: 20px;width: 95%;"></div>
        <div id="wndReferenceDetails" />
    </div>
}

<script type="text/javascript">
    var btiPremiseExportExcel = '@Url.Action("BtiPremiseExportToExcel", "Building")';
    $(document).ready(function () {

        EnterTabulation();

        UpdateAgreementPartMoscowStyle();
        $('[name="AgreementPartMoscow"]').data('kendoNumericTextBox').bind('change', function (e) {
            UpdateAgreementPartMoscowStyle();
            recalcCalculationValuesWithoutInsurCosts(true);
        });

        var autoCopmplInsurCompanyName = $('#InsuranceCompanyName').data('kendoAutoComplete');
        if (autoCopmplInsurCompanyName) {
            autoCopmplInsurCompanyName.bind("select", function (e) {
                $('[name="InsuranceId"]').val(e.dataItem.Id);
            });
        }
        var autoCopmplSubject = $('#SubjectName').data('kendoAutoComplete');
        if (autoCopmplSubject) {
            autoCopmplSubject.bind("select", function (e) {
                $('[name="SubjectId"]').val(e.dataItem.EmpId);
            });
        }
        var autoCopmplUnom = $('#Unom').data('kendoAutoComplete');
        if (autoCopmplUnom) {
            autoCopmplUnom.bind("select", function (e) {
                $('[name="ObjId"]').val(e.dataItem.Id);
                fillMkdInfo(e.dataItem.Id);
                $('#selectInsurCompany').css('pointer-events', 'auto');
                $('#selectInsurCompany').removeAttr('disabled');
                $('#selectInsurCompany').removeClass('k-state-disabled');
            });
        }

        $("#navigation-menu a").mPageScroll2id({
            highlightSelector:"#navigation-menu a"
        });

        $('[name="ProgectNum"]').change(function () {
            Common.ClearNotification();
            CheckProgectNum(function (e) {
                if (e) {
                    Common.ShowError(e);
                }
            });
        });

        if (!$('#ObjId').val() || $('#ObjId').val().length == 0) {
            $('#selectInsurCompany').css('pointer-events', 'none');
            $('#selectInsurCompany').attr('disabled', 'disabled');
            $('#selectInsurCompany').addClass('k-state-disabled');
        }

        $('input.specific_weight[data-role="numerictextbox"]').each(function () {
            $(this).data('kendoNumericTextBox').bind('change', function () {
                recalcCalculationValuesWithoutInsurCosts(false);
            });
        });

        $('#EstimatedInsuranceStartDate').data('kendoDatePicker').bind('change', function (e) {
            CheckEstimatedInsuranceStartDate();
        });




        $('#selectSubject').on("click", function (e) {
            e.preventDefault();
            var contentUrl = '@Url.Action("Index", "RegistersView")' + '?registerId=SubjectSelect',
                title = 'Выбор Страховой компании',
                callbackFn = function (item) {
                    $.ajax({
                        type: 'POST',
                        url: '@Url.Action("GetById", "Subject")',
                        data: { 'id': item.id },
                        success: function (data) {
                            $('[name="SubjectId"]').val(data.EmpId);
                            $('[name="SubjectName"]').val(data.SubjectName);
                        }
                    });
                };

            Common.UI.ChooseWindow(title, contentUrl, callbackFn, 'Grid-@ObjectModel.Insur.OMSubject.GetRegisterId()');
        });


        $('#selectInsurCompany').click(function (e) {
            e.preventDefault();
            var contentUrl = '@Url.Action("Index", "RegistersView")' + '?registerId=InsuranceOrganizationSelectCalc&OkrugId=' + $('#OkrugId').val(),
                title = 'Выбор Страховой компании',
                    callbackFn = function (item) {
                        $.ajax({
                        type: 'POST',
                            url: '@Url.Action("GetById", "InsuranceOrganization")',
                            data: { 'id': item.id },
                            success: function (data) {
                                $('#InsuranceCompanyName').val(data.FullName);
                                $('#InsuranceId').val(data.Id);
                            }
                        });
                    };

            Common.UI.ChooseWindow(title, contentUrl, callbackFn, 'Grid-@ObjectModel.Insur.OMInsuranceOrganization.GetRegisterId()');
        });

        $('#selectObjectByUnom').on("click", function (e) {
            e.preventDefault();
            var contentUrl = '@Url.Action("Index", "RegistersView")' + '?registerId=InsurBuildingsSelect',
                title = 'Реестр МКД',
                callbackFn = function (item) {
                    fillMkdInfo(item.id);
                    $('#selectInsurCompany').css('pointer-events', 'auto');
                    $('#selectInsurCompany').removeAttr('disabled');
                    $('#selectInsurCompany').removeClass('k-state-disabled');
                };

            Common.UI.ChooseWindow(title, contentUrl, callbackFn, 'Grid-@ObjectModel.Insur.OMBuilding.GetRegisterId()');
        });

        $('#calcAgreed').on("click", function (e) {
            e.preventDefault();
            Common.ClearNotification();

            var messages = [],
                calculationId = parseInt($('form [name="Id"]').val()),
                sizeAnnualBonus = kendo.parseFloat($('#SizeAnnualBonus').text()),
                sizeAnnualBonusMonthlyBonus = kendo.parseFloat($('#SizeAnnualBonusMonthlyBonus').text()),
                subjectId = $('[name="SubjectId"]').val(),
                agreementPartMoscow = $('[name="AgreementPartMoscow"]').data('kendoNumericTextBox').value();

            var docsGrid = $('#DocumentsGrid').data('kendoGrid');
            var docsGridData = docsGrid.dataSource.data();
            var TechPassportDoc = docsGridData.find(function(x) { return x.DocTypeName === 'Технический паспорт'; });
            if (!TechPassportDoc || !TechPassportDoc.DocIsHave) {
                messages.push('Невозможно согласовать расчет, так как не прикреплен документ "Технический паспорт" в разделе "Документы от СК"');
            }
            if (@((Model.CargoElevators+Model.PassengerElevators > 0).ToString().ToLower())) {
                var ElevatorDoc = docsGridData.find(function(x) { return x.DocTypeName === 'Справка о лифтах'; });
                if (!ElevatorDoc || !ElevatorDoc.DocIsHave)
                    messages.push('Невозможно согласовать расчет, так как не прикреплен документ "Справка о лифтах" в разделе "Документы от СК"');
            }
            if ($('#FlagInsur').val() == 'false' || $('#FlagInsurCalculated').val() == 'false') {
                messages.push('Внимание! Объект не участвует в программе страхования, сохранить расчёт невозможно! Более подробно смотрите на карточке МКД.');
            }
            if (isNaN(calculationId) || calculationId <= 0) {
                messages.push('Невозможно согласовать несохраненный отчет');
            }
            if (!sizeAnnualBonus || sizeAnnualBonus == 0) {
                messages.push('Внимание! Годовая страховая премия по дому в целом должна быть заполнена');
            }
            if (!sizeAnnualBonusMonthlyBonus || sizeAnnualBonusMonthlyBonus == 0) {
                messages.push('Внимание! Ежемесячный страховой взнос по дому в целом должен быть заполнен');
            }
            if (!subjectId || subjectId.length == 0) {
                messages.push('Невозможно согласовать расчет, т.к. не заполнен Страхователь');
            }
            var passengerElevators = $('#PassengerElevators').data("kendoNumericTextBox").value();
            var cargoElevators = $('#CargoElevators').data("kendoNumericTextBox").value();
            var ui10 = $('#Ui10').data('kendoNumericTextBox').value();
            if ((( ( passengerElevators != 0 && passengerElevators != null) || (cargoElevators != 0 && cargoElevators != null) ) && (ui10 == 0 || ui10 == null)) ||
                (((passengerElevators == 0 || passengerElevators == null) && (cargoElevators == 0 || cargoElevators == null) ) && ui10 != 0 && ui10 != null)) {
                messages.push('Внимание! Несответствие кол-во лифтов и  удельного веса конструкции.');
            }

            if (messages.length > 0) {
                Common.ShowError(messages);
                return;
            }


            Common.UI.ShowConfirm({
                title: 'Подтверждение',
                content: 'Вы действительно хотите согласовать расчет?',
                onSuccess: function (e) {
                    $.ajax({
                        type: 'POST',
                        url: '@Url.Action("Agreed", "Calculation")',
                        data: { calculationId: calculationId },
                        success: function (e) {
                            if (e.Errors && e.Errors.length > 0) {
                                Common.ShowError(e.Errors);
                            } else {
                                $('[name="StatusCode"]').val(e.Data.Status);
                                changeStatus(e.Data.StatusCode);
                                $('[for="StatusDocSummary"]').text(e.Data.Status);
                                $('[name="InspectorPersonId"]').val(e.Data.InspectorPersonId);
                                $('[name="InspectorPersonFIO"]').val(e.Data.InspectorPersonFIO);
                                $('[name="InspectorPersonPost"]').val(e.Data.InspectorPersonPost);
                                $('[name="InspectorPersonDate"]').data('kendoDatePicker').value(e.Data.DateFill2);
                                $('[name="InspectorPersonDate"]').data('kendoDatePicker').readonly(false);
                            }
                            kendo.ui.progress($('body'), false);
                        }, error: function (e) {
                            Common.ShowError(e.responseText);
                            kendo.ui.progress($('body'), false);
                        }
                    });
                }
            });
        });

        // Добавление табуляции на Enter.
        function EnterTabulation() {
            var a = $("input");
            a.each(function (c, b) {
                b = $(b);
                var d = c + 1 == a.length ? a.eq(0) : a.eq(c + 1);
                b.keydown(function (a) {
                    if (13 == a.which || 9 == a.which) a.preventDefault(), d.select(), d.focus()
                })
            })
        }


        // Проверка расхождения "Предполагаемая дата начала действия страхования" с началом действия договоров в МКД
        function CheckEstimatedInsuranceStartDate() {
            var calculationId = parseInt($('form [name="Id"]').val());
            var date = $('#EstimatedInsuranceStartDate').val();
            if (date && calculationId) {
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("CheckEstimatedInsuranceStartDate", "Calculation")',
                    data: { id: calculationId, date: date },
                    success: function (data) {
                        if (data) {
                            Common.ShowError('Внимание! Существует расхождения с началом действия договоров!');
                        }
                    },
                    error: function (e) {
                        Common.ShowError('Внимание! Возникла ошибка при проверке расхождения с началом действия договоров!');
                    }
                });
            }
        }


        function changeStatus(statusCode) {
            var projectAgreementCode = @((long)CalculationStatus.ProjectAgreement);
            if (statusCode === projectAgreementCode)
                $('#DA_ProjAgreements>div').css('pointer-events', 'auto');
            else
                $('#DA_ProjAgreements>div').css('pointer-events', 'none');

            $('#printFormLoader')
                .addClass('ajax-data-loading')
                .data('param-calculationstatus', statusCode)
                .empty()
                .ajaxDataLoader();
        }

        $('#projectReceived').on("click", function (e) {
            e.preventDefault();
            Common.ClearNotification();
            var agreementId = parseInt($('form [name="AgreementId"]').val());
            if (isNaN(agreementId) || agreementId <= 0) {
                Common.ShowError('Невозможно получить несохраненный проект договора');
                return;
            }

            Common.UI.ShowConfirm({
                title: 'Подтверждение',
                content: 'Вы действительно хотите подтвердить получение проекта договора?',
                onSuccess: function (e) {
                    kendo.ui.progress($('body'), true);
                    $.ajax({
                        type: 'POST',
                        url: '@Url.Action("ProjectReceived", "Calculation")',
                        data: { agreementId: agreementId },
                        success: function (e) {
                            if (e.Errors && e.Errors.length > 0) {
                                Common.ShowError(e.Errors);
                            } else {
                                $('[name="StatusCode"]').val(e.Data.Status);
                                changeStatus(e.Data.StatusCode);
                                $('[for="StatusDocSummary"]').text(e.Data.Status);
                                $('[name="AgreementGotDate"]').data('kendoDatePicker').value(e.Data.AgreementGotDate);
                                $('[name="AgreementGotUserName"]').val(e.Data.AgreementGotUserName);
                                $('[name="AgreementGotUserId"]').val(e.Data.AgreementGotUserId);
                                $('[name="AgreementGotUserPost"]').val(e.Data.AgreementGotUserPost);
                                $('#draftContractsTerms').show();
                                $('#AgreementProjectCategoriesGrid').data('kendoGrid').dataSource.read();

                                $('[name="AgreementGotDate"]').attr('editMode', 'true');
                                $('[name="AgreementGotUserName"]').attr('editMode', 'true');
                                $('[name="AgreementGotUserPost"]').attr('editMode', 'true');
                                $('[name="AgreementPartMoscow"]').attr('editMode', 'true');
                                $('[name="ProgectNum"]').attr('editMode', 'true');
                                $('[name="AgreementCommentSpravka"]').attr('editMode', 'true');
                                $('[name="AgreementResumeSpravka"]').attr('editMode', 'true');
                                $('[name="AgreementNote"]').attr('editMode', 'true');
                                $('[name="projectAgreed"]').attr('editMode', 'true');
                                KendoExtension.ToggleEditMode(true);
                            }
                            kendo.ui.progress($('body'), false);
                        }, error: function (e) {
                            Common.ShowError(e.responseText);
                            kendo.ui.progress($('body'), false);
                        }
                    });
                }
            });
        });

        $('#projectAgreed').on('click', function (e) {
            e.preventDefault();
            Common.ClearNotification();

            if (!projectAgreedValidate())
                return;
            projectAgreedConfirmPartMoscow();
        });

        function projectAgreedConfirmPartMoscow() {
            var agreementPartMoscow = $('[name="AgreementPartMoscow"]').data('kendoNumericTextBox').value();
            if (!agreementPartMoscow) {
                Common.UI.ShowConfirm({
                    title: 'Подтверждение',
                    content: 'Внимание! Доля города не заполнена или равна 0, вы подтверждаете согласование проекта договора?',
                    onSuccess: projectAgreedConfirmProject
                });
            } else {
                projectAgreedConfirmProject();
            }
        }

        function projectAgreedConfirmProject() {
            var docsGrid = $('#DocumentsGrid').data('kendoGrid');
            var docsGridData = docsGrid.dataSource.data();
            var PolisDoc = docsGridData.find(function(x) { return x.DocTypeName === 'Проект полиса'; });
            var StrahDoc = docsGridData.find(function(x) { return x.DocTypeName === 'Заявление о страховании'; });
            var noPolisDoc = !PolisDoc || !PolisDoc.DocIsHave;
            var noStrahDoc = !StrahDoc || !StrahDoc.DocIsHave;
            if (noPolisDoc && noStrahDoc) {
                Common.UI.ShowConfirm({
                    title: 'Подтверждение',
                    content: 'Обратите внимание! В разделе "Документы от СК" не прикреплены документы "Проект полиса" и/или "Заявление о страховании". Продолжить?',
                    onSuccess: projectAgreedConfirm
                });
            } else {
                projectAgreedConfirm();
            }
        }

        function projectAgreedConfirm() {
            Common.UI.ShowConfirm({
                title: 'Подтверждение',
                content: 'Вы действительно хотите согласовать проект договора?',
                onSuccess: projectAgreed
            });
        }

        function projectAgreedValidate() {
            var messages = [],
                agreementId = parseInt($('#AgreementId').val()),
                progectNum = $('[name="ProgectNum"]').val(),
                projectPolis = $('#DocumentsGrid').data('kendoGrid').dataItem($('#DocumentsGrid tr:has(td:contains("Проект полиса"))')),
                agreementProjectCategoriesGridData = $('#AgreementProjectCategoriesGrid').data('kendoGrid'),
                estimatedInsuranceStartDate = $('#EstimatedInsuranceStartDate').data('kendoDatePicker').value();

            if (isNaN(agreementId) || agreementId <= 0) {
                messages.push('Невозможно согласовать несохраненный проект договора');
            }
            if (!progectNum || progectNum.length == 0) {
                messages.push('Внимание! Невозможно согласовать проект договора, не введен Номер проекта договора');
            }
            if (!projectPolis || projectPolis.DocIsHave != true) {
                //messages.push('Внимание! Невозможно согласовать проект договора, не прикреплен проект полиса в разделе "Документы от СК"');
            }
            if (agreementProjectCategoriesGridData) {
                var items = agreementProjectCategoriesGridData.dataItems();
                if (!items.some(function(x) { return x.Type !== 0 && !x.Excluded; }))
                    messages.push('Невозможно согласовать расчет, т.к. не выбрано ни одной категории объекта');
            }
            if (estimatedInsuranceStartDate == null) {
                messages.push('Внимание! Невозможно согласовать проект договора, не введена предполагаемая дата начала действия страхования');
            }

            if (messages.length > 0) {
                Common.ShowError(messages);
                return false;
            }
            return true;
        }

        function projectAgreed() {
            toolbarSaveClick(function () {
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("ProjectAgreed", "Calculation")',
                    data: { agreementId: parseInt($('#AgreementId').val()) },
                    success: function (e) {
                        if (e.Errors && e.Errors.length > 0) {
                            Common.ShowError(e.Errors);
                        } else {
                            $('[name="StatusCode"]').val(e.Data.Status);
                            changeStatus(e.Data.StatusCode);
                            $('[for="StatusDocSummary"]').text(e.Data.Status);
                            $('[name="AgreementApprovalDate"]').data('kendoDatePicker').value(e.Data.AgreementApprovalDate);
                            $('[name="AgreementApprovalUserName"]').val(e.Data.AgreementApprovalUserName);
                            $('[name="AgreementApprovalUserId"]').val(e.Data.AgreementApprovalUserId);
                            $('[name="AgreementApprovalUserPost"]').val(e.Data.AgreementApprovalUserPost);

                            $('[name="AgreementApprovalDate"]').attr('editMode', 'true');
                            $('[name="AgreementApprovalUserName"]').attr('editMode', 'true');
                            $('[name="AgreementApprovalUserPost"]').attr('editMode', 'true');
                            KendoExtension.ToggleEditMode(true);
                        }
                        kendo.ui.progress($('body'), false);
                    }, error: function (e) {
                        Common.ShowError(e.responseText);
                        kendo.ui.progress($('body'), false);
                    }
                });
            });
        }

        $('#AgreementProjectCategoriesGrid').kendoGrid({
            selectable: 'cell',
            scrollable: false,
            editable: 'incell',
            columns: [
                {
                    title: 'Номер категории',
                    field: 'Type',
                    hidden: true
                },
                {
                    title: 'Категория',
                    field: 'Name'
                },
                {
                    title: 'Страховая стоимость',
                    field: 'TotalCost',
                    template: KendoExtension.TemplateDecimal('TotalCost'),
                    attributes: {
                        "class": "text-right"
                    }
                },
                {
                    title: 'Страховая сумма',
                    field: 'DesignCost',
                    template: KendoExtension.TemplateDecimal('DesignCost'),
                    attributes: {
                        "class": "text-right"
                    }
                },
                {
                    title: 'Базовый страховой тариф, %',
                    field: 'Baserate',
                    template: KendoExtension.TemplateDecimal('Baserate'),
                    attributes: {
                        "class": "text-right"
                    }
                },
                {
                    title: 'Годовая страховая премия',
                    field: 'Annualprem',
                    template: KendoExtension.TemplateDecimal('Annualprem'),
                    attributes: {
                        "class": "text-right #:Type==0?'k-grid-opl':''#"
                    },
                    editor: KendoExtension.EditorDecimal
                },
                {
                    title: 'Ежемесячный страховой взнос',
                    field: 'Monthlyprem',
                    template: KendoExtension.TemplateDecimal('Monthlyprem'),
                    attributes: {
                        "class": "text-right #:Type==0?'k-grid-opl':''#"
                    }
                },
                {
                    title: '',
                    template:
'#if (Type != 0) {' +
    'if (Excluded === false) {' +
        '#<button class="exclude-command k-button"><span class="k-icon k-i-plus" style="font-weight:bold"></span></button>#' +
    '} else {' +
        '#<button class="include-command k-button"><span class="k-icon k-i-minus"></span>#' +
    '}' +
'}#',
                    width: 100
                }
            ],
            dataSource: {
                transport: {
                    read: {
                        url: '@Url.Action("AgreementProjectCategoriesList", "Calculation")',
                        data: { calculationId: kendo.parseInt($('form > input[name="Id"]').val()) },
                        contentType: 'application/json; charset=utf-8',
                        dataType: 'json'
                    }
                },
                schema: {
                    model: {
                        id: 'Type',
                        fields: {
                            Type: { type: 'number', editable: false },
                            Name: { type: 'string', editable: false },
                            TotalCost: { type: 'number', editable: true },
                            Annualprem: { type: 'number', editable: true },
                            DesignCost: { type: 'number', editable: true },
                            Monthlyprem: { type: 'number', editable: true },
                            Excluded: { type: 'boolean', editable: true }
                        }
                    }
                }
            },
            beforeEdit: function (e) {
                var cell = this.select(),
                    annualpremColumnIndex = this.element.find('th[data-field="Annualprem"]').index();
                if (cell.length > 0) {
                    var cellIndex = cell[0].cellIndex,
                        rowIndex = $(cell[0]).closest('tr').index(),
                        isReadOnly = $('#IsReadOnly').val().toLowerCase() == 'true';

                    if (isReadOnly || rowIndex !== 3 || annualpremColumnIndex !== cellIndex) {
                        e.preventDefault();
                    }
                }
            },
            save: function (e) {
                var agreementId = kendo.parseInt($('form [name="AgreementId"]').val()),
                    sizeBonusMkd = e.values['Annualprem'];
                if (sizeBonusMkd !== undefined) {
                    if (agreementId == null) {
                        Common.ShowError('Невозможно обновить несохраненный проект договора');
                        return;
                    }

                    kendo.ui.progress($('body'), true);

                    $.ajax({
                        type: 'POST',
                        url: '@Url.Action("UpdateAgreementSizeBonusMkd", "Calculation")',
                        data: { agreementId: agreementId, sizeBonusMkd: kendo.toString(sizeBonusMkd, 'n2') },
                        dataType: 'json',
                        success: function (e) {
                            kendo.ui.progress($('body'), false);
                            if (e.Errors && e.Errors.length > 0) {
                                Common.ShowError(e.Errors.join('<br>'));
                            } else {
                                recalcCalculationValuesWithoutInsurCosts(false);
                            }
                        }
                    });
                }
            }
        }).data('kendoGrid');

        $('#AgreementProjectCategoriesGrid').on('click', 'tbody > tr > td > button.exclude-command', function (e) {
            e.preventDefault();
            var isReadOnly = $('#IsReadOnly').val().toLowerCase() == 'true';

            if (!isReadOnly) {
                updateAgreementProjectCategory($(this).closest('tr'), false);
            }
        });

        $('#AgreementProjectCategoriesGrid').on('click', 'tbody > tr > td > button.include-command', function (e) {
            e.preventDefault();
            var isReadOnly = $('#IsReadOnly').val().toLowerCase() == 'true';

            if (!isReadOnly) {
                updateAgreementProjectCategory($(this).closest('tr'), true);
            }
        });

        $('#AgreementProjectCategoriesGrid').addClass('k-grid-dirty-disabled');

        //CIPJS-52 По факту заполнения/изменения полей : Общая площадь по зданию ( включая холодные помещения), кв.м и /или Расчетная площадь,
        //для определения страховой стоимости общего имущества в МКД, кв.м
        $('#StroiPrice').data('kendoNumericTextBox').bind('change', function () {
            recalcCalculationValues();
        });
        $('#Pizn').data('kendoNumericTextBox').bind('change', function () {
            recalcCalculationValues();
        });
        $('#Opl').data('kendoNumericTextBox').bind('change', function () {
            recalcCalculationValues();
        });
        $('#OplBti').data('kendoNumericTextBox').bind('change', function () {
            recalcCalculationValues();
        });
        $('#OplEgrn').data('kendoNumericTextBox').bind('change', function () {
            recalcCalculationValues();
        });
        $('#Bpl').data('kendoNumericTextBox').bind('change', function () {
            recalcCalculationValues();
        });
        $('#Lpl').data('kendoNumericTextBox').bind('change', function () {
            recalcCalculationValues();
        });
        $('#Epl').data('kendoNumericTextBox').bind('change', function () {
            recalcCalculationValues();
        });

        $('#Oplc').data('kendoNumericTextBox').bind('change', function () {
            recalcCalculationValues({
                Oplc: this.value()
            });
        });
        $('#CalculatedArea').data('kendoNumericTextBox').bind('change', function () {
            recalcCalculationValues({
                Oplc: $('#Oplc').data('kendoNumericTextBox').value(),
                CalculatedArea: this.value()
            });
        });
        $('#IndicatorR').data('kendoNumericTextBox').bind('change', function () {
            recalcCalculationValues({
                Oplc: $('#Oplc').data('kendoNumericTextBox').value(),
                CalculatedArea: $('#CalculatedArea').data('kendoNumericTextBox').value(),
                IndicatorR: this.value()
            });
        });
        $('#ActualCost').data('kendoNumericTextBox').bind('change', function () {
            recalcCalculationValues({
                Oplc: $('#Oplc').data('kendoNumericTextBox').value(),
                CalculatedArea: $('#CalculatedArea').data('kendoNumericTextBox').value(),
                IndicatorR: $('#IndicatorR').data('kendoNumericTextBox').value(),
                ActualCost: this.value()
            });
        });
        $('#CoefActualCost').data('kendoNumericTextBox').bind('change', function () {
            recalcCalculationValues({
                Oplc: $('#Oplc').data('kendoNumericTextBox').value(),
                CalculatedArea: $('#CalculatedArea').data('kendoNumericTextBox').value(),
                IndicatorR: $('#IndicatorR').data('kendoNumericTextBox').value(),
                ActualCost: $('#ActualCost').data('kendoNumericTextBox').value()
            });
        });
        $('#ActualCostCurrent').data('kendoNumericTextBox').bind('change', function () {
            recalcCalculationValues({
                Oplc: $('#Oplc').data('kendoNumericTextBox').value(),
                CalculatedArea: $('#CalculatedArea').data('kendoNumericTextBox').value(),
                IndicatorR: $('#IndicatorR').data('kendoNumericTextBox').value(),
                ActualCost: $('#ActualCost').data('kendoNumericTextBox').value(),
                ActualCostCurrent: this.value()
            });
        });

        $('[name="FlagOkrugl"]').bind('change', function () {
            var indicatorR = $('#IndicatorR').data('kendoNumericTextBox'),
                format = this.checked == true ? 'n2' : 'n10',
                decimals = this.checked == true ? 2 : 10;

            indicatorR.setOptions({ decimals: decimals, format: format });

            recalcCalculationValues({
                Oplc: $('#Oplc').data('kendoNumericTextBox').value(),
                CalculatedArea: $('#CalculatedArea').data('kendoNumericTextBox').value(),
                ActualCost: $('#ActualCost').data('kendoNumericTextBox').value(),
                ActualCostCurrent: $('#ActualCostCurrent').data('kendoNumericTextBox').value()
            }, false);
        });

        var panelbar = $('#ls_panelbar').kendoPanelBar().data('kendoPanelBar');
        panelbar.expand('li');

        $('.static-nav a').on('click', function (e) {
            e.preventDefault();
            var elementId = $(e.target).attr('href');
            if (elementId && $(elementId).offset()) {
                $('html,body').animate({ scrollTop: $(elementId).offset().top - 9 }, 500);
            }
        });

        var toolbar = $("#toolbar").kendoToolBar({
            items: [
@if (SRDSession.Current.CheckAccessToFunction(ObjectModel.SRD.SRDCoreFunctions.INSUR_COMMPROP_CALC_WRITE))
{
                    <text>{
                            type: 'button',
                            id: 'buttonSave',
                            text: '',
                            click: function() {
                                    var statusCode = $('#StatusCode').val();
                                    if (statusCode === 'Согласован проект договора' || statusCode === 'Согласован расчет') {
                                        Common.UI.ShowConfirm({
                                            title: 'Подтверждение',
                                            content: 'Внимание! Расчет находится в статусе "' + statusCode + '", Вы уверены что требуется внесение изменений?',
                                            onSuccess: function() { toolbarSaveClick(); }
                                        });
                                    } else {
                                        toolbarSaveClick();
                                    }
                            },
                            icon: 'save',
                            overflow: 'never',
                            hidden: true
                        },
                        {
                            type: 'button',
                            id: 'buttonEdit',
                            text: '',
                            click: function() {
                                    var statusCode = $('#StatusCode').val();
                                    if (statusCode === 'Согласован проект договора') {
                                        Common.UI.ShowConfirm({
                                        title: 'Подтверждение',
                                        content: 'Внимание! Расчет находится в статусе "' + statusCode + '", Вы уверены что требуется внесение изменений?',
                                        onSuccess: function() {
                                                KendoExtension.ToggleEditMode(true);
                                                toolbar.hide($('#buttonEdit'));
                                                toolbar.show($('#buttonSave'));
                                                $('#IsReadOnly').val(false);
                                                if ($('#DocumentsGrid').data('kendoGrid')) {
                                                    $('#DocumentsGrid').data('kendoGrid').element.find('input.doc-is-have-checkbox').attr('disabled', '');
                                                }
                                            }
                                        });
                                    } else {
                                        KendoExtension.ToggleEditMode(true);
                                        toolbar.hide($('#buttonEdit'));
                                        toolbar.show($('#buttonSave'));
                                        $('#IsReadOnly').val(false);
                                        if ($('#DocumentsGrid').data('kendoGrid')) {
                                            $('#DocumentsGrid').data('kendoGrid').element.find('input.doc-is-have-checkbox').attr('disabled', '');
                                        }
                                    }
                            },
                            icon: 'edit',
                            overflow: 'never'
                        },</text>
}
                        {
                        type: 'button',
                        imageUrl: '/images/audit.png',
                        id: 'audit',
                        hidden: false,
                        click: function () {
                                var wndReferenceDetails = $("#wndReferenceDetails").kendoWindow({
                                    resizable: false,
                                    draggable: false,
                                    actions: ["Close"],
                                    modal: true,
                                    content: "/ReferenceDetails/Index?objectId=" + @Model.Id + "&registerId=312"
                                });

                                wndReferenceDetails.data("kendoWindow").open().maximize();
                            }
                        }
                    ]
        }).data('kendoToolBar');

        @if (Model.Id == -1)
        {<text>
        $('#buttonEdit').trigger('click');
        </text>}

        $('#toolbar').kendoTooltip({
        filter: "a.k-button",
            content: function (e) {
                switch ($(e.target).attr('id')) {
                    case "buttonEdit":
                        return "Редактировать";
                    case "buttonSave":
                        return "Сохранить";
                    case "audit":
                        return "Аудит";
                    case "print":
                        return "Печать";
                }
            },
            position: "top",
            autoHide: true,
            showAfter: 500
        });

        $('#BtiPremiseExportExcel').on('click', function (e) {
            e.preventDefault();
            var objId = kendo.parseInt($('#ObjId').val());
            if (objId == null) {
                return false;
            }

            var newWindow = window.open(btiPremiseExportExcel + '?id=' + objId, '_blank');
            newWindow.focus();
        });

        updateAgreementButtons();

        updateKolGpStyle();

        updateHplStyle();

        var ui11Control = $('#Ui11').data('kendoNumericTextBox');

        if (ui11Control) {
            var ui11Value = ui11Control.value();
            updateTotalWeightError(ui11Value != null && ui11Value != 100);
        }
        });

    // Проверка даты согласования расчета.
    function HasInspectorPersonDate() {
        return $('[name="InspectorPersonDate"]').data('kendoDatePicker').value();
    };

    function CheckProgectNum(callbackFn) {
        var value = $('[name="ProgectNum"]').val();

        if (value && value.length > 0) {
            $.ajax({
                type: 'POST',
                url: '@Url.Action("CheckProgectNum", "Calculation")',
                data: { number: value, id: $('[name="Id"]').val() },
                success: function (e) {
                    if (e.Errors && e.Errors.length > 0) {
                        callbackFn(e.Errors)
                    } else if (e.Data == 1) {
                        callbackFn('Внимание! Такой номер договора уже присутствует в Системе!')
                    }
                    callbackFn(undefined);
                },
                error: function () {
                    callbackFn(e.responseText);
                }
            });
        } else {
            callbackFn(undefined);
        }
    }

    function fillMkdInfo(id) {
        if (id) {
            kendo.ui.progress($('body'), true);

            $.ajax({
                type: 'POST',
                url: '@Url.Action("GetBuildingWithInsurance", "Building")',
                data: { 'id': id },
                success: function (data) {
                    if (data && data.building) {
                        $('#OkrugId').val(data.building.OkrugId);

                        $('#ObjId').val(data.building.Id);
                        $('#Unom').data("kendoAutoComplete").value(data.building.Unom);
                        $('#Address').val(data.building.AddressFiasMkd);
                        $('#YearBuild').data("kendoNumericTextBox").value(data.building.YearStroi);
                        $('#CountFloor').data("kendoNumericTextBox").value(data.building.CountFloor);
                        $('#KolGp').data("kendoNumericTextBox").value(data.building.KolGp);
                        $('#Opl').data("kendoNumericTextBox").value(data.building.Opl);
                        $('#OplBti').data("kendoNumericTextBox").value(data.oplBti);
                        $('#OplEgrn').data("kendoNumericTextBox").value(data.oplEgrn);
                        $('#PassengerElevators').data("kendoNumericTextBox").value(data.building.Lfpq);
                        $('#CargoElevators').data("kendoNumericTextBox").value(data.building.Lfgpq);
                        $('#Lpl').data("kendoNumericTextBox").value(data.building.Lpl);
                        $('#Bpl').data("kendoNumericTextBox").value(data.building.Bpl);
                        $('#Hpl').data("kendoNumericTextBox").value(data.building.Hpl);
                        $('#Krovpl').data("kendoNumericTextBox").value(data.building.Krovpl);
                        $('#StroiPrice').data("kendoNumericTextBox").value(data.building.StroiPrice);
                        $('#Epl').data("kendoNumericTextBox").value(data.btiBuildingOverallArea);

                        var flagInsur = data.building.FlagInsur ? data.building.FlagInsur.toString().toLowerCase() : 'false';
                        flagInsur = flagInsur === 'true' ? '' : 'false';
                        $('#FlagInsur').val(flagInsur);
                        var flagInsurCalculated = data.building.FlagInsurCalculated ? data.building.FlagInsurCalculated.toString().toLowerCase() : 'false';
                        flagInsurCalculated = flagInsurCalculated === 'true' ? '' : 'false';
                        $('#FlagInsurCalculated').val(flagInsurCalculated);
                        if (flagInsur === 'false' || flagInsurCalculated === 'false')
                            Common.ShowError('Внимание! Объект не участвует в программе страхования, сохранить расчёт невозможно! Более подробно смотрите на карточке МКД.');

                        if (data.insurance) {
                            var insuranceId = parseInt(data.insurance.Id);
                            if (!isNaN(insuranceId) && insuranceId > 0) {
                                $('#InsuranceCompanyName').val(data.insurance.Name);
                                $('#InsuranceId').val(data.insurance.Id);
                            }
                        }

                        recalcCalculationValues();

                        updateKolGpStyle();

                        $.ajax({
                            type: 'POST',
                            url: '@Url.Action("GetNumber", "Calculation")',
                            data: { objId: data.building.Id },
                            success: function (data) {
                                $('#PackageNum').val(data.Data);
                                kendo.ui.progress($('body'), false);
                            }
                        });
                    }
                }
            });
        }
    }

    function valid(callbackFn) {
        Common.ClearNotification();
        var messages = [];

        if ($('#FlagInsur').val() === 'false' || $('#FlagInsurCalculated').val() === 'false') {
            messages.push('Внимание! Объект не участвует в программе страхования, сохранить расчёт невозможно! Более подробно смотрите на карточке МКД.');
        }

        CheckProgectNum(function(e) {
            if (e) {
                if (Array.isArray(e)) messages = messages.concat(e);
                else messages.push(e);
            }

            if (messages.length > 0) {
                Common.ShowError(messages);
                kendo.ui.progress($('body'), false);
            } else {
                callbackFn();
            }
        });
    }

    function toolbarSaveClick(callbackFn) {
        kendo.ui.progress($('body'), true);
        valid(function () {
            var form = $('form'),
                formObject = Common.Functions.FormToObject(form);

            formObject.TotalCost1 = kendo.toString($('#TotalCost1').text(), 'n2');
            formObject.DesignCost1 = kendo.toString($('#DesignCost1').text(), 'n2');
            formObject.BasicRate1 = kendo.toString($('#BasicRate1').text(), 'n2');
            formObject.AnnualBonus1 = kendo.toString($('#AnnualBonus1').text(), 'n2');
            formObject.TotalCost2 = kendo.toString($('#TotalCost2').text(), 'n2');
            formObject.DesignCost2 = kendo.toString($('#DesignCost2').text(), 'n2');
            formObject.BasicRate2 = kendo.toString($('#BasicRate2').text(), 'n2');
            formObject.AnnualBonus2 = kendo.toString($('#AnnualBonus2').text(), 'n2');
            formObject.TotalCost3 = kendo.toString($('#TotalCost3').text(), 'n2');
            formObject.DesignCost3 = kendo.toString($('#DesignCost3').text(), 'n2');
            formObject.BasicRate3 = kendo.toString($('#BasicRate3').text(), 'n2');
            formObject.AnnualBonus3 = kendo.toString($('#AnnualBonus3').text(), 'n2');
            formObject.SizeAnnualBonus = kendo.toString($('#SizeAnnualBonus').text(), 'n2');

            $.ajax({
                type: form.attr('method'),
                url: form.attr('action'),
                data: formObject,
                success: function (response) {
                    if (response.Data != null && response.Data.Errors != null && response.Data.Errors.length > 0) {
                        var errorFieldLabels = [];

                        form.find('.field-validation-valid').each(function (index, field) {
                            var jField = $(field);
                            var message = '';

                            if (response.Data.Errors) {
                                for (var i = 0; i < response.Data.Errors.length; i++) {
                                    if (response.Data.Errors[i].Control == jField.attr('data-valmsg-for')) {
                                        message = response.Data.Errors[i].Message;
                                        break;
                                    }
                                }
                            }

                            jField.text(message);
                        });

                        for (var i = 0; i < response.Data.Errors.length; i++) {
                            var errorFieldLabel = form.find('label[for="' + response.Data.Errors[i].Control + '"]');
                            if (errorFieldLabel.length > 0) {
                                errorFieldLabels.push(errorFieldLabel.text());
                            }
                        }

                        Common.ShowError('Некорректно заполнены поля' + (errorFieldLabels.length > 0 ? ':<br/>' + errorFieldLabels.join('<br/>') : ''));
                        kendo.ui.progress($('body'), false);
                        return;
                    }

                    if (response.Errors && response.Errors.length > 0) {
                        for (var i = 0; i < response.Errors.length; i++) {
                            Common.ShowError(response.Errors[i]);
                        }
                    } else {
                        if (response.Data.id) {
                            //Common.Functions.UpdateTabCaption(@Model.Id, '@Url.Action("GetTabCaptions", "ObjectCard")');
                            //РСМRSMSUPPORT-736 При создании отчета об исполнении нужно к нему сразу переходить
                            if (window.parent) {
                                var kendoWindow = window.parent.$('.k-widget.k-window:visible .k-window-content.k-content.k-window-iframecontent').data('kendoWindow');
                                if (kendoWindow) {
                                    window.parent.open('@Url.Action("Index", "ObjectCard")?ObjId=' + response.Data.id + '&RegisterViewId=InsurCalculations&isVertical=true&useMasterPage=true', '_blank');
                                    kendoWindow.close();
                                }
                            }
                            $('form [name="Id"]').attr('value', response.Data.id);
                        }

                        if (response.Data.agreementProjectId) {
                            $('form [name="AgreementId"]').attr('value', response.Data.agreementProjectId);
                        }

                        $('#DocumentsGrid').data('kendoGrid').saveChanges();
                        updateAgreementButtons();

                        Common.ShowMessage('Операция успешно выполнена');
                    }

                    if (callbackFn) {
                        callbackFn();
                    } else {
                        kendo.ui.progress($('body'), false);
                    }
                }, error: function (response) {
                    Common.ShowError(response.responseText);
                    kendo.ui.progress($('body'), false);
                }
            });
        });
    }

    function updateAgreementButtons() {
        var calculationId = parseInt($('form [name="Id"]').val());

        if (!isNaN(calculationId) && calculationId > 0) {
            if (!($('#InspectorPersonDate').val() && $('#InspectorPersonFIO').val()))
                $('#calcAgreed').css('pointer-events', '').data('kendoButton').enable(true);
            if (!($('#AgreementGotDate').val() && $('#AgreementGotUserName').val()))
                $('#projectReceived').css('pointer-events', '').data('kendoButton').enable(true);
            if (!($('#AgreementApprovalDate').val() && $('#AgreementApprovalUserName').val()))
                $('#projectAgreed').css('pointer-events', '').data('kendoButton').enable(true);
        }
        else {
            $('#calcAgreed').data('kendoButton').enable(false);
            $('#projectReceived').data('kendoButton').enable(false);
            $('#projectAgreed').data('kendoButton').enable(false);
        }
    }

    function updateAgreementProjectCategory(rowElement, include) {
        Common.ClearNotification();
        var agreementProjectCategoriesGrid = $('#AgreementProjectCategoriesGrid').data('kendoGrid');

        if (!agreementProjectCategoriesGrid) {
            return;
        }

        var agreementId = kendo.parseInt($('form [name="AgreementId"]').val());
        if (agreementId == null) {
            Common.ShowError('Невозможно обновить несохраненный проект договора');
            return;
        }

        var dataItem = agreementProjectCategoriesGrid.dataItem(rowElement);

        if (!dataItem) {
            Common.ShowError('Не удалось определить редактируемую запись');
            return;
        }

        kendo.ui.progress($('body'), true);

        $.ajax({
            type: 'POST',
            url: '@Url.Action("UpdateAgreementProjectCategory", "Calculation")',
            data: { agreementId: agreementId, type: dataItem.Type, include: include },
            success: function (e) {
                kendo.ui.progress($('body'), false);
                if (e.Errors && e.Errors.length > 0) {
                    Common.ShowError(e.Errors.join('<br>'));
                } else {
                    dataItem.set('Excluded', !include);
                    recalcCalculationValuesWithoutInsurCosts(true);
                }
            }
        });
    }

    function getCalculationInData(additionalData, recalcSizeBonusMkd) {
        var flagOkruglControl = $('[name="FlagOkrugl"]'),
            oplControl = $('#Opl').data('kendoNumericTextBox'),
            oplBtiControl = $('#OplBti').data('kendoNumericTextBox'),
            oplEgrnControl = $('#OplEgrn').data('kendoNumericTextBox'),
            bplControl = $('#Bpl').data('kendoNumericTextBox'),
            lplControl = $('#Lpl').data('kendoNumericTextBox')
            eplControl = $('#Epl').data('kendoNumericTextBox'),
            krovplControl = $('#Krovpl').data('kendoNumericTextBox'),
            hplControl = $('#Hpl').data("kendoNumericTextBox"),
            stroiPriceControl = $('#StroiPrice').data('kendoNumericTextBox'),
            piznControl = $('#Pizn').data('kendoNumericTextBox'),
            coefActualCostControl = $('#CoefActualCost').data('kendoNumericTextBox'),
            ui1Control = $('#Ui1').data('kendoNumericTextBox'),
            ui2Control = $('#Ui2').data('kendoNumericTextBox'),
            ui3Control = $('#Ui3').data('kendoNumericTextBox'),
            ui4Control = $('#Ui4').data('kendoNumericTextBox'),
            ui5Control = $('#Ui5').data('kendoNumericTextBox'),
            ui6Control = $('#Ui6').data('kendoNumericTextBox'),
            ui7Control = $('#Ui7').data('kendoNumericTextBox'),
            ui8Control = $('#Ui8').data('kendoNumericTextBox'),
            ui9Control = $('#Ui9').data('kendoNumericTextBox'),
            ui10Control = $('#Ui10').data('kendoNumericTextBox'),
            partCompensationControl = $('#PartCompensation').data('kendoNumericTextBox'),
            agreementPartMoscowControl = $('[name="AgreementPartMoscow"]').data('kendoNumericTextBox'),
            basicRate1Control = $('#BasicRate1'),
            basicRate2Control = $('#BasicRate2'),
            basicRate3Control = $('#BasicRate3'),
            kolGpControl = $('#KolGp').data('kendoNumericTextBox'),
            agreementIdControl = $('form [name="AgreementId"]'),
            oplcIncludeHplControl = $('#OplcIncludeHpl'),
            calculatedAreaIncludeHplControl = $('#CalculatedAreaIncludeHpl'),
            data = {};

        if (flagOkruglControl.length > 0) {
            data.FlagOkrugl = flagOkruglControl.is(':checked');
        }
        if (oplControl) {
            data.Opl = oplControl.value();
        }
        if (oplBtiControl) {
            data.OplBti = oplBtiControl.value();
        }
        if (oplEgrnControl) {
            data.OplEgrn = oplEgrnControl.value();
        }
        if (bplControl) {
            data.Bpl = bplControl.value();
        }
        if (lplControl) {
            data.Lpl = lplControl.value();
        }
        if (eplControl) {
            data.Epl = eplControl.value();
        }
        if (krovplControl) {
            data.Krovpl = krovplControl.value();
        }
        if (hplControl) {
            data.Hpl = hplControl.value();
        }
        if (stroiPriceControl) {
            data.StroiPrice = stroiPriceControl.value();
        }
        if (piznControl) {
            data.Pizn = piznControl.value();
        }
        if (coefActualCostControl) {
            data.CoefActualCost = coefActualCostControl.value();
        }
        if (ui1Control) {
            data.Ui1 = ui1Control.value();
        }
        if (ui2Control) {
            data.Ui2 = ui2Control.value();
        }
        if (ui3Control) {
            data.Ui3 = ui3Control.value();
        }
        if (ui4Control) {
            data.Ui4 = ui4Control.value();
        }
        if (ui5Control) {
            data.Ui5 = ui5Control.value();
        }
        if (ui6Control) {
            data.Ui6 = ui6Control.value();
        }
        if (ui7Control) {
            data.Ui7 = ui7Control.value();
        }
        if (ui8Control) {
            data.Ui8 = ui8Control.value();
        }
        if (ui9Control) {
            data.Ui9 = ui9Control.value();
        }
        if (ui10Control) {
            data.Ui10 = ui10Control.value();
        }
        if (partCompensationControl) {
            data.PartCompensation = partCompensationControl.value();
        }
        if (agreementPartMoscowControl) {
            data.AgreementPartMoscow = agreementPartMoscowControl.value();
        }
        if (basicRate1Control.length > 0) {
            data.BasicRate1 = kendo.parseFloat(basicRate1Control.text());
        }
        if (basicRate2Control.length > 0) {
            data.BasicRate2 = kendo.parseFloat(basicRate2Control.text());
        }
        if (basicRate3Control.length > 0) {
            data.BasicRate3 = kendo.parseFloat(basicRate3Control.text());
        }
        if (kolGpControl) {
            data.KolGp = kolGpControl.value();
        }
        if (agreementIdControl.length > 0) {
            data.AgreementId = kendo.parseInt(agreementIdControl.val())
        }

        data.OplcIncludeHpl = oplcIncludeHplControl.val();
        data.CalculatedAreaIncludeHpl = calculatedAreaIncludeHplControl.val();

        //добавляем в параметры данные, которые мы можем ввести вручную
        if (additionalData != undefined && additionalData != null) {
            for (var key in additionalData) {
                data[key] = additionalData[key];
                data[key + 'Set'] = true;
            }
        }

        data.RecalcSizeBonusMkd = recalcSizeBonusMkd;

        return data;
    }

    function setCalculationOutData(data) {
        var oplcControl = $('#Oplc').data('kendoNumericTextBox'),
            calculatedAreaControl = $('#CalculatedArea').data('kendoNumericTextBox'),
            indicatorRControl = $('#IndicatorR').data('kendoNumericTextBox'),
            actualCostControl = $('#ActualCost').data('kendoNumericTextBox'),
            actualCostCurrentControl = $('#ActualCostCurrent').data('kendoNumericTextBox'),
            ci1Control = $('#Ci1'),
            ci2Control = $('#Ci2'),
            ci3Control = $('#Ci3'),
            ci4Control = $('#Ci4'),
            ci5Control = $('#Ci5'),
            ci6Control = $('#Ci6'),
            ci7Control = $('#Ci7'),
            ci8Control = $('#Ci8'),
            ci9Control = $('#Ci9'),
            ci10Control = $('#Ci10'),
            cim1Control = $('#Cim1'),
            cim2Control = $('#Cim2'),
            cim3Control = $('#Cim3'),
            cim4Control = $('#Cim4'),
            cim5Control = $('#Cim5'),
            cim6Control = $('#Cim6'),
            cim7Control = $('#Cim7'),
            cim8Control = $('#Cim8'),
            cim9Control = $('#Cim9'),
            cim10Control = $('#Cim10'),
            ui11Control = $('#Ui11').data('kendoNumericTextBox'),
            ci11Control = $('#Ci11'),
            cim11Control = $('#Cim11'),
            totalCost1CategoryControl = $('#TotalCost1'),
            totalCost2CategoryControl = $('#TotalCost2'),
            totalCost3CategoryControl = $('#TotalCost3'),
            designCost1CategoryControl = $('#DesignCost1'),
            designCost2CategoryControl = $('#DesignCost2'),
            designCost3CategoryControl = $('#DesignCost3'),
            annualBonus1CategoryControl = $('#AnnualBonus1'),
            annualBonus2CategoryControl = $('#AnnualBonus2'),
            annualBonus3CategoryControl = $('#AnnualBonus3'),
            monthlyBonus1CategoryControl = $('#MonthlyBonus1'),
            monthlyBonus2CategoryControl = $('#MonthlyBonus2'),
            monthlyBonus3CategoryControl = $('#MonthlyBonus3'),
            sizeAnnualBonusControl = $('#SizeAnnualBonus'),
            sizeAnnualBonusMonthlyBonusControl = $('#SizeAnnualBonusMonthlyBonus'),
            sizeAnnualBonusFlatControl = $('#SizeAnnualBonusFlat'),
            sizeAnnualBonusMonthlyBonusFlatControl = $('#SizeAnnualBonusMonthlyBonusFlat'),
            oplcIncludeHplControl = $('#OplcIncludeHpl'),
            calculatedAreaIncludeHplControl = $('#CalculatedAreaIncludeHpl');

        if (oplcControl) {
            oplcControl.value(data.Oplc);
        }
        if (calculatedAreaControl) {
            calculatedAreaControl.value(data.CalculatedArea);
        }
        if (indicatorRControl) {
            indicatorRControl.value(data.IndicatorR);
        }
        if (actualCostControl) {
            actualCostControl.value(data.ActualCost);
        }
        if (actualCostCurrentControl) {
            actualCostCurrentControl.value(data.ActualCostCurrent);
        }
        if (ci1Control.length > 0) {
            ci1Control.text(kendo.toString(data.Ci1, 'n2'));
        }
        if (ci2Control.length > 0) {
            ci2Control.text(kendo.toString(data.Ci2, 'n2'));
        }
        if (ci3Control.length > 0) {
            ci3Control.text(kendo.toString(data.Ci3, 'n2'));
        }
        if (ci4Control.length > 0) {
            ci4Control.text(kendo.toString(data.Ci4, 'n2'));
        }
        if (ci5Control.length > 0) {
            ci5Control.text(kendo.toString(data.Ci5, 'n2'));
        }
        if (ci6Control.length > 0) {
            ci6Control.text(kendo.toString(data.Ci6, 'n2'));
        }
        if (ci7Control.length > 0) {
            ci7Control.text(kendo.toString(data.Ci7, 'n2'));
        }
        if (ci8Control.length > 0) {
            ci8Control.text(kendo.toString(data.Ci8, 'n2'));
        }
        if (ci9Control.length > 0) {
            ci9Control.text(kendo.toString(data.Ci9, 'n2'));
        }
        if (ci10Control.length > 0) {
            ci10Control.text(kendo.toString(data.Ci10, 'n2'));
        }
        if (cim1Control.length > 0) {
            cim1Control.text(kendo.toString(data.Cim1, 'n2'));
        }
        if (cim2Control.length > 0) {
            cim2Control.text(kendo.toString(data.Cim2, 'n2'));
        }
        if (cim3Control.length > 0) {
            cim3Control.text(kendo.toString(data.Cim3, 'n2'));
        }
        if (cim4Control.length > 0) {
            cim4Control.text(kendo.toString(data.Cim4, 'n2'));
        }
        if (cim5Control.length > 0) {
            cim5Control.text(kendo.toString(data.Cim5, 'n2'));
        }
        if (cim6Control.length > 0) {
            cim6Control.text(kendo.toString(data.Cim6, 'n2'));
        }
        if (cim7Control.length > 0) {
            cim7Control.text(kendo.toString(data.Cim7, 'n2'));
        }
        if (cim8Control.length > 0) {
            cim8Control.text(kendo.toString(data.Cim8, 'n2'));
        }
        if (cim9Control.length > 0) {
            cim9Control.text(kendo.toString(data.Cim9, 'n2'));
        }
        if (cim10Control.length > 0) {
            cim10Control.text(kendo.toString(data.Cim10, 'n2'));
        }
        if (ui11Control) {
            ui11Control.value(data.Ui11);
        }
        if (ci11Control.length > 0) {
            ci11Control.text(kendo.toString(data.Ci11, 'n2'));
        }
        if (cim11Control.length > 0) {
            cim11Control.text(kendo.toString(data.Cim11, 'n2'));
        }
        if (totalCost1CategoryControl.length > 0) {
            totalCost1CategoryControl.text(kendo.toString(data.TotalCost1Category, 'n2'));
        }
        if (totalCost2CategoryControl.length > 0) {
            totalCost2CategoryControl.text(kendo.toString(data.TotalCost2Category, 'n2'));
        }
        if (totalCost3CategoryControl.length > 0) {
            totalCost3CategoryControl.text(kendo.toString(data.TotalCost3Category, 'n2'));
        }
        if (designCost1CategoryControl.length > 0) {
            designCost1CategoryControl.text(kendo.toString(data.DesignCost1Category, 'n2'));
        }
        if (designCost2CategoryControl.length > 0) {
            designCost2CategoryControl.text(kendo.toString(data.DesignCost2Category, 'n2'));
        }
        if (designCost3CategoryControl.length > 0) {
            designCost3CategoryControl.text(kendo.toString(data.DesignCost3Category, 'n2'));
        }
        if (annualBonus1CategoryControl.length > 0) {
            annualBonus1CategoryControl.text(kendo.toString(data.AnnualBonus1Category, 'n2'));
        }
        if (annualBonus2CategoryControl.length > 0) {
            annualBonus2CategoryControl.text(kendo.toString(data.AnnualBonus2Category, 'n2'));
        }
        if (annualBonus3CategoryControl.length > 0) {
            annualBonus3CategoryControl.text(kendo.toString(data.AnnualBonus3Category, 'n2'));
        }
        if (monthlyBonus1CategoryControl.length > 0) {
            monthlyBonus1CategoryControl.text(kendo.toString(data.MonthlyBonus1Category, 'n2'));
        }
        if (monthlyBonus2CategoryControl.length > 0) {
            monthlyBonus2CategoryControl.text(kendo.toString(data.MonthlyBonus2Category, 'n2'));
        }
        if (monthlyBonus3CategoryControl.length > 0) {
            monthlyBonus3CategoryControl.text(kendo.toString(data.MonthlyBonus3Category, 'n2'));
        }
        if (sizeAnnualBonusControl.length > 0) {
            sizeAnnualBonusControl.text(kendo.toString(data.SizeAnnualBonus, 'n2'));
        }
        if (sizeAnnualBonusMonthlyBonusControl.length > 0) {
            sizeAnnualBonusMonthlyBonusControl.text(kendo.toString(data.SizeAnnualBonusMonthlyBonus, 'n2'));
        }
        if (sizeAnnualBonusFlatControl.length > 0) {
            sizeAnnualBonusFlatControl.text(kendo.toString(data.SizeAnnualBonusFlat, 'n2'));
        }
        if (sizeAnnualBonusMonthlyBonusFlatControl.length > 0) {
            sizeAnnualBonusMonthlyBonusFlatControl.text(kendo.toString(data.SizeAnnualBonusMonthlyBonusFlat, 'n2'));
        }

        oplcIncludeHplControl.val(data.OplcIncludeHpl);
        calculatedAreaIncludeHplControl.val(data.CalculatedAreaIncludeHpl);

        //показываем ошибку, если сумма удельных весов не равно 100
        updateTotalWeightError(data.Ui11 != null && data.Ui11 != 100);

        //обновление данных в гриде "Условия проекта договора"
        updateAgreementProjectCategoryItem(0, null, null, data.SizeBonusMkd, data.SizeBonusMkdMonthly);
        updateAgreementProjectCategoryItem(1, data.TotalCost1Category, data.DesignCost1Category, data.AnnualBonus1Category, data.MonthlyBonus1Category);
        updateAgreementProjectCategoryItem(2, data.TotalCost2Category, data.DesignCost2Category, data.AnnualBonus2Category, data.MonthlyBonus2Category);
        updateAgreementProjectCategoryItem(3, data.TotalCost3Category, data.DesignCost3Category, data.AnnualBonus3Category, data.MonthlyBonus3Category);

        //обновление контрольных данных
        updateControlData(data.SizeBonusMkd, data.Contribution);

        //CIPJS-767 Если в значении "Расчетная площадь" / "Общая площадь по зданию (включая холодные помещения), кв.м"
        //участвует значение "Площадь холодных помещений" то выделять эту ячейку зеленым, иначе красным
        updateHplStyle();
    }

    function updateControlData(sizeBonusMkd, contribution) {
        var sizeBonusMkdLabel = $('[for="SizeBonusMkd"]'),
            contributionLabel = $('[for="Contribution"]');

        if (sizeBonusMkdLabel.length > 0) {
            if (sizeBonusMkd != null) {
                sizeBonusMkdLabel.text(kendo.toString(sizeBonusMkd, 'n2'));
                sizeBonusMkdLabel.parent().parent().show();
            }
            else {
                sizeBonusMkdLabel.parent().parent().hide();
            }
        }

        if (contributionLabel.length > 0) {
            if (contribution != null) {
                contributionLabel.text(kendo.toString(contribution, 'n2'));
                contributionLabel.parent().parent().show();
            }
            else {
                contributionLabel.parent().parent().hide();
            }
        }
    }

    function updateTotalWeightError(isError) {
        if (isError === true) {
            $('.total_weight_error').text('Суммарный удельный вес конструкций должен быть равен 100%');
        }
        else {
            $('.total_weight_error').text('');
        }
    }

    function updateAgreementProjectCategoryItem(categoryNum, totalCost, designCost, annualBonus, monthlyBonus) {
        var agreementProjectCategoriesGrid = $('#AgreementProjectCategoriesGrid').data('kendoGrid');
        if (agreementProjectCategoriesGrid) {
            var catItem = agreementProjectCategoriesGrid.dataSource.get(categoryNum);
            if (catItem) {
                catItem.set('TotalCost', totalCost);
                catItem.set('DesignCost', designCost);
                catItem.set('Annualprem', annualBonus);
                catItem.set('Monthlyprem', monthlyBonus);
            }
        }
    }

    //CIPJS-767 Если в доме 1/0 квартира, то сразу подсвечивать красным ячейку с количеством квартир
    function updateKolGpStyle() {
        var kolGpControl = $('#KolGp').data('kendoNumericTextBox');
        if (kolGpControl) {
            var kolGpValue = kolGpControl.value();
            if (kolGpValue == null || kolGpValue == 0 || kolGpValue == 1) {
                kolGpControl.element.closest('.k-numeric-wrap').find('.k-formatted-value, .k-input').addClass('background-red');
            }
            else {
                kolGpControl.element.closest('.k-numeric-wrap').find('.k-formatted-value, .k-input').removeClass('background-red');
            }
        }
    }

    // Если Размер доли города = 0, то подсвечиваем красным 
    function UpdateAgreementPartMoscowStyle() {
        var agreementPartMoscow = $('[name="AgreementPartMoscow"]').data('kendoNumericTextBox').value();
        if (!agreementPartMoscow) {
            $('[name="AgreementPartMoscow"]').data('kendoNumericTextBox').element.closest('.k-numeric-wrap').find('.k-formatted-value, .k-input').addClass('background-red');
        }
        else {
            $('[name="AgreementPartMoscow"]').data('kendoNumericTextBox').element.closest('.k-numeric-wrap').find('.k-formatted-value, .k-input').removeClass('background-red');
        }
    }

    function updateHplStyle() {
        var hplControl = $('#Hpl').data("kendoNumericTextBox"),
            oplcIncludeHplControl = $('#OplcIncludeHpl'),
            calculatedAreaIncludeHplControl = $('#CalculatedAreaIncludeHpl');
        if (hplControl) {
            if (oplcIncludeHplControl.length > 0 && oplcIncludeHplControl.val().toLowerCase() === "true"
                && calculatedAreaIncludeHplControl.length > 0 && calculatedAreaIncludeHplControl.val().toLowerCase() === "true") {
                hplControl.element.closest('.k-numeric-wrap').find('.k-formatted-value, .k-input').removeClass('background-red');
                hplControl.element.closest('.k-numeric-wrap').find('.k-formatted-value, .k-input').addClass('background-green');
            }
            else {
                hplControl.element.closest('.k-numeric-wrap').find('.k-formatted-value, .k-input').removeClass('background-green');
                hplControl.element.closest('.k-numeric-wrap').find('.k-formatted-value, .k-input').addClass('background-red');
            }
        }
    }

    function recalcCalculationValues(additionalData, recalcSizeBonusMkd) {
        //kendo.ui.progress($('body'), true);
        $.ajax({
            type: 'POST',
            url: '@Url.Action("Calculate", "Calculation")',
            contentType: 'application/json',
            data: JSON.stringify(getCalculationInData(additionalData, recalcSizeBonusMkd === true)),
            dataType: 'json',
            success: function (response) {
                if (response.Errors && response.Errors.length > 0) {
                    Common.ShowError(response.Errors);
                } else if (response.Data) {
                    setCalculationOutData(response.Data);
                }
                //kendo.ui.progress($('body'), false);
            }, error: function (e) {
                Common.ShowError(e.responseText)
                //kendo.ui.progress($('body'), false);
            }
        });
    }

    function recalcCalculationValuesWithoutInsurCosts(recalcSizeBonusMkd) {
        recalcCalculationValues({
            Oplc: $('#Oplc').data('kendoNumericTextBox').value(),
            CalculatedArea: $('#CalculatedArea').data('kendoNumericTextBox').value(),
            IndicatorR: $('#IndicatorR').data('kendoNumericTextBox').value(),
            ActualCost: $('#ActualCost').data('kendoNumericTextBox').value(),
            ActualCostCurrent: $('#ActualCostCurrent').data('kendoNumericTextBox').value()
        }, recalcSizeBonusMkd);
    }
</script>