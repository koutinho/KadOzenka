@using Newtonsoft.Json;

@model CIPJS.Models.Contract.FormInvoicesDto

<style>
    #successRows.k-grid td, #errorRows.k-grid td {
        white-space: inherit;
    }

    #inputForm label.control-label.required:after {
        display: none;
    }

    span.k-widget.k-tooltip-validation {
        display: inline-block;
        text-align: left;
        border: 0;
        padding: 0;
        margin: 0;
        background: none;
        box-shadow: none;
        color: red;
    }

    .summary-header {
        text-align: center;
        font-weight: bold;
    }
    .k-grid td {
        white-space: inherit;
    }
</style>
<form>
    <div id="toolbar"></div>
    @if (ViewBag.ErrorMessages != null)
    {
        <div style="padding: 10px;">@ViewBag.ErrorMessages</div>

        if (Model != null && Model.ErrorAllPropertyList != null && Model.ErrorAllPropertyList.Count > 0)
        {
            <div id="errorAllPropertyGrid"></div>
        }
    }
    else
    {
        @for (int i = 0; i < Model.Ids.Count; i++)
        {
            @Html.HiddenFor(x => x.Ids[i])
        }
        <div id="inputForm">
            <div class="form-horizontal col-sm-12">
                <div class="form-group"></div>
                <div class="form-group">
                    <div class="col-sm-2">
                        @Html.CustomLabelFor(m => m.NumInvoice)
                    </div>
                    <div class="col-sm-4">
                        @Html.KendoTextBoxFor(m => m.NumInvoice, false)
                    </div>
                    <div class="col-sm-2">
                        @Html.CustomLabelFor(m => m.DateInvoice)
                    </div>
                    <div class="col-sm-4">
                        @Html.KendoDatePickerFor(m => m.DateInvoice, false, maxDate: DateTime.Now)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-sm-2">
                        @Html.CustomLabelFor(m => m.SubjectName)
                    </div>
                    <div class="col-sm-3">
                        @Html.KendoTextBoxFor(m => m.SubjectName, false)
                        @Html.HiddenFor(m => m.SubjectId)
                    </div>
                    <div class="col-sm-1">
                        @Html.KendoButton("selectSubject", "...")
                    </div>
                    <div class="col-sm-2">
                        @Html.CustomLabelFor(m => m.Phone)
                    </div>
                    <div class="col-sm-4">
                        @Html.KendoTextBoxFor(m => m.Phone, false)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-sm-2">
                        @Html.CustomLabelFor(m => m.NameForInvoice)
                    </div>
                    <div class="col-sm-10">
                        @Html.KendoTextBoxFor(m => m.NameForInvoice)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-sm-2">
                        @Html.CustomLabelFor(m => m.Inn)
                    </div>
                    <div class="col-sm-4">
                        @Html.KendoTextBoxFor(m => m.Inn, false)
                    </div>
                    <div class="col-sm-2">
                        @Html.CustomLabelFor(m => m.Kpp)
                    </div>
                    <div class="col-sm-4">
                        @Html.KendoTextValidator(m => m.Kpp, "^(\\d{9})$", false, validMes: "КПП: 9 символов")
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-sm-2">
                        @Html.CustomLabelFor(m => m.BicBank)
                    </div>
                    <div class="col-sm-3">
                        @Html.KendoAutoCopmpliteFor(x => x.BicBank, "BankBic", "Bank", "GetBankByBik", "function() {return {bic: $('#BicBank').val()};}", isReadonly: false, validMes: "БИК банка обязателен для заполнения")
                        @Html.HiddenFor(m => m.BankId)
                        <span class="k-invalid-msg" data-for="BicBank"></span>
                    </div>
                    <div class="col-sm-1">
                        @Html.KendoButton("selectBank", "...")
                    </div>
                    <div class="col-sm-2">
                        @Html.CustomLabelFor(m => m.BankName)
                    </div>
                    <div class="col-sm-4">
                        @Html.KendoTextValidator(m => m.BankName, "^(.*)$", isReadonly: false, validMes: "Название банка обязательно для заполнения")
                    </div>
                </div>
                @* CIPJS-435 скрыть поля для ввода этих значений *@
                <div class="form-group" style="display:none;">
                    <div class="col-sm-2">
                        @Html.CustomLabelFor(m => m.InnBank)
                    </div>
                    <div class="col-sm-4">
                        @Html.KendoTextBoxFor(m => m.InnBank, false)
                    </div>
                    <div class="col-sm-2">
                        @Html.CustomLabelFor(m => m.KppBank)
                    </div>
                    <div class="col-sm-4">
                        @Html.KendoTextValidator(m => m.KppBank, "^(\\d{9})$", false, validMes: "КПП банка: 9 символов")
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-sm-2">
                        @Html.CustomLabelFor(m => m.KorAcc)
                    </div>
                    <div class="col-sm-4">
                        @Html.KendoTextValidator(m => m.KorAcc, "^(\\d{20})$", false, validMes: "Кор.счет: 20 символов")
                    </div>
                    <div class="col-sm-2">
                        @Html.CustomLabelFor(m => m.RachAcc)
                    </div>
                    <div class="col-sm-4">
                        @Html.KendoTextValidator(m => m.RachAcc, "^(\\d{20})$", false, validMes: "Расч. счет: 20 символов")
                    </div>
                </div>
                <div class="form-group"></div>
                <div class="form-group">
                    <div class="col-sm-12">
                        <h4 class="summary-header">Счета, которые будут сформированы</h4>
                        <table id="futureSuccessRows">
                            <colgroup>
                                <col width="10%" />
                                <col />
                                <col />
                                <col />
                                <col />
                            </colgroup>
                            <thead>
                                <tr>
                                    <th data-field="Ordinal">№</th>
                                    <th data-field="ContractNumber">Номер договора</th>
                                    <th data-field="ContractDate">Дата договора</th>
                                    <th data-field="RasPripay">Размер страховой премии</th>
                                    <th data-field="Sum">Сумма выплаты</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in Model.FutureSuccessRows)
                                {
                                    <tr>
                                        <td>@item.Ordinal</td>
                                        <td>@item.ContractNumber</td>
                                        <td>@item.ContractDate?.ToString("dd.MM.yyyy")</td>
                                        <td><div style="text-align:right;">@item.RasPripay?.ToString("N2")</div></td>
                                        <td><div style="text-align:right;">@item.Sum?.ToString("N2")</div></td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-sm-12">
                        <h4 class="summary-header">Счета, которые не будут сформированы</h4>
                        <table id="futureErrorRows">
                            <colgroup>
                                <col width="10%" />
                                <col width="15%" />
                                <col width="15%" />
                                <col width="15%" />
                                <col />
                            </colgroup>
                            <thead>
                                <tr>
                                    <th data-field="Ordinal">№</th>
                                    <th data-field="ContractNumber">Номер договора</th>
                                    <th data-field="ContractDate">Дата договора</th>
                                    <th data-field="RasPripay">Размер страховой премии</th>
                                    <th data-field="Error">Ошибка</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in Model.FutureErrorRows)
                                {
                                    <tr>
                                        <td>@item.Ordinal</td>
                                        <td>@item.ContractNumber</td>
                                        <td>@item.ContractDate?.ToString("dd.MM.yyyy")</td>
                                        <td><div style="text-align:right;">@item.RasPripay?.ToString("N2")</div></td>
                                        <td>@item.Error</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
        <div id="resultGrids" style="display: none;">
            <div class="form-horizontal col-sm-12">
                <div class="form-group"></div>
                <div class="form-group">
                    <h4 class="summary-header">Счета сформированы</h4>
                    <div id="successRows"></div>
                    <div id="successRowsSummaryPlaceholder" style="padding: 10px"></div>
                </div>
                <div class="form-group"></div>
                <div class="form-group">
                    <h4 class="summary-header">Не удалось сформировать счета по следующим договорам</h4>
                    <div id="errorRows"></div>
                    <div style="padding: 10px">
                        Возможные причины, по которым невозможно сформировать счета:<br />
                        <ul>
                            <li>отсутствуют сведения о поступивших платежах по договорам страхования ОИ  (не загружен/не обработан файл PAY_COMM.DBF)</li>
                            <li>счета на выплату части премии были сформированы ранее и уже присутствуют на договорах в статусе «Создан»</li>
                            <li>счета на выплату премии были сформированы ранее и уже включены в Реестры выплат</li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    }
</form>
<script type="text/javascript">
    var errorAllPropertyList = @Html.Raw(JsonConvert.SerializeObject(Model != null ? Model.ErrorAllPropertyList : null));

    $(function () {
        var title = window.parent.$('#registerModalWindow').parent().find('span.k-window-title');

        title.text(title.text() + ' в кол-ве @Html.Raw(Model?.FutureSuccessRows?.Count ?? 0) штук на сумму @Html.Raw((Model?.FutureSuccessRows?.Sum(x => x.Sum ?? 0m) ?? 0m).ToString("N2"))');

        var toolbar = $('#toolbar').kendoToolBar({
            items: [
                {
                    type: 'button',
                    text: 'Сформировать счета',
                    id: 'form',
                    enable: @((ViewBag.ErrorMessages == null).ToString().ToLower()),
                    hidden: errorAllPropertyList != null && errorAllPropertyList.length > 0,
                    click: function () {
                        Common.ClearNotification();

                        if (!validator.validate()) {
                            var message = 'Ошибки валидации:';
                            $(validator.errors()).each(function () {
                                message += '<br/>' + this;
                            });
                            Common.ShowError(message);
                            return;
                        }

                        var numInvoice = $('#NumInvoice');
                        if (!numInvoice.val() || numInvoice.val() == '') {
                            numInvoice.val('б/н');
                        }

                        kendo.ui.progress($('body'), true);
                        $.ajax({
                            type: 'POST',
                            url: '@Url.Action("FormInvoices", "Contract")',
                            data: $('form').serialize(),
                            success: function (e) {
                                kendo.ui.progress($('body'), false);
                                if (e.Errors && e.Errors.length > 0) {
                                    Common.ShowError(e.Errors);
                                } else {
                                    Common.ShowMessage('Операция успешно выполнена');
                                    $('#inputForm').hide();

                                    successRows.setOptions({
                                        dataSource: new kendo.data.DataSource({
                                            data: e.Data.successRows
                                        })
                                    });

                                    if (e.Data.successRows != null && e.Data.successRows.length > 0) {
                                        var rowsCount = e.Data.successRows.length,
                                            sumOpl = 0,
                                            decimalSeparator = kendo.culture().numberFormat["."];

                                        for (var i = 0; i < rowsCount; i++) {
                                            var sum = kendo.parseFloat(e.Data.successRows[i].Sum);

                                            if (sum != null) {
                                                sumOpl += sum;
                                            }
                                        }

                                        var stringSumOpl = kendo.toString(sumOpl, 'n2');

                                        if (rowsCount > 0) {
                                            $('#successRowsSummaryPlaceholder').html('<span>Сформировано <b>' + rowsCount + '</b> счета(-ов) на сумму <b>' + stringSumOpl.split(decimalSeparator)[0] + ' руб. ' + stringSumOpl.split(decimalSeparator)[1] + ' коп.</b></span>');
                                        }
                                        else {
                                        }
                                    }
                                    else {
                                        $('#successRowsSummaryPlaceholder').hide();
                                    }

                                    if (e.Data.errorRows != null && e.Data.errorRows.length > 0) {
                                        errorRows.setOptions({
                                            dataSource: new kendo.data.DataSource({
                                                data: e.Data.errorRows
                                            })
                                        });
                                    }
                                    else {
                                        errorRows.element.closest('.form-group').hide();
                                    }

                                    $('#resultGrids').show();
                                    toolbar.enable($('#form'), false);
                                }
                            }, error: function (e) {
                                kendo.ui.progress($('body'), false);
                                Common.ShowError(e.responseText);
                            }
                        });
                    }
                },
                {
                    type: 'button',
                    text: 'ОК',
                    id: 'ok',
                    hidden: errorAllPropertyList == null || errorAllPropertyList.length == 0,
                    click: function () {
                        Common.UI.CloseWindow('registerModalWindow', window.parent);
                    }
                },
                {
                    type: 'button',
                    text: 'Отмена',
                    id: 'cancel',
                    click: function () {
                        Common.UI.CloseWindow('registerModalWindow', window.parent);
                    }
                }
            ]
        }).data('kendoToolBar');
        
        var autoCopmpl = $('#BicBank').data('kendoAutoComplete');
        if (autoCopmpl) {
            autoCopmpl.bind("select", function (e) {
                $('[id="BankId"]').val(e.dataItem.EmpId);
                $('[id="BankName"]').val(e.dataItem.BankName);
                $('[id="BankInn"]').val(e.dataItem.BankInn);
                $('[id="BankKpp"]').val(e.dataItem.BankKpp);
                $('[id="BankKpp"]').val(e.dataItem.BankKpp);
                $('[id="BicBank"]').val(e.dataItem.BankBic);
                $('[id="KorAcc"]').val(e.dataItem.BankKorAcc);
            });
            autoCopmpl.bind('change', function () {
                $('[id="BankId"]').val('');
            });
        }

        var dateInvoiceDatePicker = $('#DateInvoice').data('kendoDatePicker');
        if (dateInvoiceDatePicker) {
            dateInvoiceDatePicker.bind('change', function () {
                var value = this.value();

                if (value == null) {
                    this.element.val('')
                } else if (value > new Date()) {
                    common.ShowError('Дата счета не может быть больше текущей даты!');
                    this.value(new Date());
                }
            });
        }

        $('#futureSuccessRows').kendoGrid({ sortable: false });
        $('#futureErrorRows').kendoGrid({ sortable: false });

        $('#selectSubject').click(function (e) {
            e.preventDefault();
            var contentUrl = '@Url.Action("Index", "RegistersView", new { registerId = "SubjectSelect" })',
                title = 'Выбор Получателя',
                callbackFn = function (item) {
                    $.ajax({
                        type: 'POST',
                        url: '@Url.Action("GetById", "Subject")',
                        data: { 'id': item.id },
                        success: function (data) {
                            $('[id="SubjectId"]').val(data.EmpId);
                            $('[id="SubjectName"]').val(data.SubjectName);
                            $('[id="Phone"]').val(data.OrgPhone);
                            $('[id="Inn"]').val(data.Inn);
                            $('[id="Kpp"]').val(data.Kpp);
                            $('[id="RachAcc"]').val(data.RachAcc);
                            $('[id="BankCardNumber"]').val(data.NumCard);
                            $('[id="Ls"]').val(data.LicAcc);
                            $('[name="NameForInvoice"]').val(data.NameForInvoice);

                            $('[id="BankId"]').val(data.BankId);
                            $('[id="BankName"]').val(data.BankName);
                            $('[id="BankInn"]').val(data.BankInn);
                            $('[id="BankKpp"]').val(data.BankKpp);
                            $('[id="BankKpp"]').val(data.BankKpp);
                            $('[id="BicBank"]').val(data.BankBic);
                            $('[id="KorAcc"]').val(data.BankKorAcc);
                        }
                    });
                };

            Common.UI.ChooseWindow(title, contentUrl, callbackFn, 'Grid-@ObjectModel.Insur.OMSubject.GetRegisterId()');
        });

        $('#selectBank').click(function (e) {
            e.preventDefault();
            var contentUrl = '@Url.Action("Index", "RegistersView", new { registerId = "BankSelect" })',
                title = 'Выбор Банка',
                callbackFn = function (item) {
                    $.ajax({
                        type: 'POST',
                        url: '@Url.Action("GetById", "Bank")',
                        data: { 'id': item.id },
                        success: function (data) {
                            $('[id="BankId"]').val(data.EmpId);
                            $('[id="BankName"]').val(data.BankName);
                            $('[id="BankInn"]').val(data.BankInn);
                            $('[id="BankKpp"]').val(data.BankKpp);
                            $('[id="BankKpp"]').val(data.BankKpp);
                            $('[id="BicBank"]').val(data.BankBic);
                            $('[id="KorAcc"]').val(data.BankKorAcc);
                        }
                    });
                };

            Common.UI.ChooseWindow(title, contentUrl, callbackFn, 'Grid-@ObjectModel.Insur.OMBank.GetRegisterId()');
        });

        var validator = $('form').kendoValidator().data('kendoValidator');

        var successRows = $('#successRows').kendoGrid({
            sortable: false,
            columns: [
                {
                    field: 'Ordinal',
                    title: '№',
                    width: '10%'
                },
                {
                    field: 'ContractNumber',
                    title: 'Номер договора'
                },
                {
                    field: 'ContractDate',
                    template: '#:ContractDate?kendo.toString(kendo.parseDate(ContractDate), "dd.MM.yyyy"):""#',
                    title: 'Дата договора'
                },
                {
                    field: 'RasPripay',
                    template: '#:RasPripay?kendo.toString(RasPripay, "n2"):""#',
                    title: 'Размер страховой премии'
                },
                {
                    field: 'SubjectName',
                    title: 'Получатель'
                },
                {
                    field: 'Sum',
                    template: '#:Sum?kendo.toString(Sum, "n2"):""#',
                    title: 'Сумма выплаты'
                },
                {
                    field: 'InvoiceNumber',
                    title: 'Номер счета'
                },
                {
                    field: 'InvoiceDate',
                    template: '#:InvoiceDate?kendo.toString(kendo.parseDate(InvoiceDate), "dd.MM.yyyy"):""#',
                    title: 'Дата счета'
                },
                {
                    field: 'BicBank',
                    title: 'БИК банка'
                },
                {
                    field: 'BankName',
                    title: 'Название банка'
                }
            ]
        }).data('kendoGrid');

        var errorRows = $('#errorRows').kendoGrid({
            sortable: false,
            columns: [
                {
                    field: 'Ordinal',
                    title: '№',
                    width: '10%'
                },
                {
                    field: 'ContractNumber',
                    title: 'Номер договора',
                    width: '15%'
                },
                {
                    field: 'ContractDate',
                    template: '#:ContractDate?kendo.toString(kendo.parseDate(ContractDate), "dd.MM.yyyy"):""#',
                    title: 'Дата договора',
                    width: '15%'
                },
                {
                    field: 'RasPripay',
                    template: '#:RasPripay?kendo.toString(RasPripay, "n2"):""#',
                    title: 'Размер страховой премии',
                    width: '15%'
                },
                {
                    field: 'Error',
                    title: 'Ошибка'
                }
            ]
        }).data('kendoGrid');

        if (errorAllPropertyList != null && errorAllPropertyList.length > 0) {
            $('#errorAllPropertyGrid').kendoGrid({
                dataSource: {
                    data: errorAllPropertyList,
                    schema: {
                        model: {
                            fields: {
                                Ordinal: { type: 'number' },
                                Ndog: { type: 'string' },
                                Ndogdat: { type: 'date' },
                                RasPripay: { type: 'number' },
                                PartCity: { type: 'number' }
                            }
                        }
                    }
                },
                sortable: false,
                columns: [
                    {
                        field: 'Ordinal',
                        title: '№',
                        width: '20%'
                    },
                    {
                        field: 'Ndog',
                        template: '#: Ndog != null ? Ndog : "" #',
                        title: 'Номер договора',
                        width: '20%'
                    },
                    {
                        field: 'Ndogdat',
                        template: '#: Ndogdat != null ? kendo.toString(Ndogdat, "dd.MM.yyyy"): "" #',
                        title: 'Дата договора',
                        width: '20%'
                    },
                    {
                        field: 'RasPripay',
                        template: '#:RasPripay != null ? kendo.toString(RasPripay, "n2") : ""#',
                        title: 'Размер страховой премии',
                        width: '20%'
                    },
                    {
                        field: 'PartCity',
                        template: '#:PartCity != null ? kendo.toString(PartCity, "n2") : ""#',
                        title: 'Доля города',
                        width: '20%'
                    }
                ]
            }).data('kendoGrid')
        }
    });
</script>