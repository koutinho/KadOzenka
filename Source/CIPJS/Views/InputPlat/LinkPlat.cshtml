@using ObjectModel.Insur;
@using CIPJS.Models.InputPlat;
@using Newtonsoft.Json;

@model LinkPlatDto

<style>
    .k-grid > .k-header.k-grid-toolbar > .k-button-icontext > span {
        font-family: 'WebComponentsIcons' !important;
    }
</style>

<ul id="ls_panelbar" class="panelbar">
    <li>
        <span id="DA_Plat">Строка зачислений от МФЦ</span>
        <div>
            <div class="form-horizontal col-sm-12">
                <div class="form-group"></div>
                <div class="form-group">
                    <div class="col-sm-12">
                        <div id="LinkPlatGrid">
                        </div>
                    </div>
                </div>
                <div class="form-group"></div>
            </div>
        </div>
    </li>
    <li>
        <span id="DA_BankPlats">Связать с банковской строкой оплат</span>
        <div>
            <div class="form-horizontal col-sm-12">
                <div class="form-group"></div>
                <div class="form-group">
                    <div class="col-sm-12">
                        <div id="LinkBankPlatsGrid">
                        </div>
                    </div>
                </div>
                <div class="form-group"></div>
            </div>
        </div>
    </li>
    <li>
        <span id="DA_Reason">Основание</span>
        <div>
            <div class="form-horizontal col-sm-12">
                <div class="form-group"></div>
                <div class="form-group">
                    <div class="col-sm-12">
                        @Html.TextArea("Reason", null, 3, 0, new { @class = "k-textbox", @style = "width: 100%; resize: none;", editmode="true" })
                    </div>
                </div>
                <div class="form-group"></div>
            </div>
        </div>
    </li>
</ul>
<div class="static-nav">
    <div id="link-plat-toolbar" style="position:absolute; bottom: 20px;width: 95%;"></div>
</div>

<script type="text/javascript">
    var model = @Html.Raw(JsonConvert.SerializeObject(Model)),
        bankPlatPeriodRegDateAttributeId = @Html.Raw(OMBankPlat.GetColumnAttributeId(x => x.PeriodRegDate)),
        bankPlatEmpIdAttributeId = @Html.Raw(OMBankPlat.GetColumnAttributeId(x => x.EmpId)),
        inputPlatEmpIdAttributeId = @Html.Raw(OMInputPlat.GetColumnAttributeId(x => x.EmpId)),
        uniqueSessionKey = '@Html.Raw(ViewBag.CurrentUniqueSessionKey)';
    $(document).ready(function () {
        var linkPlatGrid = $('#LinkPlatGrid').kendoGrid({
            toolbar: [
                {
                    type: 'button',
                    name: 'history',
                    text: 'История изменений'
                },
                {
                    iconClass: '',
                    name: 'edit'
                }
            ],
            dataSource: {
                data: model,
                schema: {
                    model: {
                        id: 'Id',
                        fields: {
                            Id: { type: 'number', editable: false, defaultValue: -1 },
                            PeriodRegDate: { type: 'date' },
                            PmtDate: { type: 'date' },
                            Kodpl: { type: 'string' },
                            SumOpl: { type: 'number' },
                            Adres: { type: 'string' },
                            Nom: { type: 'string' },
                            Unom: { type: 'number', defaultValue: null },
                            TxId: { type: 'string' },
                            Period: { type: 'date' },
                            Opl: { type: 'number' }
                        }
                    }
                }
            },
            columns: [
                { field: 'Id', hidden: true },
                { field: 'PeriodRegDate', title: 'Период учета', format: '{0:MMMM yyyy}', width: '15%' },
                { field: 'PmtDate', title: 'Дата платежа', format: '{0:dd.MM.yyyy}', width: '10%' },
                { field: 'Kodpl', title: 'Код плательщика', width: '10%' },
                { field: 'SumOpl', title: 'Сумма платежа', template: KendoExtension.TemplateDecimal('SumOpl'), width: '10%' },
                { field: 'Unom', title: 'UNOM', width: '10%' },
                { field: 'TxId', title: 'Банковская кодировка', width: '10%' },
                { field: 'Period', title: 'Период оплаты', format: '{0:dd.MM.yyyy}', width: '10%' },
                { field: 'Adres', title: 'Адрес дома', width: '15%' },
                { field: 'Nom', title: '№ кв', width: '5%' },
                { field: 'Opl', title: 'Площадь', width: '5%' }
            ],
            editable: {
                mode: 'popup',
                confirmation: false,
                window: {
                    title: 'Изменение данных МФЦ'
                }
            },
            edit: function (e) {
                var periodRegDatePicker = e.container.find('[name="PeriodRegDate"]').data('kendoDatePicker'),
                    pmtDatePicker = e.container.find('[name="PmtDate"]').data('kendoDatePicker'),
                    periodDatePicker = e.container.find('[name="Period"]').data('kendoDatePicker'),
                    sumOplTextBox = e.container.find('[name="SumOpl"]').data('kendoNumericTextBox'),
                    unomTextBox = e.container.find('[name="Unom"]').data('kendoNumericTextBox'),
                    oplTextBox = e.container.find('[name="Opl"]').data('kendoNumericTextBox'),
                    kodPlTextBox = e.container.find('input[name="Kodpl"]'),
                    adresTextBox = e.container.find('input[name="Adres"]'),
                    nomTextBox = e.container.find('input[name="Nom"]'),
                    txIdTextBox = e.container.find('input[name="TxId"]');
                e.container.find('.k-edit-label:first').hide();
                e.container.find('.k-edit-field:first').hide();
                
                //доработка элементов редактирования
                periodRegDatePicker.setOptions({ parseFormats: ['ddMMyyyy', 'ddMMyy', 'dd.MM.yyyy', 'dd.MM.yy', 'dd/MM/yyyy', 'dd/MM/yy'] });
                pmtDatePicker.setOptions({ parseFormats: ['ddMMyyyy', 'ddMMyy', 'dd.MM.yyyy', 'dd.MM.yy', 'dd/MM/yyyy', 'dd/MM/yy'] });
                periodDatePicker.setOptions({ parseFormats: ['ddMMyyyy', 'ddMMyy', 'dd.MM.yyyy', 'dd.MM.yy', 'dd/MM/yyyy', 'dd/MM/yy'] });
                sumOplTextBox.setOptions({ format: 'n2', spinners: false });
                unomTextBox.setOptions({ min: 0, format: 'n0', spinners: false });
                oplTextBox.setOptions({ format: 'n2', spinners: false });

                //доступность полей ввода
                periodRegDatePicker.enable(false);
                pmtDatePicker.enable(false);
                periodDatePicker.enable(false);
                unomTextBox.enable(false);
                oplTextBox.enable(false);
                unomTextBox.enable(false);
                kodPlTextBox.addClass('k-state-disabled').attr('disabled', 'disabled');
                adresTextBox.addClass('k-state-disabled').attr('disabled', 'disabled');
                nomTextBox.addClass('k-state-disabled').attr('disabled', 'disabled');
                txIdTextBox.addClass('k-state-disabled').attr('disabled', 'disabled');
            },
            save: function (e) {
                e.preventDefault();
                var grid = this,
                    rowUid = e.model.uid,
                    periodRegDatePicker = e.container.find('[name="PeriodRegDate"]').data('kendoDatePicker'),
                    pmtDatePicker = e.container.find('[name="PmtDate"]').data('kendoDatePicker'),
                    periodDatePicker = e.container.find('[name="Period"]').data('kendoDatePicker'),
                    sumOplTextBox = e.container.find('[name="SumOpl"]').data('kendoNumericTextBox'),
                    unomTextBox = e.container.find('[name="Unom"]').data('kendoNumericTextBox'),
                    oplTextBox = e.container.find('[name="Opl"]').data('kendoNumericTextBox'),
                    kodPlTextBox = e.container.find('input[name="Kodpl"]'),
                    adresTextBox = e.container.find('input[name="Adres"]'),
                    nomTextBox = e.container.find('input[name="Nom"]'),
                    txIdTextBox = e.container.find('input[name="TxId"]'),
                    editModel = {
                        Id: e.model.Id,
                        PeriodRegDate: periodRegDatePicker ? periodRegDatePicker.value() : null,
                        PmtDate: pmtDatePicker ? pmtDatePicker.value() : null,
                        Period: periodDatePicker ? periodDatePicker.value() : null,
                        Kodpl: kodPlTextBox.length > 0 ? kodPlTextBox.val() : null,
                        SumOpl: sumOplTextBox ? sumOplTextBox.value() : null,
                        Adres: adresTextBox.length > 0 ? adresTextBox.val() : null,
                        Nom: nomTextBox.length > 0 ? nomTextBox.val() : null,
                        Unom: unomTextBox ? unomTextBox.value() : null,
                        TxId: txIdTextBox.length > 0 ? txIdTextBox.val() : null,
                        Opl: oplTextBox ? oplTextBox.value() : null
                    };
                kendo.ui.progress($('body'), false);

                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("Update", "InputPlat")',
                    data: {
                        Id: editModel.Id,
                        PeriodRegDate: kendo.toString(editModel.PeriodRegDate, 'dd.MM.yyyy HH:mm:ss'),
                        PmtDate: kendo.toString(editModel.PmtDate, 'dd.MM.yyyy HH:mm:ss'),
                        Period: kendo.toString(editModel.Period, 'dd.MM.yyyy HH:mm:ss'),
                        Kodpl: editModel.Kodpl,
                        SumOpl: kendo.toString(editModel.SumOpl, 'n2'),
                        Adres: editModel.Adres,
                        Nom: editModel.Nom,
                        Unom: editModel.Unom,
                        TxId: editModel.TxId,
                        Opl: editModel.Opl
                    },
                    dataType: 'json',
                    success: function (e) {
                        kendo.ui.progress($('body'), false);
                        grid.editable.element.data("kendoWindow").close();
                        if (e.Errors && e.Errors.length > 0) {
                            Common.ShowError(e.Errors.join('<br>'));
                        } else {
                            var dataItem = grid.dataSource.getByUid(rowUid);
                            dataItem.Id = e.Data.Id;
                            dataItem.set('PeriodRegDate', kendo.parseDate(e.Data.PeriodRegDate, 's'));
                            dataItem.set('PmtDate', kendo.parseDate(e.Data.PmtDate, 's'));
                            dataItem.set('Period', kendo.parseDate(e.Data.Period, 's'));
                            dataItem.set('Kodpl', e.Data.Kodpl);
                            dataItem.set('SumOpl', e.Data.SumOpl);
                            dataItem.set('Adres', e.Data.Adres);
                            dataItem.set('Nom', e.Data.Nom);
                            dataItem.set('Unom ', e.Data.Unom);
                            dataItem.set('TxId', e.Data.TxId);
                            dataItem.set('Opl', e.Data.Opl);

                            grid.saveChanges();
                            Common.ShowMessage('Операция успешно выполнена');
                        }
                    }
                });
            },
            cancel: function (e) {
                e.preventDefault();
                this.cancelChanges();
                this.editable.element.data("kendoWindow").close();
            },
            sortable: false,
            resizable: true,
            scrollable: false,
            selectable: 'row',
            messages: {
                commands: {
                    update: 'Сохранить',
                    edit: 'Изменить данные МФЦ'
                }
            }
        }).data('kendoGrid');

        var linkBankPlatsGrid = $('#LinkBankPlatsGrid').kendoGrid({
            toolbar: [
                {
                    type: 'button',
                    name: 'add',
                    text: 'Перейти в реестр банковских строк оплат'
                }
            ],
            dataSource: {
                data: model.BankPlats,
                schema: {
                    model: {
                        fields: {
                            Id: { type: 'number', editable: false },
                            PeriodRegDate: { type: 'date' },
                            DataPp: { type: 'date' },
                            Kodpl: { type: 'string' },
                            SumByCode: { type: 'number' },
                            NomDoc: { type: 'string' },
                            Period: { type: 'date' },
                            FlagVozvr: { type: 'number' },
                            CodDoc: { type: 'number' }
                        }
                    }
                }
            },
            columns: [
                { selectable: true, width: '3%' },
                { field: 'Id', hidden: true },
                { field: 'PeriodRegDate', title: 'Период учета', format: '{0:MMMM yyyy}', width: '12%' },
                { field: 'DataPp', title: 'Дата платежа', format: '{0:dd.MM.yyyy}', width: '10%' },
                { field: 'Kodpl', title: 'Код плательщика', width: '10%' },
                { field: 'SumByCode', title: 'Сумма платежа', template: KendoExtension.TemplateDecimal('SumByCode'), width: '10%' },
                { field: 'FlagVozvr', title: 'Признак распределения', width: '10%' },
                { field: 'CodDoc', title: 'Уникальный код', width: '10%' },
                { field: 'Period', title: 'Период оплаты', format: '{0:dd.MM.yyyy}', width: '10%' },
                { field: 'NomDoc', title: 'Номер документа', width: '25%' }
            ],
            sortable: false,
            resizable: true,
            scrollable: false,
            messages: {
                commands: {
                    destroy: ''
                }
            }
        }).data('kendoGrid');

        function updateGridsStyles() {
            var bankPlatDataItems = linkBankPlatsGrid.dataItems(),
                inputPlatDataItem = linkPlatGrid.dataSource.at(0);

            if (bankPlatDataItems && inputPlatDataItem) {
                var bankPlatKodplColumnIndex = linkBankPlatsGrid.element.find('th[data-field="Kodpl"]').index(),
                    bankPlatSumColumnIndex = linkBankPlatsGrid.element.find('th[data-field="SumByCode"]').index(),
                    platSumOpl = inputPlatDataItem.get('SumOpl'),
                    platKodpl = inputPlatDataItem.get('Kodpl');

                for (var i = 0; i < bankPlatDataItems.length; i++) {
                    var bankPlatRow = linkBankPlatsGrid.element.find('tr[data-uid="' + bankPlatDataItems[i].uid + '"]'),
                        bankPlatSumOpl = bankPlatDataItems[i].get('SumByCode'),
                        bankPlatKodpl = bankPlatDataItems[i].get('Kodpl');

                    if (bankPlatKodpl != platKodpl) {
                        bankPlatRow.find('td:eq(' + bankPlatKodplColumnIndex + ')').addClass('k-grid-no');
                    }
                    else {
                        bankPlatRow.find('td:eq(' + bankPlatKodplColumnIndex + ')').removeClass('k-grid-no');
                    }

                    if (bankPlatSumOpl != platSumOpl) {
                        bankPlatRow.find('td:eq(' + bankPlatSumColumnIndex + ')').addClass('k-grid-no');
                    }
                    else {
                        bankPlatRow.find('td:eq(' + bankPlatSumColumnIndex + ')').removeClass('k-grid-no');
                    }
                }
            }
        }

        linkPlatGrid.bind('dataBound', updateGridsStyles);
        linkBankPlatsGrid.bind('dataBound', updateGridsStyles);

        setTimeout(function () {
            linkPlatGrid.element.find('.k-grid-toolbar > a.k-grid-history').on('click', function (e) {
                e.preventDefault();
            
                Common.UI.ShowWindow('История изменений', '@Url.Action("Index", "RegistersView",
                        new {
                            registerId = "InsurChangesLog",
                            Transition = 1,
                            qs = $"({OMChangesLog.GetColumnAttributeId(x => x.ObjectId)}equal'{Model.Id}')"
                        })');
            });

            linkBankPlatsGrid.element.find('.k-grid-toolbar > a.k-grid-add').attr('editmode', 'true').on('click', function (e) {
                e.preventDefault();

                var bankPlatItems = linkBankPlatsGrid.dataItems(),
                    contentUrl = '@Url.Action("Index", "RegistersView",
                        new {
                            registerId = "BankPaymentFilesSelect",
                            Transition = 1,
                            UniqueSessionKey = ViewBag.CurrentUniqueSessionKey
                        })',
                    title = 'Выбор банковской строки',
                    qs = '&qs=(' + bankPlatPeriodRegDateAttributeId + 'equal%27' + kendo.toString(model.PeriodRegDate, 'dd.MM.yyyy') + '%27' +
                        'and' + inputPlatEmpIdAttributeId + 'isnull)',
                    callbackFn = function (item) {
                        $.ajax({
                            type: 'GET',
                            url: '@Url.Action("GetCurrentList", "BankPlat")',
                            data: { 'id': item.id, 'UniqueSessionKey': uniqueSessionKey },
                            dataType: 'json',
                            success: function (data) {
                                if (data && data.length > 0) {
                                    for (var i = 0; i < data.length; i++) {
                                        linkBankPlatsGrid.dataSource.add({
                                            Id: data[i].Id,
                                            PeriodRegDate: kendo.parseDate(data[i].PeriodRegDate),
                                            DataPp: kendo.parseDate(data[i].DataPp),
                                            Kodpl: data[i].Kodpl,
                                            SumByCode: data[i].SumByCode,
                                            NomDoc: data[i].NomDoc,
                                            FlagVozvr: data[i].FlagVozvr,
                                            CodDoc: data[i].CodDoc,
                                            Period: kendo.parseDate(data[i].Period)
                                        });
                                    }
                                }
                            }
                        });
                };

                if (bankPlatItems.length > 0) {
                    var bankPlatIds = [];

                    for (var i = 0; i < bankPlatItems.length; i++) {
                        bankPlatIds.push(bankPlatItems[i].get('Id'));
                    }

                    qs = qs.substr(0, qs.length - 1) + 'and' + bankPlatEmpIdAttributeId + 'notin%27' + bankPlatIds.join(',') + '%27)';
                }

                Common.UI.ChooseWindow(title, contentUrl + qs, callbackFn, 'Grid-@OMBankPlat.GetRegisterId()');
            });

            linkPlatGrid.element.find('.k-grid-toolbar > a.k-grid-edit').attr('editmode', 'true');
            
            linkPlatGrid.element.find('.k-grid-toolbar > a.k-grid-edit').on('click', function (e) {
                e.preventDefault();
                var selected = linkPlatGrid.select();

                if (selected.length > 0) {
                    linkPlatGrid.editRow(selected[0]);
                }
            });

            setEditMode(model.CreateMode);
        }, 0);

        var linkPlatToolbar = $('#link-plat-toolbar').kendoToolBar({
            items: [{
                type: 'button',
                id: 'buttonSave',
                text: '',
                click: function () {
                    Common.ClearNotification();
                    var platDataItem = linkPlatGrid.dataSource.at(0),
                        bankPlatSelectedRows = linkBankPlatsGrid.select();

                    if (!platDataItem) {
                        Common.ShowError('Не удалось определить запись зачисления');
                        return;
                    }

                    if (bankPlatSelectedRows.length > 1) {
                        Common.ShowError('Необходимо оставить только одну строку для связи');
                        return;
                    }

                    if (bankPlatSelectedRows.length == 0) {
                        Common.UI.ShowConfirm({
                            title: 'Подтверждение',
                            content: 'Внимание! Вы подтверждаете, что для строки зачислений от МФЦ не найдено соответствующей банковской строки оплаты? Для данной строки будет установлен статус "Ошибочная"',
                            onSuccess: function (e) {
                                kendo.ui.progress($('body'), true);

                                $.ajax({
                                    type: 'POST',
                                    url: '@Url.Action("NotConfirmedByBank", "InputPlat")',
                                    data: { inputPlatId: platDataItem.get('Id'), reason: $('#Reason').val() },
                                    success: function (e) {
                                        kendo.ui.progress($('body'), false);
                                        if (e.Errors && e.Errors.length > 0) {
                                            Common.ShowError(e.Errors.join('<br>'));
                                        } else {
                                            Common.UI.CloseWindow('registerModalWindow', window.parent);
                                        }
                                    }
                                });
                            }
                        });
                    }
                    else {
                        kendo.ui.progress($('body'), true);

                        $.ajax({
                            type: 'POST',
                            url: '@Url.Action("LinkPlat", "InputPlat")',
                            data: { inputPlatId: platDataItem.get('Id'), bankPlatId: linkBankPlatsGrid.dataItem(bankPlatSelectedRows[0]).get('Id'), reason: $('#Reason').val() },
                            success: function (e) {
                                kendo.ui.progress($('body'), false);
                                if (e.Errors && e.Errors.length > 0) {
                                    Common.ShowError(e.Errors.join('<br>'));
                                } else {
                                    Common.UI.CloseWindow('registerModalWindow', window.parent);
                                }
                            }
                        });
                    }
                },
                icon: 'save',
                overflow: 'never'
            },
            {
                type: 'button',
                id: 'buttonEdit',
                text: '',
                click: function () {
                    setEditMode(true);
                },
                icon: 'edit',
                overflow: 'never'
            }]
        }).data('kendoToolBar');
        
        var panelbar = $('#ls_panelbar').kendoPanelBar().data('kendoPanelBar');
        panelbar.expand('li');

        function setEditMode(value) {
            KendoExtension.ToggleEditMode(value);

            if (value === true) {
                linkPlatToolbar.hide($('#buttonEdit'));
                linkPlatToolbar.show($('#buttonSave'));
            }
            else {
                linkPlatToolbar.show($('#buttonEdit'));
                linkPlatToolbar.hide($('#buttonSave'));
            }
        }
    });
</script>