@using CIPJS.Models.ExpressScore
@using KadOzenka.Dal.Enum
@using ObjectModel.Directory
@using ObjectModel.Directory.ES
@using System.Configuration;


<link rel="stylesheet" href="~/css/jquery.fias.min.css" />
<style>
    .wrap-map {
        margin-top: 5px;
        display: flex;
        justify-content: center;
        background-color: white;
        height: 95vh;
        padding-left: 10px;
        padding-right: 10px;
        padding-bottom: 10px;
        border-radius: 10px;
        flex-direction: column;
    }

    #map {
        width: 100%;
        height: 100%;
    }

    .wrap-form {
        /*margin-top: 5px;*/
        padding-top: 20px;
        background-color: white;
        height: 95vh;
        border-radius: 10px;
        padding-right: 10px;
        overflow-y: scroll;
        overflow-x: hidden;
    }

    .separator {
        height: 3px;
        background-color: bisque;
    }

    label {
        font-weight: normal !important;
    }

    .btn-count {
        width: 100%;
    }

    #select-count {
        width: 100%;
    }

    input::-webkit-outer-spin-button,
    input::-webkit-inner-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }

    .wrapper-scenario {
        margin: 10px
    }

    .wrapper-success-dialog {
        margin: 10px
    }

	.wrapper-success-dialog label {
		font-weight: bold !important;
		display: block;
		padding: 2px;
	}

    div#slider {
        width: 100%;
    }
</style>

<div class="form-horizontal col-sm-12">
    <div class="form-group">
        <div class="col-sm-3">
            <div class="wrap-form">
                <div>
                    <h3 style="margin-top: 0">Параметры объекта</h3>
                </div>
                <div class="form-group">
                    <div class="col-sm-5">
                        @Html.CustomLabelFor("Адрес")
                    </div>
                    <div class="col-sm-12">
                        @Html.Kendo().TextBox().Name("address").HtmlAttributes(new { style = "width: 100%", spellcheck = false })
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-sm-10">
                        @Html.CustomLabelFor("Кадастровый № объекта", htmlAttributes: new { style = "padding-top: 0" })
                    </div>
                    <div class="col-sm-12">
                        @Html.Kendo().MaskedTextBox().Name("Kn").HtmlAttributes(new { style = "width: 100%" }).Mask("00:00:0000000:000##")
                    </div>
                </div>
                <div class="form-group">
                    <div class="separator col-sm-12"></div>
                </div>
                <div class="form-group">
                    <div class="col-sm-12 col-md-3">
                        @Html.CustomLabelFor("Сегмент", true)
                    </div>
                    <div class="col-sm-12 col-md-9">
                        @(Html.Kendo().DropDownList().Name("segment")
									.BindTo(ComboBoxHelper.GetSelectList(typeof(MarketSegment), new long[] { 744, 745, 750, 746, 747, 748, 749, 751, 752, 753, 754, 795 })).NoDataTemplate("Ничего не найдено!")
									.Events(e => e.Cascade("handlerChangeSegment")))
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-sm-12 col-md-3">
                        @Html.CustomLabelFor("Площадь", true)
                    </div>
                    <div class="col-sm-12 col-md-4">
                        @Html.Kendo().TextBox().Name("square").HtmlAttributes(new { style = "width: 100%", type = "number" })
                    </div>
                    <div class="col-sm-3 col-md-2">
                        @Html.CustomLabelFor("Этаж")
                    </div>
                    <div class="col-sm-12 col-md-3">
                        @Html.Kendo().TextBox().Name("floor").HtmlAttributes(new { style = "width: 100%" })
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-sm-12">
                        @Html.CustomLabelFor("Учитывать год постройки")
                    </div>
                    <div class="col-sm-9">
                        @Html.Kendo().RadioButton().Name("UseYearBuild").Label("Да").Value(true).Checked(true)
                        @Html.Kendo().RadioButton().Name("UseYearBuild").Label("Нет").Value(false)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-sm-12">
                        @Html.CustomLabelFor("Учитывать площадь")
                    </div>
                    <div class="col-sm-9">
                        @Html.Kendo().RadioButton().Name("UseSquare").Label("Да").Value(true).Checked(true)
                        @Html.Kendo().RadioButton().Name("UseSquare").Label("Нет").Value(false)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-sm-12">
                        @Html.CustomLabelFor("Тип сделки")
                    </div>
                    <div class="col-sm-9">
                        @Html.Kendo().RadioButton().Name("DealTypeShort").Label(DealTypeShort.Rent.GetEnumDescription()).Value(DealTypeShort.Rent).Checked(true)
                        @Html.Kendo().RadioButton().Name("DealTypeShort").Label(DealTypeShort.Sale.GetEnumDescription()).Value(DealTypeShort.Sale)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-sm-10">
                        @Html.CustomLabelFor("Дата актуальности", true)
                    </div>
                    <div class="col-sm-12">
                        @Html.Kendo().DatePicker().Name("ActualDate").Max(DateTime.Now).Value(DateTime.Now.Date)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-sm-10">
                        @Html.CustomLabelFor("Количество аналогов", htmlAttributes: new { style = "padding-top: 0" })
                    </div>
                    <div class="col-sm-12">
                        <input id="slider" value="0" title="slider" />
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-sm-12 col-md-5">
                        <button class="k-button analogs" type="button">Поиск</button>
                    </div>
                    <div class="col-sm-12 col-md-7">
                        <button id="" disabled="disabled" class="k-button calculate" type="button">Расчитать стоимость</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-sm-9">
            <div class="wrap-map">
                <div id="map"></div>
            </div>
        </div>
    </div>
</div>
<div id="dialog">
</div>
<div id="successDialog">
</div>
<div id="updateTargetObject">
</div>


<script src="~/MapScripts/config.js" charset="utf-8"></script>
<script src="~/js/jquery.fias.min.js"></script>
<script src="~/js/custom-validation.js"></script>
<script src="~/js/common-modals.js"></script>

<!-- Поиск точек, поиск адреса и кад номера. Настройки карты-->
<script type="text/javascript">
	var map;
	var findPoints = [];
	var findPointsIds = [];
	var $addresses = $('#address');
	var typeShortList = [/г\./gi, /пгт\./gi, /п\./gi, /д\./gi, /c\./gi, /ул\./gi, /строение/gi];
	var myMarker;
	var myPlacemark;
	var currentAddress = null;
	var targetObjectId = null;

	function handlerChangeSegment() {
		$('.calculate').prop('disabled', true);
		removeFindPoints();
	}

	function setCurrentAddress(address) {
		if (address) {
			currentAddress = address;
			return;
		}
		currentAddress = null;
	}

	function removeMyMarker() {
		if (!!map) {
			map.geoObjects.remove(myMarker);
			myMarker = null;
		}
	}

	function removeMyPlacemark() {
		if (!!map) {
			map.geoObjects.remove(myPlacemark);
			myPlacemark = null;
		}
	}

	function removeFindPoints() {
		findPoints.forEach(function (item) { if (!!map) map.geoObjects.remove(item); });
		findPoints = [];
		findPointsIds = [];
	}

	$("#slider").kendoSlider({ increaseButtonTitle: "Right", decreaseButtonTitle: "Left", min: -0, max: 30, smallStep: 1, largeStep: 10, showButtons: false, dragHandleTitle: 0 });
	var slider = $("#slider").getKendoSlider();
	slider.wrapper.css("width", "95%");
	slider.wrapper.css("margin-left", "5px");
	slider.resize();
	slider.bind('change', handlerChangeSlider);

	function handlerChangeSlider(e) { $(slider.wrapper).find('.k-draghandle').prop('title', e.value); }
	//Устанавливаем кад номер в 2-х случиях
	//1 - ввели самии адрес
	// 2 - указали точку на карте
	function setKadNumber(address) {
		getKadNumber(address).then(function (data) {
			if (data.kadNumber) { $('#Kn').val(data.kadNumber); }
		}).catch(function (data) {
			var errors = getErrors(data.Errors);
			Common.ShowError(errors);
			$('#Kn').val('');
			console.error("Произошла ошибка при получении кадастрового номера", data);
		});
	}

	// promises
	var getKadNumber = (currentAddresses) => new Promise(function(resolve, reject) {
		var url = "@Url.Action("GetKadNumber", "ExpressScore")" + `?address=${currentAddresses}`;
		kendo.ui.progress($('body'), true);
		$.get(url).done(function (data) {
			if (data.response) resolve(data.response);
			if (data.Errors) reject(data);
		}).fail(function(data) { reject(data); }).always(function() { kendo.ui.progress($('body'), false); });
	});

	var getAddressByKadNumber = (kadNumber) => new Promise(function(resolve, reject) {
		var url = "@Url.Action("GetAddressByKadNumber", "ExpressScore")" + `?kadNumber=${kadNumber}`;
        kendo.ui.progress($('body'), true);
        $.get(url).done(function (data) {
            if (data.response) resolve(data.response);
            if (data.Errors) reject(data.Errors);
        }).fail(function(data) { reject(data); }).always(function() { kendo.ui.progress($('body'), false); });
    });

    //fias
    $addresses.on('focus', function () { $addresses.on('kladr_close_before', closeBefore); });
    $addresses.on('blur', function () { $addresses.off('kladr_close_before', closeBefore); });

    function closeBefore() {
        if (!!$('#address').val()) {
            var myGeocoder = ymaps.geocode($('#address').val());
            setMarkerByGeoCoder(myGeocoder).then(function (geoObject) {
                removeFindPoints();
                if (geoObject.getPremiseNumber()) {
                    setCurrentAddress(geoObject.getAddressLine());
                    setKadNumber(geoObject.getAddressLine());
                }
            });
        }
    }

    $addresses.fias({
        oneString: true,
        parentType: $.fias.type.region,
        parentId: '7700000000000',
        labelFormat: function(obj, query) { return getCorrectRow(obj); },
        valueFormat: function(obj, query) { return getCorrectRow(obj); },
        sendBefore: function(query) {
            if (query.name) typeShortList.forEach(function(str) { query.name = query.name.replace(str, ''); });
            else query.name = '';
        }
    });

    function getCorrectRow(obj) {
        var arrayNames = [];
        obj.parents.forEach(function(item) {
            switch (item.contentType) {
            case 'street':
                arrayNames.splice(3, 0, ' ' + item.typeShort + '. ' + item.name);
                break;
            case 'city':
                arrayNames.splice(2, 0, ' ' + item.typeShort + '. ' + item.name);
                break;
            case 'region':
                arrayNames.splice(0, 0, ' ' + item.typeShort + '. ' + item.name);
                break;
            case 'district':
                arrayNames.splice(1, 0, ' ' + item.typeShort + '. ' + item.name);
                break;
            default:
                break;
            }
        });
        arrayNames.push(' ' + obj.typeShort + '. ' + obj.name);
        return arrayNames.filter((v, i, a) => a.indexOf(v) === i).join(',');
    }

    //fias geopoint
    function setMarkerByGeoCoder(geocoder) {
        if (typeof geocoder === 'string') geocoder = ymaps.geocode(geocoder);
        return new Promise(function (resolve) {
            geocoder.then(function (res) {
                if (!!myMarker) removeMyMarker();
                if (!!myPlacemark) removeMyPlacemark();
                var firstGeoObject = res.geoObjects.get(0), bounds = firstGeoObject.properties.get('boundedBy');
                myMarker = firstGeoObject;
                map.geoObjects.add(firstGeoObject);
                map.setBounds(bounds, { checkZoomRange: true });
                resolve(firstGeoObject);
            });
        });
    }

    $(document).ready(function() {
        $('#Kn').on('blur', function () {
            var val = $(this).val().replace(/_/gi, '');
            $('#Kn').val(val);
            if (!!val && !val.startsWith(':')) {
                getAddressByKadNumber(val).then(function(data) {
                    if (data.address) {
                        $('#address').val(data.address.replace('Россия, ', ''));
                        setMarkerByGeoCoder(data.address).then(function () { });
                        setCurrentAddress(data.address);
                    }
                }).catch(function (data) {
                    var errors = getErrors(data);
                    $('#address').val('');
                    Common.ShowError(errors);
                    console.error("Произошла ошибка при получении адреса", error);
                });
            }
        });

        $('.analogs').on('click', function () {
            removeFindPoints();
            var point = myPlacemark || myMarker;
            var coordinates = (point && point.geometry.getCoordinates()) || null;
            var floor = $('#floor').val();
            var square = $('#square').val();
            var segment = $('#segment').val();
            var quality = $("#slider").getKendoSlider() && $("#slider").getKendoSlider().value() || 0;
            var dealTypeShort = $("input[name='DealTypeShort']:checked").val();
            var actualDate = kendo.toString($("#ActualDate").data('kendoDatePicker').value(), "MM/dd/yyyy");
            var useYearBuild = $("input[name='UseYearBuild']:checked").val();
			var useSquare = $("input[name='UseSquare']:checked").val();
			var kn =  $('#Kn').val();
            if (quality === 0) {
                Common.ShowError('Выберите количество аналогов');
                return;
            }
            if (!segment || segment === "0") {
                Common.ShowError('Заполните сегмент');
                return;
            }
            if (!coordinates) {
            	Common.ShowError('Выберите или заполните целевой объект');
            	return;
            }
            kendo.ui.progress($('body'), true);

            var url = "@Url.Action("GetNearestObjects", "ExpressScore")" + `?Floor=${floor}&Square=${square}
														&Segment=${segment}&Quality=${quality}&SelectedLat=${coordinates[0]}&SelectedLng=${coordinates[1]}&Kn=${kn}
															&DealTypeShort=${dealTypeShort}&ActualDate=${actualDate}&UseYearBuild=${useYearBuild}&UseSquare=${useSquare}`;
            $.get(url).done(function (data) {
                if (data.updateTargetObjectUrl) {
                    $("#updateTargetObject").html("");
                    $("#updateTargetObject").load(data.updateTargetObjectUrl);
                    var modal = $("#updateTargetObject");
                    ShowModal(modal, '50%', '50%', "Внесение недостающих данных", () => {
                        if (!!myMarker) removeMyMarker();
                        if (!!myPlacemark) removeMyPlacemark();
                        clearFields();
                    });
                    return;
                }
                if (data.Errors) {
                    var errors = getErrors(data.Errors);
					Common.ShowError(errors);
					return;
				}
				if (data.response && data.response.targetObjectId) targetObjectId = data.response.targetObjectId;
				if (data.response && data.response.coordinates) {
					Common.ShowMessage(`Было найдено ${data.response.coordinates.length} объектов.`);
					$(slider.wrapper).find('.k-draghandle').prop('title', data.response.coordinates.length);
					slider.value(data.response.coordinates.length);
					$('.calculate').prop('disabled', false);
					data.response.coordinates.forEach(function (data) {
						findPointsIds.push(data.Id);
						var coord = [data.Lat, data.Lng];
						ymaps.geocode(coord).then(function(res) {
							var firstGeoObject = res.geoObjects.get(0);
							if (firstGeoObject) {
								// Создание макета содержимого балуна.
								var balloonContentLayout = ymaps.templateLayoutFactory.createClass(
									data.ObjectMiniCard,
									{
										// Переопределяем функцию build, чтобы при создании макета начинать
										// слушать событие click на кнопке.
										build: function() {
											balloonContentLayout.superclass.build.call(this);
											$("#excludeFromCalculation_" + data.Id).kendoButton({ click: excludeFromCalculation });
										},
										// Переопределяем функцию clear, чтобы снять
										// прослушивание клика при удалении макета с карты.
										clear: function() {
											$("#excludeFromCalculation_" + data.Id).unbind('click', excludeFromCalculation);
											balloonContentLayout.superclass.clear.call(this);
										}
									});
									var newPoint = new ymaps.Placemark(firstGeoObject.geometry.getCoordinates(),
										{ pointId: data.Id },
										{
											balloonContentLayout: balloonContentLayout,
											// Запретим замену обычного балуна на балун-панель.
											// Если не указывать эту опцию, на картах маленького размера откроется балун-панель.
											balloonPanelMaxMapArea: 0,
											preset: 'islands#orangeDotIconWithCaption'
										}
									);
									newPoint.properties.set({
										// Формируем строку с данными об объекте.
										iconCaption: [firstGeoObject.getLocalities().length ? firstGeoObject.getLocalities() : firstGeoObject.getAdministrativeAreas(), firstGeoObject.getThoroughfare() || firstGeoObject.getPremise()].filter(Boolean).join(', ')
									});
									newPoint.options.set('balloonMinWidth', 500);
									newPoint.options.set('balloonMaxWidth', 800);
									newPoint.options.set('balloonMinHeight', 420);
									findPoints.push(newPoint);
									map.geoObjects.add(newPoint);
								}
							});
					});
					map.setZoom(13);
				}
			}).always(function() { kendo.ui.progress($('body'), false); });
		});
	});


	// инициализация карты и евенты
	function init() {
		var script = document.createElement('script');
        console.log(`@ConfigurationManager.AppSettings["YandexLink"]`.replace(/&amp;/g, '&'));
        script.src = `@ConfigurationManager.AppSettings["YandexLink"]`.replace(/&amp;/g, '&');
		//`http://10.80.214.37:8888/?protocol=https&version=2.1&lang=ru_RU&key=5b7a0369-63be-4edd-ac27-716d52c64d46`;
		//`${AppData.protocol}://api-maps.yandex.ru/${AppData.version}/?apikey=${AppData.key}&lang=${AppData.lang}`;
        script.type = "text/javascript";
		document.head.appendChild(script);
		script.onload = function() {
			ymaps.ready(function() {
				map = new ymaps.Map('map', { center: MapSettings.center, zoom: MapSettings.zoom, controls: ['fullscreenControl', 'zoomControl'] });
				map.events.add('click',
				function(e) {
					// Получение координат щелчка
					var coords = e.get('coords');
					removeFindPoints();
					clearFields();
					if (myMarker) removeMyMarker();
					if (myPlacemark) myPlacemark.geometry.setCoordinates(coords);
					else {
						myPlacemark = createPlacemark(coords);
						map.geoObjects.add(myPlacemark);
						myPlacemark.events.add('dragend', function() { getAddress(myPlacemark.geometry.getCoordinates()); });
					}
					getAddress(coords);
				});
			});
		}
	};

	init();

	function clearFields() {
		$('#address').val('');
		$('#Kn').val('');
	}

	function getAddress(coords) {
		myPlacemark.properties.set('iconCaption', 'поиск...');
		ymaps.geocode(coords).then(function(res) {
			var firstGeoObject = res.geoObjects.get(0);
			if (firstGeoObject.getAdministrativeAreas().length === 0 || firstGeoObject.getAdministrativeAreas().length > 1 || (firstGeoObject.getAdministrativeAreas() === 1 && firstGeoObject.getAdministrativeAreas()[0] !== "Москва")) {
				removeMyPlacemark();
				Common.ShowError("Объект за пределами г.Москва");
				return;
			}
			if (firstGeoObject.getPremiseNumber()) {
				$('#address').val(firstGeoObject.getAddressLine().replace('Россия, ', ''));
				setKadNumber(firstGeoObject.getAddressLine());
				setCurrentAddress(firstGeoObject.getAddressLine());
			}
			myPlacemark.properties.set({
                // Формируем строку с данными об объекте.
                iconCaption: [firstGeoObject.getLocalities().length ? firstGeoObject.getLocalities() : firstGeoObject.getAdministrativeAreas(), firstGeoObject.getThoroughfare() || firstGeoObject.getPremise()].filter(Boolean).join(', '),
				balloonContent: firstGeoObject.getAddressLine()
            });
		});
	}

	function createPlacemark(coords) { return new ymaps.Placemark(coords, { iconCaption: 'поиск...' }, { preset: 'islands#violetDotIconWithCaption', draggable: true }); }

</script>

<!--Пересчет стоимости-->
<script type="text/javascript">

	function updateCost(cost, squareCost) {
		if (cost && squareCost) {
			$('#cost').text(cost.toLocaleString());
			$('#squareCost').text(squareCost.toLocaleString());
		}
	}

	function updateReportId(reportId = null) { if (reportId) $('#report').data('report-id', reportId); }

	$(document).ready(function () {
		initDialog();
		$('.calculate').on('click', function () {
			if (!$('#floor').val()) {
				Common.ShowError("Заполните поле этаж");
				return;
			}
			if (!$('#square').val()) {
				Common.ShowError("Заполните поле площадь");
				return;
			}
			showModal();
		});
	});


	function executeCalculate(scenarioType = null) {
		if (scenarioType == null || scenarioType === 0) {
			Common.ShowError("Не удалось получить тип расчета. Попробуйте еще раз");
			return;
		}
		var data = {
			selectedPoints: findPointsIds, targetObjectId, scenarioType, floor: $('#floor').val(), square: $('#square').val(),
			segment: $('#segment').val(), address: $('#address').val(), kn: $('#Kn').val(), dealType: $("input[name='DealTypeShort']:checked").val()
		}
		var topBody = window.top.document.body;
		kendo.ui.progress($(topBody), true);
		var url = "@Url.Action("CalculateCostTargetObject", "ExpressScore")";
		$.post(url, data).done(function (data) {
			if (data.Errors) {
				var errors = getErrors(data.Errors);
				Common.ShowError(errors);
				return;
			}
			$('.wrapper-success-dialog').html(data);
			$('.ajax-data-loading').ajaxDataLoader();
			$('#successDialog').data('kendoDialog') && $('#successDialog').data('kendoDialog').open();
        })
            .fail(function (response) {
                Common.ShowError(response.responseText);
            })
            .always(function () { kendo.ui.progress($(topBody), false); });
		return;
	}

	function showModal() { $('#dialog').data('kendoDialog') && $('#dialog').data('kendoDialog').open(); }

	function initDialog() {
		$('#dialog').kendoDialog({
			width: "450px",
			title: "Выберите сценарий расчета",
			closable: false,
			modal: true,
			content: '<div class="wrapper-scenario">'+
				'@Html.Kendo().DropDownList().Name("scenario").BindTo(ComboBoxHelper.GetSelectList(typeof(ScenarioType))).NoDataTemplate("Ничего не найдено!").Value("1").ToClientTemplate()'
				+ '</div>',
			visible: false,
			buttonLayout: "normal",
			actions: [
				{ text: 'Отмена' },
				{
					text: 'Выбрать', primary: true,
					action: function (e) {
						if (e.sender.element.find('#scenario')) {
							var value = e.sender.element.find('#scenario').data('kendoDropDownList') && e.sender.element.find('#scenario').data('kendoDropDownList').value() || null;
							executeCalculate(value);
						}
						return true;
					}
				}
			]
		});

		$('#successDialog').kendoDialog({
			width: 1300,
			height: 600,
			title: "Расчет успешно выполнен",
			closable: false,
			modal: true,
			content: '<div class="wrapper-success-dialog"></div>',
			visible: false,
			buttonLayout: "normal",
			actions: [ { text: 'Ок' } ]
		});
	}

	function excludeFromCalculation() {
		var initElement = $(this);
		var buttonId = initElement[0].element[0].id;
		var objId = parseInt(buttonId.split('_')[1]);
		findPointsIds.remove(objId);
		findPoints.forEach(function(item) { if (!!map) { if (item.properties._data.pointId === objId) map.geoObjects.remove(item); } });
		if (slider) {
			slider.value(findPointsIds.length);
			$(slider.wrapper).find('.k-draghandle').prop('title', findPointsIds.length);
		}
		Common.ShowMessage("Объект исключен из расчета");
	}

</script>