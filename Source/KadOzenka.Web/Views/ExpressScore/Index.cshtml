@using ObjectModel.Directory

<link rel="stylesheet" href="~/css/jquery.fias.min.css" />
<style>
	.wrap-map {
		margin-top: 5px;
		display: flex;
		justify-content: center;
		background-color: white;
		height: 93vh;
		padding-left: 10px;
		padding-right: 10px;
		padding-bottom: 10px;
		border-radius: 10px;
		flex-direction: column;
	}
	#map {
		width: 100%;
		height: 100%;
	}
	.wrap-form {
		margin-top: 5px;
		padding-top: 20px;
		background-color: white;
		height: 93vh;
		border-radius: 10px;
		padding-right: 10px;
	}
	.separator {
		height: 3px;
		background-color: bisque;
	}
	label {
		font-weight: normal !important;
	}
	.btn-count {
		width: 100%;
	}
	#select-count {
		width: 100%;
	}
	input::-webkit-outer-spin-button,
	input::-webkit-inner-spin-button {
		-webkit-appearance: none;
		margin: 0;
	}
</style>

<div class="form-horizontal col-sm-12">
	<div class="form-group">
		<div class="col-sm-4">
			<div class="wrap-form">
				<div>
					<h3 style="margin-top: 0">Параметры объекта</h3>
				</div>
				<div class="form-group">
					<div class="col-sm-3">
						@Html.CustomLabelFor("Адрес")
					</div>
					<div class="col-sm-9">
						@Html.Kendo().TextBox().Name("address").HtmlAttributes(new { style = "width: 100%", spellcheck = false })
					</div>
				</div>
				<div class="form-group">
					<div class="col-sm-3">
						@Html.CustomLabelFor("Кадастровый № объекта", htmlAttributes: new { style = "padding-top: 0" })
					</div>
					<div class="col-sm-9">
						@Html.Kendo().MaskedTextBox().Name("Kn").HtmlAttributes(new { style = "width: 100%" }).Mask("00:00:0000000:000##")
					</div>
				</div>
				<div class="form-group">
					<div class="separator col-sm-12"></div>
				</div>
				<div class="form-group">
					<div class="col-sm-3">
						@Html.CustomLabelFor("Площадь", true)
					</div>
					<div class="col-sm-4">
						@Html.Kendo().TextBox().Name("square").HtmlAttributes(new { style = "width: 100%", type = "number" })
					</div>
					<div class="col-sm-2">
						@Html.CustomLabelFor("Этаж")
					</div>
					<div class="col-sm-3">
						@Html.Kendo().TextBox().Name("floor").HtmlAttributes(new { style = "width: 100%" })
					</div>
				</div>
				<div class="form-group">
					<div class="col-sm-3">
						@Html.CustomLabelFor("Вход")
					</div>
					<div class="col-sm-5">
						@Html.Kendo().RadioButton().Name("entrance").Label("Отдельный").Value("separate").Enable(false)
						@Html.Kendo().RadioButton().Name("entrance").Label("Общий").Value("common").Enable(false)
					</div>
				</div>
				<div class="form-group">
					<div class="col-sm-3">
						@Html.CustomLabelFor("Линия застройки")
					</div>
					<div class="col-sm-9">
						@Html.Kendo().RadioButton().Name("entrance").Label("Первая линия").Value("1").Enable(false)
						@Html.Kendo().RadioButton().Name("entrance").Label("Первая второстепенная").Value("2").Enable(false)
						@Html.Kendo().RadioButton().Name("entrance").Label("Внутреквартальная").Value("3").Enable(false)
					</div>
				</div>
				<div class="form-group">
					<div class="col-sm-3">
						@Html.CustomLabelFor("Состояние отделки", htmlAttributes: new { style = "padding-top: 0" })
					</div>
					<div class="col-sm-9">
						@Html.Kendo().TextBox().Name("type").HtmlAttributes(new { style = "width: 100%" }).Enable(false)
					</div>
				</div>
				<div class="form-group">
					<div class="col-sm-3">
						@Html.CustomLabelFor("Сегмент")
					</div>
					<div class="col-sm-9">
						@Html.Kendo().DropDownList().Name("segment").BindTo(ComboBoxHelper.GetSelectList(typeof(MarketSegment))).NoDataTemplate("Ничего не найдено!")
					</div>
				</div>
				<div class="form-group">
					<div class="col-sm-3">
						@Html.CustomLabelFor("Количество аналогов", htmlAttributes: new { style = "padding-top: 0" })
					</div>
					<div class="col-sm-9">
						<div id="select-count">
						</div>
					</div>
				</div>
				<div class="form-group">
					<div class="separator col-sm-12"></div>
				</div>
				<div class="form-group">
					<div class="col-sm-4">
						<button id="" class="k-button" type="button">Пересчитать стоимость</button>
					</div>
				</div>
			</div>
		</div>
		<div class="col-sm-8">
			<div class="wrap-map">
				<div>
					<h3>Местоположение</h3>
				</div>
				<div id="map"></div>
			</div>
		</div>
	</div>
</div>

<script src="~/MapScripts/config.js" charset="utf-8"></script>
<script src="~/js/jquery.fias.min.js"></script>
<script src="~/js/custom-validation.js"></script>
<script type="text/javascript">
	var map;
	var findPoints = [];
	var $addresses = $('#address');
	var typeShortList = [/г\./gi, /пгт\./gi, /п\./gi, /д\./gi, /c\./gi, /ул\./gi, /строение/gi];
	var myMarker;
	var myPlacemark;

	function removeMyMarker() {
		if (!!map) {
			map.geoObjects.remove(myMarker);
			myMarker = null;
		}
	}

	function removeMyPlacemark() {
		if (!!map) {
			map.geoObjects.remove(myPlacemark);
			myPlacemark = null;
		}
	}

	function removeFindPoints() {
		findPoints.forEach(function (item) {
			if (!!map) {
				map.geoObjects.remove(item);
			}
		});
		findPoints = [];
	}

	$("#select-count").kendoButtonGroup({
		items: [
			{ text: "5", attributes: { class: "btn-count analogs" } },
			{ text: "10", attributes: { class: "btn-count analogs " } },
			{ text: "20", attributes: { class: "btn-count analogs" } }
		]
	});


	//Устанавливаем кад номер в 2-х случиях
	//1 - ввели самии адрес
	// 2 - указали точку на карте
	function setKadNumber(address) {
		getKadNumber(address).then(function (data) {
			if (data.kadNumber) {
				$('#Kn').val(data.kadNumber);
			}
		}).catch(function (error) {
			if (error.Message) {
				Common.ShowError(error.Message);
				$('#Kn').val('');
				return;
			}
			console.error("Произошла ошибка при получении кадастрового номера", error);
		});
	}

	// promises
	var getKadNumber = (currentAddresses) => new Promise(function(resolve, reject) {
		var url = "@Url.Action("GetKadNumber", "ExpressScore")" + `?address=${currentAddresses}`;
		$.get(url).done(function (data) {
			if (data.response) {
				resolve(data.response);
			}
			if (data.Errors) {
				reject(data.Errors);
			}
			
		}).fail(function(data) {
			reject(data);
		});
	});

	var getAddressByKadNumber = (kadNumber) => new Promise(function(resolve, reject) {
		var url = "@Url.Action("GetAddressByKadNumber", "ExpressScore")" + `?kadNumber=${kadNumber}`;
		$.get(url).done(function (data) {
			if (data.response) {
				resolve(data.response);
			}
			if (data.Errors) {
				reject(data.Errors);
			}
			
		}).fail(function(data) {
			reject(data);
		});
	});
	// end promises


	//fias
	$addresses.fias({
		oneString: true,
		parentType: $.fias.type.region,
		parentId: '7700000000000',
		labelFormat: function(obj, query) {
			return getCorrectRow(obj);
		},
		valueFormat: function(obj, query) {
			return getCorrectRow(obj);
		},
		closeBefore: function () {
			$('#address').blur();
			if (!!$('#address').val()) {
				var myGeocoder = ymaps.geocode($('#address').val());
				setMarkerByGeoCoder(myGeocoder).then(function (geoObject) {
					removeFindPoints();
					if (geoObject.getPremiseNumber()) {
						setKadNumber(geoObject.getAddressLine());
					}
				});
			}
		},
		sendBefore: function(query) {
			if (query.name) {
				typeShortList.forEach(function(str) {
					query.name = query.name.replace(str, '');
				});
			} else {
				query.name = '';
			}
		}
	});

	function getCorrectRow(obj) {
		var arrayNames = [];
		obj.parents.forEach(function(item) {
			switch (item.contentType) {
			case 'street':
				arrayNames.splice(3, 0, ' ' + item.typeShort + '. ' + item.name);
				break;
			case 'city':
				arrayNames.splice(2, 0, ' ' + item.typeShort + '. ' + item.name);
				break;
			case 'region':
				arrayNames.splice(0, 0, ' ' + item.typeShort + '. ' + item.name);
				break;
			case 'district':
				arrayNames.splice(1, 0, ' ' + item.typeShort + '. ' + item.name);
				break;
			default:
				break;
			}
		});
		arrayNames.push(' ' + obj.typeShort + '. ' + obj.name);
		return arrayNames.filter((v, i, a) => a.indexOf(v) === i).join(',');
	}
	// end fias

	//fias geopoint
	function setMarkerByGeoCoder(geocoder) {
		if (typeof geocoder === 'string') {
			geocoder = ymaps.geocode(geocoder);
		}
		return new Promise(function (resolve) {
			geocoder.then(function (res) {

				if (!!myMarker) {
					removeMyMarker();
				}

				if (!!myPlacemark) {
					removeMyPlacemark();
				}

				var firstGeoObject = res.geoObjects.get(0),
					bounds = firstGeoObject.properties.get('boundedBy');

				myMarker = firstGeoObject;
				map.geoObjects.add(firstGeoObject);
				map.setBounds(bounds,
					{
						checkZoomRange: true
					});

				resolve(firstGeoObject);
			});
		});
	}
	// end fias geopoint

	$(document).ready(function() {
		$('#Kn').on('blur', function () {
			var val = $(this).val().replace(/_/gi, '');
			$('#Kn').val(val);
			if (!!val && !val.startsWith(':')) {
				getAddressByKadNumber(val).then(function(data) {
					if (data.address) {
						$('#address').val(data.address.replace('Россия, ', ''));
						setMarkerByGeoCoder(data.address).then(function () {});
					}
				}).catch(function(error) {
					if (error.Message) {
						Common.ShowError(error.Message);
						$('#address').val('');
						return;
					}
					console.error("Произошла ошибка при получении кадастрового номера", error);
				});
			}
		});

	
		$('.analogs').on('click',
			function () {
				removeFindPoints();
				var point = myPlacemark || myMarker;
				var coordinates = (point && point.geometry.getCoordinates()) || null;
				var floor = $('#floor').val();
				var square = $('#square').val();
				var segment = $('#segment').val();
				var quality = $(this).text();
			
				//if (!square || square === "0") {
				//	Common.ShowError('Заполните площадь');
				//	return;
				//}
				if (!coordinates) {
					Common.ShowError('Выберите или заполните целевой объект');
					return;
				}

				kendo.ui.progress($('body'), true);
				var url = "@Url.Action("GetNearestObjects", "ExpressScore")" + `?Floor=${floor}&Square=${square}&Segment=${segment}&Quality=${quality}&SelectedLat=${coordinates[0]}&SelectedLng=${coordinates[1]}`;
				$.get(url).done(function (data) {

					if (data.Errors) {
						var errors = $.map(distinctErrors(data.Errors),
							function(el) {
								return el.Message;
							});
						Common.ShowError(errors);
						return;
					}
						if (data.response && data.response.coordinates) {
							data.response.coordinates.forEach(function (data) {
								var coord = [data.Lat, data.Lng];
								ymaps.geocode(coord).then(function(res) {
									var firstGeoObject = res.geoObjects.get(0);

									if (firstGeoObject) {
										var newPoint = new ymaps.Placemark(firstGeoObject.geometry.getCoordinates(),
											{
												iconCaption: 'поиск...'
											},
											{
												preset: 'islands#orangeDotIconWithCaption'
											});

										newPoint.properties.set({
											// Формируем строку с данными об объекте.
											iconCaption: [
												firstGeoObject.getLocalities().length
												? firstGeoObject.getLocalities()
												: firstGeoObject.getAdministrativeAreas(),
												firstGeoObject.getThoroughfare() || firstGeoObject.getPremise()
											].filter(Boolean).join(', '),
											balloonContent: firstGeoObject.getAddressLine()
										});

										findPoints.push(newPoint);

										map.geoObjects.add(newPoint);
									}
								});
							});
							map.setZoom(9);
						}
					}).always(function() {
						kendo.ui.progress($('body'), false);
					});
			});
	});


	// инициализация карты и евенты
	function init() {
		var script = document.createElement('script');
		script.src =
			`${AppData.protocol}://api-maps.yandex.ru/${AppData.version}/?apikey=${AppData.key}&lang=${AppData.lang}`;
		script.type = "text/javascript";
		document.head.appendChild(script);
		script.onload = function() {
			ymaps.ready(function() {
				map = new ymaps.Map('map',
					{
						center: MapSettings.center,
						zoom: MapSettings.zoom,
						controls: ['fullscreenControl', 'zoomControl']
					});

				map.events.add('click',
					function(e) {
						// Получение координат щелчка
						var coords = e.get('coords');
						removeFindPoints();
						clearFields();
						if (myMarker) {
							removeMyMarker();
						}

						if (myPlacemark) {
							myPlacemark.geometry.setCoordinates(coords);
						} else {
							myPlacemark = createPlacemark(coords);
							map.geoObjects.add(myPlacemark);
							myPlacemark.events.add('dragend',
								function() {
									getAddress(myPlacemark.geometry.getCoordinates());
								});
						}
						getAddress(coords);
					});
			});
		}
	};

	init();

	function clearFields() {
		$('#address').val('');
		$('#Kn').val('');
	}

	function getAddress(coords) {
		myPlacemark.properties.set('iconCaption', 'поиск...');
		ymaps.geocode(coords).then(function(res) {
			var firstGeoObject = res.geoObjects.get(0);

	
			if (firstGeoObject.getAdministrativeAreas().length === 0 || firstGeoObject.getAdministrativeAreas().length > 1 ||
				(firstGeoObject.getAdministrativeAreas() === 1 &&
				firstGeoObject.getAdministrativeAreas()[0] !== "Москва")) {
				removeMyPlacemark();
				Common.ShowError("Объект за пределами г.Москва");
				return;
			}

			if (firstGeoObject.getPremiseNumber()) {
				$('#address').val(firstGeoObject.getAddressLine().replace('Россия, ', ''));
				setKadNumber(firstGeoObject.getAddressLine());
			}
			
			myPlacemark.properties.set({
				// Формируем строку с данными об объекте.
				iconCaption: [
					firstGeoObject.getLocalities().length
					? firstGeoObject.getLocalities()
					: firstGeoObject.getAdministrativeAreas(),
					firstGeoObject.getThoroughfare() || firstGeoObject.getPremise()
				].filter(Boolean).join(', '),
				balloonContent: firstGeoObject.getAddressLine()
			});
		});
	}

	function createPlacemark(coords) {
		return new ymaps.Placemark(coords,
			{
				iconCaption: 'поиск...'
			},
			{
				preset: 'islands#violetDotIconWithCaption',
				draggable: true
			});
	}
	// end инициализация карты
</script>