@using KadOzenka.Dal.Enum
@using KadOzenka.Dal.ExpressScore.Dto
@model ResultCalculateDto

<style type="text/css">
    #gearButton-100_wrapper {
		display: none;
    }

    #showRefreshButton-100 {
		display: none;
    }
	#resultGrid > table {
		table-layout: fixed;
	}
</style>

<div class="form-horizontal col-sm-12">
	<div class="form-group"></div>
	@if (Model.DealType == DealTypeShort.Sale)
	{
		<div class="form-group">
			<div class="col-sm-12">
				<text>Рыночная стоимость объекта оценки, руб: </text><text id="cost">@(Model.SummaryCost.ToString("N"))</text>
			</div>
			<div class="col-sm-12">
				<text>Удельный показатель рыночной стоимости объекта оценки, руб/кв.м: </text><text id="squareCost">@(Model.SquareCost.ToString("N"))</text>
			</div>
			<div class="col-sm-12">
				<text>Адрес объекта оценки: </text><text id="address">@(Model.Address)</text>
			</div>
			<div class="col-sm-12">
				<text>Площадь объекта оценки: </text><text id="area">@(Model.Area)</text>
			</div>
			<div class="col-sm-12">
				<text>Сегмент рынка объекта оценки: </text><text id="marketSegment">@(Model.MarketSegment.GetEnumDescription())</text>
			</div>
			<div class="col-sm-12">
				<text>Тип объекта оценки: </text><text id="marketSegment">@(Model.DealType.GetEnumDescription())</text>
			</div>
		</div>
	}
	
	@if (Model.DealType == DealTypeShort.Rent)
	{
		<div class="form-group">
			<div class="col-sm-12">
				<text>Арендная ставка объекта оценки, руб/год : </text><text id="cost">@((Model.SummaryCost * 12).ToString("N")) </text>
			</div>
			<div class="col-sm-12">
				<text>Арендная ставка объекта оценки, руб/кв. м/год: </text><text id="squareCost">@((Model.SquareCost * 12).ToString("N"))</text>
			</div>
		</div>
	}
	
	<div class="form-group">
		<div class="col-sm-12">
			@if (Model.ReportId != -1)
			{
				<button id="report" data-report-id="@Model.ReportId" class="k-button">Сгенерировать отчет</button>
			}
		</div>
	</div>
	<div class="form-group">
		<div class="col-sm-12">
			<p>Аналоги (@Model.Analogs.Count)</p>
		</div>
		<div id="resultGrid"></div>
	</div>
</div>

<script type="text/x-kendo-template" id="recTemplate">
	<div class="recBtnContainer">
		<button class="k-button" id="recalculateES">Пересчитать</button>
	</div>
</script>

<script type="text/javascript">
	var reportId = "@Model.ReportId";
	var dataGrid = null;
	var data = null;
	var columns = null;
	var expressScoreId = "@ViewBag.EsId";
	try {
		var dataToGridString = JSON.stringify(@Html.Raw(Model.DataToGrid));
		dataGrid = JSON.parse(dataToGridString);

		data = dataGrid.rows.map((arr) => {
			var correctObj = {};
			arr.forEach((obj) => {
				if (parseInt(obj["key"]).valueOf()) {
					correctObj["_" + obj["key"]] = obj["value"];
					return;
				}
				correctObj[obj["key"]] = obj["value"];
			});
			return new Object(correctObj);
		});


		columns = dataGrid.headers.map((item) => { return { title: item.text, field: getCorrectField(item.dataField)} });

		function getCorrectField(dataField) {
			if (parseInt(dataField).valueOf()) return "_" + dataField;
			return dataField;
		}
	} catch (e) {
		console.error("Ошибка при парсинге данных", e);
	}

	var chColumn = [
		{
			title: 'Выбрать все',
			headerTemplate: "<input type='checkbox' id='header-chb' class='k-checkbox header-checkbox'><label class='k-checkbox-label' for='header-chb'></label>",
			template: function (dataItem) {
				return "<input type='checkbox' id='" + dataItem.id + "' class='k-checkbox row-checkbox'><label class='k-checkbox-label' for='" + dataItem.id + "'></label>";
			},
			width: 40
		}
	];



	var checkedIds = {};
	function selectRow() {
		var checked = this.checked,
			row = $(this).closest("tr"),
			grid = $("#resultGrid").data("kendoGrid"),
			dataItem = grid.dataItem(row);

		checkedIds[dataItem.id] = checked;

		if (checked) {
			row.addClass("k-state-selected");

			var checkHeader = true;

			$.each(grid.items(), function (index, item) {
				if (!($(item).hasClass("k-state-selected"))) {
					checkHeader = false;
				}
			});

			$("#header-chb")[0].checked = checkHeader;
		} else {

			row.removeClass("k-state-selected");
			$("#header-chb")[0].checked = false;
		}
	}

	function onDataBound(e) {
		for (var i = 1; i < this.columns.length; i++) {
			this.autoFitColumn(this.columns[i]);
		}
		var view = this.dataSource.view();
		for (var i = 0; i < view.length; i++) {
			if (checkedIds[view[i].id]) {
				this.tbody.find("tr[data-uid='" + view[i].uid + "']")
					.addClass("k-state-selected")
					.find(".k-checkbox")
					.attr("checked", "checked");
			}
		}
	}

	function updateCost(cost, squareCost) {
		if (cost && squareCost) {
			$('#cost').text(cost.toLocaleString());
			$('#squareCost').text(squareCost.toLocaleString());
		}
	}
	function updateReportId(reportId = null) { if (reportId) $('#report').data('report-id', reportId); }
	$(document).ready(function () {
		var grid = $("#resultGrid").kendoGrid({
			height: 510,
			width: "100%",
			resizable: true,
			pageable: {
				pageSize: 5
			},
			dataBound: onDataBound,
			toolbar: kendo.template($("#recTemplate").html()),
			columns: [...chColumn,...columns]
		}).data("kendoGrid");

		grid.table.on("click", ".row-checkbox", selectRow);
		grid.setDataSource(data);

		$('#header-chb').change(function (ev) {
			var checked = ev.target.checked;
			$('.row-checkbox').each(function (idx, item) {
				if (checked) {
					if (!($(item).closest('tr').is('.k-state-selected'))) {
						$(item).click();
					}
				} else {
					if ($(item).closest('tr').is('.k-state-selected')) {
						$(item).click();
					}
				}
			});
		});

		if (reportId === "-1") {
			Common.ShowError("При генерации отчета возникли ошибки. Подробности в журнале ошибок.");
		}
		$('#report').on('click',
			function() {
				var url = "@Url.Action("DownloadExportResult", "DataExport")" + `?exportId=${$(this).data('report-id')}`;
				var a = document.createElement('a');
				a.setAttribute('href', url);
				a.click();
				console.log('report id', $(this).data('report-id'));
			});

		$('#recalculateES').on('click',
			function() {
				var checked = [];
				for (var i in checkedIds) {
					if (checkedIds[i]) {
						checked.push(i);
					}
				}
				var data = {
					analogIds: checked,
					expressScoreId
				}
				progressLoader.loader($('#successDialog'), true);

				var jqxhrReload  =  $.ajax({
					url: "@Url.Action("RecalculateAnalog", "ExpressScore")",
					data,
					method: 'post',
					headers: { 'connection-signalr-id': connectionSignalRId }
				});

				jqxhrReload.done(function (data) {
					if (data.Errors) {
						var errors = getErrors(data.Errors);
						Common.ShowError(errors);
					}
					if (data.success) {
						updateCost(data.success.cost, data.success.squareCost);
						updateReportId(data.success.reportId);
							Common.ShowMessage("Перерасчет успешно выполнен.");
					}

				}).always(function() {
					progressLoader.loader($('#successDialog'), false);
				});
			});
	});
</script>


