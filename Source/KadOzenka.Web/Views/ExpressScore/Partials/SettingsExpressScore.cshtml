@using System.Globalization
@using KadOzenka.Dal.ExpressScore.Dto
@using KadOzenka.Web.Controllers
@model KadOzenka.Web.Models.ExpressScore.SettingsExpressScoreViewModel

<style>
	.form-horizontal {
		padding-left: 0;
	}
	.static-nav {
		position: absolute !important;
		margin-left: 84% !important;
		width: 16% !important;
	}

	#toolbar {
		position: absolute;
		bottom: 20px;
		width: 100%;
	}
	fieldset.complex-factor, fieldset.required-param, fieldset.static-param {
		margin-left: 5px;
		margin-right: 5px;
	}
	.hidden {
		display: none
	}
	#ls_panelbar {
		 height: 99vh;
		overflow-y:scroll;
	}
	.remove:hover {
		cursor: pointer;
	}
	.k-dropdown-wrap.k-state-default {
		margin-right: 0;
	}

	.k-item .k-in {
		white-space: pre-wrap;
	}

	.hint {
		background-color: white;
	}

	.placeholder {
		opacity: 0.6;
	}

	fieldset.complex-factor fieldset {
		margin-top: 10px;
		margin-bottom: 10px;
	}
	/*#RequiredParam span.k-header {
		display: none;
	}*/
</style>
@using (Html.BeginForm("SettingsExpressScore", "ExpressScore", FormMethod.Post, htmlAttributes: new { @id = "settingsForm" }))
{
<div class="form-horizontal col-sm-12">
	<ul id="ls_panelbar" class="panelbar">
		<li id="SectionRegister" data-expand>
			<div class="form-group" style="margin-top: 10px"></div>
			<div class="form-group">
				<div class="col-sm-3">
					@Html.CustomLabelFor("Тур оценки", true)
				</div>
				<div class="col-sm-9">
					@(Html.Kendo().DropDownListFor(m => m.TourId)
						.DataTextField("Text")
						.DataValueField("Value")
						.Filter(FilterType.Contains)
						.DataSource(source =>
						{
							source.Read("GetRatingTours", "Tour");
						}).Events(
							e =>
							{
								e.Cascade("handlerChangeTour");
							}))
				</div>
			</div>
			<div class="form-group">
				<div class="col-sm-3">
					@Html.CustomLabelFor("Реестр данных", true)
				</div>
				<div class="col-sm-9">
					@(Html.Kendo().DropDownListFor(m => m.FactorRegisterId)
						.DataTextField("Text")
						.DataValueField("Value")
						.DataSource(source =>
						{
							source.Read(a => a.Action("GetFactorRegisters", "ExpressScore").Data("getDataRegister"));
						}).Events(
							e =>
							{
								e.Cascade("handlerChangeRegister");
							})
						)
				</div>
			</div>
		</li>
		<li id="RequiredParam" data-expand>
            <fieldset class="required-param">
                <legend>Обязательные параметры</legend>
                <div class="form-group">
                    <div class="col-sm-3">
                        @Html.CustomLabelFor("Атрибут года постройки", true)
                    </div>
                    <div class="col-sm-9">
                        @(Html.Kendo().DropDownListFor(m => m.CostFactors.YearBuildId)
                                    .DataTextField("Text")
                                    .DataValueField("Value")
                                    .Filter(FilterType.Contains)
                                    .DataSource(source =>
                                    {
                                        source.Read(a => a.Action("GetAttributesKo", "ExpressScore").Data("getDataAttribute"));
                                    }).HtmlAttributes(new
                                    {
                                        name = "YearBuildId"
                                    }))
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-sm-3">
                        @Html.CustomLabelFor(@"Корректировка на дату ""Справочник""", true)
                    </div>
                    <div class="col-sm-9">
                        @(Html.Kendo().DropDownListFor(m => m.CostFactors.IndexDateDicId)
                                    .DataTextField("Text")
                                    .DataValueField("Value")
                                    .Filter(FilterType.Contains)
                                    .DataSource(source =>
                                    {
                                        source.Read(a => a.Action("GetDictionaries", "ExpressScore"));
                                    }
                                    ).HtmlAttributes(new
                                    {
                                        name = "IndexDateDicId"
                                    }))
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-sm-3">
                        @Html.CustomLabelFor(@"Корректировка на долю земельного участка ""Справочник""", true)
                    </div>
                    <div class="col-sm-9">
                        @(Html.Kendo().DropDownListFor(m => m.CostFactors.LandShareDicId)
                                    .DataTextField("Text")
                                    .DataValueField("Value")
                                    .Filter(FilterType.Contains)
                                    .DataSource(source =>
                                    {
                                        source.Read(a => a.Action("GetDictionaries", "ExpressScore"));
                                    }
                                    ).HtmlAttributes(new
                                    {
                                        name = "LandShareDicId"
                                    }))
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-sm-3">
                        @Html.CustomLabelFor(@"Корректировка на этаж ""Справочник""", true)
                    </div>
                    <div class="col-sm-9">
                        @(Html.Kendo().DropDownListFor(m => m.CostFactors.FloorDicId)
                                    .DataTextField("Text")
                                    .DataValueField("Value")
                                    .Filter(FilterType.Contains)
                                    .DataSource(source =>
                                    {
                                        source.Read(a => a.Action("GetDictionaries", "ExpressScore"));
                                    }
                                    ).HtmlAttributes(new
                                    {
                                        name = "FloorDicId"
                                    }))
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-sm-3">
                        @Html.CustomLabelFor("НДС включен")
                    </div>
                    <div class="col-sm-9">
                        @(Html.Kendo().CheckBoxFor(m => m.CostFactors.IsVatIncluded)
                                    .HtmlAttributes(new
                                    {
                                        name = nameof(CostFactorsDto.IsVatIncluded),
                                        onchange = "setVatDictionaryVisibility();"
                                    }))
                    </div>
                </div>
                <div class="form-group" id="dictionaryForVat" style="display: none;">
                    <div class="col-sm-3">
                        @Html.CustomLabelFor(@"Корректировка на НДС ""Справочник""", true)
                    </div>
                    <div class="col-sm-9">
                        @(Html.Kendo().DropDownListFor(m => m.CostFactors.VatDictionaryId)
                            .DataTextField("Text")
                            .DataValueField("Value")
                            .Filter(FilterType.Contains)
                            .DataSource(source =>
                            {
                                source.Read(a => a.Action("GetDictionaries", "ExpressScore"));
                            }
                            ).HtmlAttributes(new
                            {
                                name = nameof(CostFactorsDto.VatDictionaryId)
                            }))
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-sm-3">
                        @Html.CustomLabelFor("Учитывать корректировку на торг")
                    </div>
                    <div class="col-sm-1">
                        @(Html.Kendo().CheckBoxFor(m => m.CostFactors.IsCorrectionByBargainUsedInCalculations)
                            .HtmlAttributes(new
                            {
                                name = nameof(CostFactorsDto.IsCorrectionByBargainUsedInCalculations),
                                onchange = "setCorrectionByBargainCoef();"
                            }))
                    </div>
                    <div class="col-sm-7" id="correctionByBargainCoef" style="@(Model.CostFactors.IsCorrectionByBargainUsedInCalculations.GetValueOrDefault() ? "" : "display:none;")">
                        <div class="col-sm-4">
                            @Html.CustomLabelFor("Коэффициент", true)
                        </div>
                        <div class="col-sm-6">
                            @(Html.Kendo().NumericTextBox().Name(nameof(Model.CostFactors.CorrectionByBargainCoef))
                                .Decimals(6).Format("n6").Spinners(false)
                                .Value(Model.CostFactors.CorrectionByBargainCoef.HasValue ? (double)Model.CostFactors.CorrectionByBargainCoef.GetValueOrDefault() : (double?)null))
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-sm-3">
                        @Html.CustomLabelFor("Учитывать операционные расходы")
                    </div>
                    <div class="col-sm-1">
                        @(Html.Kendo().CheckBoxFor(m => m.CostFactors.IsOperatingCostsUsedInCalculations)
                            .HtmlAttributes(new
                            {
                                name = nameof(CostFactorsDto.IsOperatingCostsUsedInCalculations),
                                onchange = "setOperatingCostsCoef();"
                            }))
                    </div>
                    <div class="col-sm-7" id="operatingCostsCoef" style="@(Model.CostFactors.IsOperatingCostsUsedInCalculations.GetValueOrDefault() ? "" : "display:none;")">
                        <div class="col-sm-4">
                            @Html.CustomLabelFor("Коэффициент", true)
                        </div>
                        <div class="col-sm-6">
                            @(Html.Kendo().NumericTextBox().Name(nameof(Model.CostFactors.OperatingCostsCoef))
                                .Decimals(6).Format("n6").Spinners(false)
                                .Value(Model.CostFactors.OperatingCostsCoef.HasValue ? (double)Model.CostFactors.OperatingCostsCoef.GetValueOrDefault() : (double?)null))
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-sm-3">
                        @Html.CustomLabelFor("Использовать площадь при расчете")
                    </div>
                    <div class="col-sm-9">
                        @(Html.Kendo().CheckBoxFor(m => m.CostFactors.IsSquareFactorUsedInCalculations)
                            .HtmlAttributes(new
                            {
                                name = nameof(CostFactorsDto.IsSquareFactorUsedInCalculations),
                                onchange = "setSquareFactor();"
                            }))
                    </div>
                </div>
            </fieldset>
		</li>
		<li id="StaticFactor" data-expand>
			<fieldset class="static-param">
				<legend>Статичные коэффициенты</legend>
				@{
					int i = 0;
					foreach (var factor in Model.CostFactors.SimpleCostFactors)
					{
						<div class="for-remove" id="simple-factor-@i">
                            @(await Html.PartialAsync("PartialSimpleFactorCard.cshtml", Model.CostFactors.SimpleCostFactors[i], new ViewDataDictionary(ViewData){{ "Count", i }, {"IsEdit", Model.IsEdit} }))
						</div>
						i++;
					}
				}
				<div class="wrapper-simple"></div>
				<div class="form-group">
					<div class="col-sm-2">
                        <button disabled="@(!Model.IsEdit)" type="button" class="k-button-icon k-button" id="addSimpleFactor">
                            <span class="k-icon k-i-plus"></span>
                        </button>
					</div>
				</div>
			</fieldset>
		</li>
		<li id="ComplexFactor" data-expand>
			<fieldset class="complex-factor">
				<legend>Оценочные факторы</legend>
				@{
					i = 0;
					foreach (var item in Model.CostFactors.ComplexCostFactors)
					{
					    <fieldset id="factor-@i">
                            @(await Html.PartialAsync("PartialComplexFactorCard.cshtml", Model.CostFactors.ComplexCostFactors[i], new ViewDataDictionary(ViewData){{ "Count", i }, {"IsEdit", Model.IsEdit} }))
                        </fieldset>
						i++;
					}
				}
			</fieldset>
		</li>
	</ul>
	</div>
}
<div class="static-nav">
	<nav id="navigation-menu">
		<a href="#SectionRegister">Тур и реестр</a>
		<a href="#RequiredParam">Обязательные параметры</a>
		<a href="#StaticFactor">Статичные коэффициенты</a>
		<a href="#ComplexFactor">Оценочные факторы</a>
		<div id="toolbar"></div>
	</nav>
</div>

<script src="~/js/custom-validation.js"></script>

<script type="text/javascript">
	var complexFactorsCount  = @Model.CostFactors.ComplexCostFactors.Count;
	var simpleFactorsCount = @Model.CostFactors.SimpleCostFactors.Count;
    var isEdit = "@(Model.IsEdit)" === "True";

	$("#toolbar").kendoToolBar({
		items: [{
			type: 'button',
			id: 'addComplexFactor',
			text: '',
			click: function () {
				handlerComplexFactor();
			},
			icon: 'add',
			hidden: false,
            enable: isEdit
		},
			{
				type: 'button',
				id: 'save',
				text: '',
				click: function () {
					saveParams();
				},
				icon: 'save',
				hidden: false,
                enable: isEdit
			}]
	});
	var panelBar = $('#ls_panelbar').kendoPanelBar().data('kendoPanelBar');
	panelBar.expand('li[data-expand]');

	$('span.k-header').removeClass('k-header k-link');

	function saveParams() {
		var form = $('form');
		var formObject = Common.Functions.FormToObject(form);

		var complexCostFactors = [];
		var simpleCostFactors = [];

		try {
			for (var i = 0; i < complexFactorsCount; i++) {
				var obj = {};
				if (!!$(`fieldset#factor-${i}`)[0]) {
					obj['Name'] = validateParams(formObject[`Name-${i}`]);
					obj['Coefficient'] = validateParams(formObject[`Coefficient-${i}`]);
					obj['AttributeId'] = validateParams(formObject[`AttributeId-${i}`]);
					obj['DictionaryId'] = formObject[`DictionaryId-${i}`];
                    obj['ComplexCostFactorType'] = formObject[`ComplexCostFactorType-${i}`];
					obj['ShowInCalculatePage'] = formObject[`ShowInCalculatePage-${i}`];
					complexCostFactors.push(obj);
				}
			}

			for (var j = 0; j < simpleFactorsCount; j++) {
				var objs = {};
				if (!!$(`div#simple-factor-${j}`)[0]) {
					objs['Name'] = validateParams(formObject[`Name-simple-${j}`]);
					objs['Coefficient'] = validateParams(formObject[`Coefficient-simple-${j}`]);
					simpleCostFactors.push(objs);
				}
			}
		} catch (e) {
			Common.ShowError(e);
			return;
		}

        var data = {
			TourId: formObject['TourId'],
			FactorRegisterId: formObject['FactorRegisterId'],
			CostFactors: {
				YearBuildId: formObject['YearBuildId'],
				complexCostFactors,
				simpleCostFactors,
				LandShareDicId: formObject["LandShareDicId"],
				IndexDateDicId: formObject["IndexDateDicId"],
				FloorDicId: formObject["FloorDicId"],
                IsVatIncluded: formObject["@nameof(CostFactorsDto.IsVatIncluded)"],
				VatDictionaryId: formObject["@nameof(CostFactorsDto.VatDictionaryId)"],
				IsSquareFactorUsedInCalculations: formObject["@nameof(CostFactorsDto.IsSquareFactorUsedInCalculations)"],
				IsCorrectionByBargainUsedInCalculations: formObject["@nameof(CostFactorsDto.IsCorrectionByBargainUsedInCalculations)"],
				CorrectionByBargainCoef: formObject["@nameof(CostFactorsDto.CorrectionByBargainCoef)"],
                IsOperatingCostsUsedInCalculations: formObject["@nameof(CostFactorsDto.IsOperatingCostsUsedInCalculations)"],
                OperatingCostsCoef: formObject["@nameof(CostFactorsDto.OperatingCostsCoef)"]
			},
			SegmentType: "@Model.SegmentType"
        }

        kendo.ui.progress($('body'), true);
		$.post(form.attr('action'), data).done(function(data) {
			if (data.Errors) {
				var errors = getErrors(data.Errors);
				Common.ShowError(errors);
				return;
			}
			if (data.success) {
				Common.ShowMessage("Сохранено успешно");
			}

		}).always(function() {
			kendo.ui.progress($('body'), false);
		});
	}

	function validateParams(parameter) {
		if (parameter === "" || parameter === null || parameter === 0) {
			throw "Заполните обязательные параметры";
		}
		return parameter;
	}

    function handlerComplexFactor(factorSpecialization) {
		kendo.ui.progress($('body'), true);
		var url = "@Url.Action("AddNewComplexCard","ExpressScore")" + `?count=${complexFactorsCount}`;
        if (factorSpecialization)
			url += `&factorSpecialization=${factorSpecialization}`;

        var fieldset$ = $('<fieldset id="factor-' + complexFactorsCount +'" style= "display: none"></fieldset>');
		$(fieldset$).load(url, null, function (data, status, jqXGR) {
			if (status === 'success') {
				$('fieldset.complex-factor').append(fieldset$);
				fieldset$.show();
				complexFactorsCount++;
				refreshComplexHandlers();
				setDataSourceAttribute(fieldset$);
				fieldset$.get(0).scrollIntoView();
				kendo.ui.progress($('body'), false);
			}
		});
	}

	function setDataSourceAttribute(fieldset$) {
		$.ajax({
			type: 'GET',
			url: '@Url.Action("GetAttributesKoAndAnalogs", "ExpressScore")',
			data: { registerId: $('#FactorRegisterId').data('kendoDropDownList') && $('#FactorRegisterId').data('kendoDropDownList').value()},
			dataType: "json",
			traditional: true,
			success: function (response) {
				var data = response.map(function(item) {
					return {
						Text: item.Text,
						Value: item.Value,
						items: item.Items.map(function(i) {
							return {
								Text: i.Text,
								Value: i.Value
							}

						})
					}
				});

				fieldset$.find('[id ^= "AttributeId"]').each(function() {
					$(this).data('kendoDropDownTree') && $(this).data('kendoDropDownTree').setDataSource(data);
				});
			},
			error: function(response) {
				Common.ShowError(response.responseText);
			},
			complete: function() {
				kendo.ui.progress($('body'), false);
			}
		});
	}

	function refreshComplexHandlers() {
		$('.remove').off('click', removeComplexFactors);
		$('.remove').on('click', removeComplexFactors);
	}

	function removeComplexFactors() {
		$(this).closest('fieldset').remove();
	}

	function refreshSimpleHandlers() {
		$('.remove-simple').off('click', removeSimpleFactors);
		$('.remove-simple').on('click', removeSimpleFactors);
	}

	function removeSimpleFactors() {
        $(this).closest('div.for-remove').remove();
    }


    function setVatDictionaryVisibility() {
        var isVatIncluded = $("input[name='@nameof(CostFactorsDto.IsVatIncluded)']").is(':checked');
        if (isVatIncluded) {
            $("#dictionaryForVat").show();
        } else {
            $("#dictionaryForVat").hide();
        }
	}

    function setSquareFactor() {
        var isSquareFactorUsed = $("input[name='@nameof(CostFactorsDto.IsSquareFactorUsedInCalculations)']").is(':checked');
		if (isSquareFactorUsed) {
            handlerComplexFactor("@(ComplexCostFactorSpecialization.SquareFactor)");
        } else {
            var squareFactorHiddenField =
                $('.complexCostFactorType[value="@(ComplexCostFactorSpecialization.SquareFactor)"]');
            squareFactorHiddenField.closest('fieldset').remove();
        }
    }

    function setCorrectionByBargainCoef() {
		var isCorrectionByBargainUsed = $("input[name='@nameof(CostFactorsDto.IsCorrectionByBargainUsedInCalculations)']").is(':checked');
		if (isCorrectionByBargainUsed) {
            $("#correctionByBargainCoef").show();
        } else {
			$("#correctionByBargainCoef").hide();
            $("#@nameof(CostFactorsDto.CorrectionByBargainCoef)").data("kendoNumericTextBox").value(null);
        }
	}

	function setOperatingCostsCoef() {
        var isOperatingCostsUsed = $("input[name='@nameof(CostFactorsDto.IsOperatingCostsUsedInCalculations)']").is(':checked');
		if (isOperatingCostsUsed) {
            $("#operatingCostsCoef").show();
            $("#@nameof(CostFactorsDto.OperatingCostsCoef)").data("kendoNumericTextBox").value(
                @ExpressScoreController.OperatingCostsCoefDefaultValue.ToString(CultureInfo.CurrentUICulture));
        } else {
            $("#operatingCostsCoef").hide();
            $("#@nameof(CostFactorsDto.OperatingCostsCoef)").data("kendoNumericTextBox").value(null);
        }
    }


	$(document).ready(function () {
		refreshComplexHandlers();
        refreshSimpleHandlers();
        setVatDictionaryVisibility();
		$('#addSimpleFactor').on('click',
			function () {
                kendo.ui.progress($('body'), true);
				var div$ = $('<div id="simple-factor-' + simpleFactorsCount + '" class="for-remove" style="display: none"></div>');
				var url = "@Url.Action("AddNewSimpleCard","ExpressScore")" + `?count=${simpleFactorsCount}`;
				div$.load(url, null, function(data, status, jqXGR)
				{
					if (status === 'success') {
						$('.wrapper-simple').append(div$);
						div$.show();
						simpleFactorsCount++;
						refreshSimpleHandlers();
						kendo.ui.progress($('body'), false);
					}
				});
			});
		$(".complex-factor").kendoSortable({
			hint:function(element) {
				return element.clone().addClass("hint")
					.height(element.height())
					.width(element.width());
			},
			placeholder:function(element) {
				return element.clone().addClass("placeholder");
			},
			ignore: "input, span"
		});
	});

</script>

