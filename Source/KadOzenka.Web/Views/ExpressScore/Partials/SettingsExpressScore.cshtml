@model KadOzenka.Web.Models.ExpressScore.SettingsExpressScoreViewModel


<style>
	.form-horizontal {
		padding-left: 0;
	}
	.static-nav {
		position: absolute !important;
		margin-left: 84% !important;
		width: 16% !important;
	}

	#toolbar {
		position: absolute;
		bottom: 20px;
		width: 100%;
	}
	fieldset.complex-factor, fieldset.required-param, fieldset.static-param {
		margin-left: 5px;
		margin-right: 5px;
	}
	.hidden {
		display: none
	}
	#ls_panelbar {
		 height: 99vh;
		overflow-y:scroll;
	}
	.remove:hover {
		cursor: pointer;
	}
	/*#RequiredParam span.k-header {
		display: none;
	}*/
</style>
@using (Html.BeginForm("SettingsExpressScore", "ExpressScore", FormMethod.Post, htmlAttributes: new { @id = "settingsForm" }))
{
<div class="form-horizontal col-sm-12">
	<ul id="ls_panelbar" class="panelbar">
		<li id="SectionRegister" data-expand>
			<div class="form-group" style="margin-top: 10px"></div>
			<div class="form-group">
				<div class="col-sm-3">
					@Html.CustomLabelFor("Тур оценки", true)
				</div>
				<div class="col-sm-9">
					@(Html.Kendo().DropDownListFor(m => m.TourId)
						.DataTextField("Text")
						.DataValueField("Value")
						.Filter(FilterType.Contains)
						.DataSource(source =>
						{
							source.Read("GetRatingTours", "Tour");
						}).Events(
							e =>
							{
								e.Cascade("handlerChangeTour");
							}))
				</div>
			</div>
			<div class="form-group">
				<div class="col-sm-3">
					@Html.CustomLabelFor("Реестр данных", true)
				</div>
				<div class="col-sm-9">
					@(Html.Kendo().DropDownListFor(m => m.FactorRegisterId)
						.DataTextField("Text")
						.DataValueField("Value")
						.DataSource(source =>
						{
							source.Read(a => a.Action("GetFactorRegisters", "ExpressScore").Data("getDataRegister"));
						}).Events(
							e =>
							{
								e.Cascade("handlerChangeRegister");
							})
						)
				</div>
			</div>
		</li>
		<li id="RequiredParam" data-expand>
			<fieldset class="required-param">
				<legend>Обязательные параметры</legend>
				<div class="form-group">
					<div class="col-sm-3">
						@Html.CustomLabelFor("Атрибут года постройки", true)
					</div>
					<div class="col-sm-9">
						@(Html.Kendo().DropDownListFor(m => m.CostFactors.YearBuildId)
							.DataTextField("Text")
							.DataValueField("Value")
							.Filter(FilterType.Contains)
							.DataSource(source =>
							{
								source.Read(a => a.Action("GetAttributes", "ExpressScore").Data("getDataAttribute"));
							}).HtmlAttributes(new
							{
								name = "YearBuildId"
							}))
					</div>
				</div>
				<div class="form-group">
					<div class="col-sm-3">
						@Html.CustomLabelFor(@"Корректировка на дату ""Справочник""", true)
					</div>
					<div class="col-sm-9">
						@(Html.Kendo().DropDownListFor(m => m.CostFactors.IndexDateDicId)
							.DataTextField("Text")
							.DataValueField("Value")
							.Filter(FilterType.Contains)
							.DataSource(source =>
							{
								source.Read(a => a.Action("GetDictionaries", "ExpressScore"));
							}
							).HtmlAttributes(new
							{
								name = "IndexDateDicId"
							}))
					</div>
				</div>
				<div class="form-group">
					<div class="col-sm-3">
						@Html.CustomLabelFor(@"Корректировка на долю земельного участка ""Справочник""", true)
					</div>
					<div class="col-sm-9">
						@(Html.Kendo().DropDownListFor(m => m.CostFactors.LandShareDicId)
							.DataTextField("Text")
							.DataValueField("Value")
							.Filter(FilterType.Contains)
							.DataSource(source =>
							{
								source.Read(a => a.Action("GetDictionaries", "ExpressScore"));
							}
							).HtmlAttributes(new
							{
								name = "LandShareDicId"
							}))
					</div>
				</div>
				<div class="form-group">
					<div class="col-sm-3">
						@Html.CustomLabelFor(@"Корректировка на этаж ""Справочник""", true)
					</div>
					<div class="col-sm-9">
						@(Html.Kendo().DropDownListFor(m => m.CostFactors.FloorDicId)
							.DataTextField("Text")
							.DataValueField("Value")
							.Filter(FilterType.Contains)
							.DataSource(source =>
							{
								source.Read(a => a.Action("GetDictionaries", "ExpressScore"));
							}
							).HtmlAttributes(new
							{
								name = "FloorDicId"
							}))
					</div>
				</div>
			</fieldset>
		</li>
		<li id="StaticFactor" data-expand>
			<fieldset class="static-param">
				<legend>Статичные коэффициенты</legend>
				@{
					int i = 0;
					foreach (var factor in Model.CostFactors.SimpleCostFactors)
					{
						<div class="for-remove" id="simple-factor-@i">
							<div class="form-group">
								<div class="col-sm-2">
									@Html.CustomLabelFor("Имя коэф.", true)
								</div>
								<div class="col-sm-4">
									@Html.Kendo().TextBox().Name($"Name-simple-{i}").Value(Model.CostFactors.SimpleCostFactors[i].Name)
								</div>
								<div class="col-sm-2">
									@Html.CustomLabelFor("Коэф.", true)
								</div>
								<div class="col-sm-3">
									@Html.Kendo().NumericTextBox().Name($"Coefficient-simple-{i}").Spinners(false).Decimals(6).Format("n6").Value((double)Model.CostFactors.SimpleCostFactors[i].Coefficient.GetValueOrDefault())
								</div>
								<div class="col-sm-1">
									<a class="k-button-icon k-button remove-simple">
										<span class="k-i-close k-icon"></span>
									</a>
								</div>
							</div>
						</div>
						i++;
					}
				}
				<div class="wrapper-simple"></div>
				<div class="form-group">
					<div class="col-sm-2">
						<a class="k-button-icon k-button" id="addSimpleFactor">
							<span class="k-icon k-i-plus"></span>
						</a>
					</div>
				</div>
			</fieldset>
		</li>
		<li id="ComplexFactor" data-expand>
			<fieldset class="complex-factor">
				<legend>Оценочные факторы</legend>
				@{
					i = 0;
					foreach (var item in Model.CostFactors.ComplexCostFactors)
					{
						<fieldset id="factor-@i">
							<div class="form-group">
								<div class="col-sm-12">
									<span class="k-icon k-i-close remove" style="float: right; margin-top: 5px;"></span>
								</div>
							</div>
							<div class="form-group">
								<div class="col-sm-2">
									@Html.CustomLabelFor("Имя фактора", true)
								</div>
								<div class="col-sm-4">
									@Html.Kendo().TextBox().Name($"Name-{i}").Value(Model.CostFactors.ComplexCostFactors[i].Name)
								</div>
								<div class="col-sm-2">
									@Html.CustomLabelFor("Коэф. влияния", true)
								</div>
								<div class="col-sm-4">
									@Html.Kendo().NumericTextBox().Name($"Coefficient-{i}").Decimals(6).Format("n6").Spinners(false).Value((double)Model.CostFactors.ComplexCostFactors[i].Coefficient.GetValueOrDefault())
								</div>
							</div>
							<div class="form-group">
								<div class="col-sm-2">
									@Html.CustomLabelFor("Имя атрибута", true)
								</div>
								<div class="col-sm-4">
									@(Html.Kendo().DropDownListFor(m => m.CostFactors.ComplexCostFactors[i].AttributeId)
												.DataTextField("Text")
												.DataValueField("Value")
												.Filter(FilterType.Contains)
												.DataSource(source =>
												{
													source.Read(a => a.Action("GetAttributes", "ExpressScore").Data("getDataAttribute"));
												})
												.HtmlAttributes(new { name = $"AttributeId-{i}", id = $"AttributeId-{i}" })
									)
								</div>
								<div class="col-sm-2">
									@Html.CustomLabelFor("Справочник")
								</div>
								<div class="col-sm-4">
									@(Html.Kendo().DropDownListFor(m => m.CostFactors.ComplexCostFactors[i].DictionaryId)
												.DataTextField("Text")
												.DataValueField("Value")
												.Filter(FilterType.Contains)
												.DataSource(source =>
												{
													source.Read(a => a.Action("GetDictionaries", "ExpressScore"));
												})
												.HtmlAttributes(new { name = $"DictionaryId-{i}", id = $"DictionaryId-{i}" })
									)
								</div>
							</div>
						</fieldset>
						<div class="form-group"></div>
						i++;
					}
				}
			</fieldset>
		</li>
	</ul>
	</div>
}
<div class="static-nav">
	<nav id="navigation-menu">
		<a href="#SectionRegister">Тур и реестр</a>
		<a href="#RequiredParam">Обязательные параметры</a>
		<a href="#StaticFactor">Статичные коэффициенты</a>
		<a href="#ComplexFactor">Оценочные факторы</a>
		<div id="toolbar"></div>
	</nav>
</div>

<script src="~/js/custom-validation.js"></script>

<script type="text/javascript">
	var complexFactorsCount  = @Model.CostFactors.ComplexCostFactors.Count;
	var simpleFactorsCount = @Model.CostFactors.SimpleCostFactors.Count;

	$("#toolbar").kendoToolBar({
		items: [{
			type: 'button',
			id: 'addComplexFactor',
			text: '',
			click: function () {
				handlerComplexFactor();
			},
			icon: 'add',
			hidden: false
		},
			{
				type: 'button',
				id: 'save',
				text: '',
				click: function () {
					saveParams();
				},
				icon: 'save',
				hidden: false
			}]
	});
	var panelBar = $('#ls_panelbar').kendoPanelBar().data('kendoPanelBar');
	panelBar.expand('li[data-expand]');

	$('span.k-header').removeClass('k-header k-link');

	function saveParams() {
		var form = $('form');
		var formObject = Common.Functions.FormToObject(form);

		var complexCostFactors = [];
		var simpleCostFactors = [];

		try {
			for (var i = 0; i < complexFactorsCount; i++) {
				var obj = {};
				if (!!$(`fieldset#factor-${i}`)[0]) {
					obj['Name'] = validateParams(formObject[`Name-${i}`]);
					obj['Coefficient'] = validateParams(formObject[`Coefficient-${i}`]);
					obj['AttributeId'] = validateParams(formObject[`AttributeId-${i}`]);
					obj['DictionaryId'] = formObject[`DictionaryId-${i}`];
					complexCostFactors.push(obj);
				}
			}

			for (var j = 0; j < simpleFactorsCount; j++) {
				var objs = {};
				if (!!$(`div#simple-factor-${j}`)[0]) {
					objs['Name'] = validateParams(formObject[`Name-simple-${j}`]);
					objs['Coefficient'] = validateParams(formObject[`Coefficient-simple-${j}`]);
					simpleCostFactors.push(objs);
				}
			}
		} catch (e) {
			Common.ShowError(e);
			return;
		} 
	
		


		var data = {
			TourId: formObject['TourId'],
			FactorRegisterId: formObject['FactorRegisterId'],
			CostFactors: {
				YearBuildId: formObject['YearBuildId'],
				complexCostFactors,
				simpleCostFactors,
				LandShareDicId: formObject["LandShareDicId"],
				IndexDateDicId: formObject["IndexDateDicId"]
			},
			SegmentType: "@Model.SegmentType"
		}

		kendo.ui.progress($('body'), true);
		$.post(form.attr('action'), data).done(function(data) {
			if (data.Errors) {
				var errors = getErrors(data.Errors);
				Common.ShowError(errors);
				return;
			}
			if (data.success) {
				Common.ShowMessage("Сохранено успешно");
			}

		}).always(function() {
			kendo.ui.progress($('body'), false);
		});
	}

	function validateParams(parameter) {
		if (parameter === "" || parameter === null || parameter === 0) {
			throw "Заполните обязательные параметры";
		}
		return parameter;
	}

	function handlerComplexFactor() {
		kendo.ui.progress($('body'), true);
		var url = "@Url.Action("AddNewComplexCard","ExpressScore")" + `?count=${complexFactorsCount}`;

		var fieldset$ = $('<fieldset id="factor-' + complexFactorsCount +'" style= "display: none"></fieldset>');
		$(fieldset$).load(url, null, function (data, status, jqXGR) {
			if (status === 'success') {
				$('fieldset.complex-factor').append(fieldset$);
				fieldset$.show();
				complexFactorsCount++;
				refreshComplexHandlers();
				fieldset$.get(0).scrollIntoView();
				kendo.ui.progress($('body'), false);
			}
		});
	}

	function refreshComplexHandlers() {
		$('.remove').off('click', removeComplexFactors);
		$('.remove').on('click', removeComplexFactors);
	}

	function removeComplexFactors() {
		$(this).closest('fieldset').remove();
	}

	function refreshSimpleHandlers() {
		$('.remove-simple').off('click', removeSimpleFactors);
		$('.remove-simple').on('click', removeSimpleFactors);
	}

	function removeSimpleFactors() {
		$(this).closest('div.for-remove').remove();
	}

	$(document).ready(function () {
		refreshComplexHandlers();
		refreshSimpleHandlers();
		$('#addSimpleFactor').on('click',
			function () {
				kendo.ui.progress($('body'), true);
				var div$ = $('<div id="simple-factor-' + simpleFactorsCount + '" class="for-remove" style="display: none"></div>');
				var url = "@Url.Action("AddNewSimpleCard","ExpressScore")" + `?count=${simpleFactorsCount}`;
				div$.load(url, null, function(data, status, jqXGR)
				{
					if (status === 'success') {
						$('.wrapper-simple').append(div$);
						div$.show();
						simpleFactorsCount++;
						refreshSimpleHandlers();
						kendo.ui.progress($('body'), false);
					}
				});
			});
	});

</script>

