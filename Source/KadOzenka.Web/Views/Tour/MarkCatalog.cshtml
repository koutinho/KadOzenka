<div class="form-horizontal col-sm-12" style="margin-top: 10px">
    <div class="form-group">
        <div class="col-sm-3">
            @Html.CustomLabel("Тур оценки")
        </div>
        <div class="col-sm-9">
            @(Html.Kendo().DropDownList()
                                                        .Name("RatingTour")
                                                        .DataTextField("Text")
                                                        .DataValueField("Value")
            )
        </div>
    </div>
    <div class="form-group">
        <div class="col-sm-3">
            @Html.CustomLabel("Тип объекта")
        </div>
        <div class="col-sm-9">
            <div class="radio-inline">
                <input type="radio" id="OKS" name="ObjType" class="custom-control-input" checked>ОКС
            </div>
            <div class="radio-inline">
                <input type="radio" id="Parcel" name="ObjType" class="custom-control-input">Земельные участки
            </div>
        </div>
    </div>
    <div class="form-group">
        <div class="col-sm-3">
            @Html.CustomLabel("Оценочная группа")
        </div>
        <div class="col-sm-9">
            @(Html.Kendo().DropDownList()
                                                                .Name("Group")
                                                                .DataTextField("Text")
                                                                .DataValueField("Value")
            )
        </div>
    </div>
    <div class="form-group">
        <div class="col-sm-3">
            @Html.CustomLabel("Оценочная подгруппа")
        </div>
        <div class="col-sm-9">
            @(Html.Kendo().DropDownList()
                                                                .Name("Subgroup")
                                                                .DataTextField("Text")
                                                                .DataValueField("Value")
            )
        </div>
    </div>
    <div class="form-group">
        <div class="col-sm-3">
            @Html.CustomLabel("Фактор стоимости")
        </div>
        <div class="col-sm-9">
            @(Html.Kendo().DropDownList()
                                                                .Name("Factor")
                                                                .DataTextField("Text")
                                                                .DataValueField("Value")
            )
        </div>
    </div>
    <div id="grid"></div>
</div>

<script>
    $(document).ready(function () {        
        
        var groupId = $('#Subgroup').val();
        var factorId = $('#Factor').val();            

        var gridDataSource = new kendo.data.DataSource({
            transport: {
                read: {
                    url: '@Url.Action("GetMarkCatalog", "Tour")',
                    contentType: 'application/json; charset=utf-8',
                    data: { groupId, factorId },
                    dataType: 'json'
                },
                create: {
                    url: '@Url.Action("CreateMark", "Tour")',                         
                    type: 'POST',
                    dataType: 'json'
                },
                update: {
                    url: '@Url.Action("UpdateMark", "Tour")',                    
                    type: 'POST',
                    dataType: 'json'
                },
                destroy: {
                    url: '@Url.Action("DeleteMark", "Tour")',                        
                    type: 'POST',
                    dataType: 'json'
                }
            },
            requestStart: function (e) {
                if (e.type == "read") {
                    kendo.ui.progress($('body'), true);
                }
            },
            requestEnd: function (e) {
                if (e.type == "read") {
                    kendo.ui.progress($('body'), false);
                }
            },
            error: function (e) {
                Common.ShowError(e.xhr.responseText);
            },
            schema: {
                model: {
                    id: "Id",
                    fields: {
                        Id: { editable: false, nullable: true },
                        GroupId: { editable: false},
                        FactorId: { editable: false },
                        ValueFactor: { validation: {
                            valuefactorvalidation: function (input) {
                                if (input.is("[name='ValueFactor']") && input.val() == "") {
                                    input.attr("data-valuefactorvalidation-msg", "Значение фактора обязательно");
                                    return false;
                                }
                                return true;
                            }
                        } },
                        MetkaFactor: {
                            validation: {
                                metkafactorvalidation: function (input) {
                                    if (input.is("[name='MetkaFactor']") && input.val() == "") {
                                        input.attr("data-metkafactorvalidation-msg", "Значение метки обязательно");
                                        return false;
                                    }
                                    return true;
                                }
                            }, type: "number", nullable: true
                        }
                    }
                }
            },
            change: function (e) {
                //если добавляем новое значение в грид, а к нему уже была применена фильтрация
                //чтобы отобразить новую пустую строчку, нужна дополнительная фильтрация
                if (e.action == "add") {
                    var filter = this.filter();
                    if (filter) {
                        var noValueFilter = { field: "ValueFactor", operator: "eq", value: "" };
                        var newFilter = {
                            logic: "or",
                            filters: [noValueFilter, filter]
                        };
                        this.filter(newFilter);
                    }
                }
            }
        });

        $('#grid').kendoGrid({
            dataSource: gridDataSource,
            columns: [
                {
                    field: 'ValueFactor',
                    title: 'Значение',
                    headerAttributes: {                            
                        style: "text-align: center;"
                    }
                }, {
                    field: 'MetkaFactor',
                    title: 'Метка',
                    headerAttributes: {
                        style: "text-align: center;"
                    },
                    //по умолчанию точность новой метки - 2 знака после запятой, 
                    //переопределяем это
                    editor: function (container, options) {
                        $('<input name="' + options.field + '"/>')
                            .appendTo(container)
                            .kendoNumericTextBox({
                                format: "{0:n14}",
                                decimals: 14,
                                step: 0.1
                            });
                        //In case the custom editor is a widget, the developer should customize the validation warning tooltip position in order to avoid visual issues
                        var tooltipElement = $('<span class="k-invalid-msg" data-for="' + options.field + '"></span>');
                        tooltipElement.appendTo(container);
                    }
                },
                { command: ["edit", "destroy"], title: "&nbsp;", width: "250px" }
            ],
            toolbar: ["create"],
            height: 240,
            scrollable: true,
            editable: "inline",
            filterable: {
                extra: false,
                operators: {
                    string: {
                        startswith: "Начинается с",
                        eq: "Равно",
                        neq: "Не равно"
                    },
                    number: {
                        eq: "Равно",
                        gte: "Больше",
                        lte: "Меньше"
                    }
                }
            },
            beforeEdit: function (e) {
                if (e.model.isNew()) {
                    e.model.GroupId = $('#Subgroup').val();
                    e.model.FactorId = $('#Factor').val();
                }
            }
        });

        function GridInit() {            
            var groupId = $('#Subgroup').val();
            var factorId = $('#Factor').val();  

            var data = { groupId, factorId };
            $("#grid").data("kendoGrid").dataSource.read(data);
        }

        $('[name="RatingTour"]')
            .kendoDropDownList({
                dataTextField: 'Text',
                dataValueField: 'Value',
                dataSource:
                {
                    transport: {
                        read: {
                            url: '@Url.Action("GetRatingTours", "Tour")',
                            dataType: 'json'
                        }
                    }
                }
            });

        function GroupDropDownInit() {   
            if ($('input[name="ObjType"]:checked').length == 0)
                return;
            var parentType = $('input[name="ObjType"]:checked')[0].id;

            $('[name="Group"]')
            .kendoDropDownList({
                dataTextField: 'Text',
                dataValueField: 'Value',
                optionLabel: "--Выберите группу--",
                dataSource:
                {
                    transport: {
                        read: {
                            url: '@Url.Action("GetParentGroup", "Tour")',
                            data: { type: parentType, id: '' },
                            dataType: 'json'
                        }
                    }
                }
            });
        }

        function SubgroupDropDownInit() {  
            var groupId = $('#Group').val();

            $('[name="Subgroup"]')
            .kendoDropDownList({
                dataTextField: 'Text',
                dataValueField: 'Value',
                optionLabel: "--Выберите подгруппу--",
                dataSource:
                {
                    transport: {
                        read: {
                            url: '@Url.Action("GetSubgroup", "Tour")',
                            data: { groupId },
                            dataType: 'json'
                        }
                    }
                }
            });
        }

        function FactorDropDownInit() {
            var tourId = $('#RatingTour').val();
                    
            $('[name="Factor"]')
            .kendoDropDownList({
                dataTextField: 'Text',
                dataValueField: 'Value',
                optionLabel: "--Выберите фактор--",
                dataSource:
                {
                    transport: {
                        read: {
                            url: '@Url.Action("GetFactors", "Task")',
                            data: { tourId },
                            dataType: 'json'
                        }
                    }
                }
            });
        }

        $('[name="RatingTour"]').data('kendoDropDownList').bind('change', RatingTourChanged);
        function RatingTourChanged() {           
            FactorDropDownInit();

            $('[name="Factor"]').data('kendoDropDownList').bind('dataBound', FactorChanged);            
        }     

        $('[name="ObjType"]').on('change', function () {
            GroupDropDownInit();

            $('[name="Group"]').data("kendoDropDownList").bind('dataBound', function () {
                SubgroupDropDownInit();

                $('[name="Subgroup"]').data('kendoDropDownList').bind('dataBound', SubgroupChanged);                
            });            
        });  

        $('[name="Group"]').data('kendoDropDownList').bind('change', GroupChanged);
        function GroupChanged() {
            SubgroupDropDownInit();
        }

        $('[name="Subgroup"]').data('kendoDropDownList').bind('change', SubgroupChanged);
        function SubgroupChanged() {            
            GridInit();
            SetAddButtonEnabled();
        }

        $('[name="Factor"]').data('kendoDropDownList').bind('change', FactorChanged);
        function FactorChanged() {
            GridInit();
            SetAddButtonEnabled();
        }   
        
        function SetAddButtonEnabled() {
            var groupId = $('#Subgroup').val();
            var factorId = $('#Factor').val();
            
            if (groupId == '' || factorId == '') {
                $('.k-grid-add').addClass('k-state-disabled'); 
            }
            else {
                $('.k-grid-add').removeClass('k-state-disabled');
            }
        }

        GroupDropDownInit();
        SubgroupDropDownInit();
        FactorDropDownInit();
        GridInit(); 

        $('#grid').data("kendoGrid").bind('dataBound', GridDataBound);
        function GridDataBound() {
            SetAddButtonEnabled();
        }

    });
</script>