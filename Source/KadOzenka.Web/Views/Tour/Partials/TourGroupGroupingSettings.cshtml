@using KadOzenka.Web.Helpers
@model KadOzenka.Web.Models.Tour.TourGroupGroupingSettingsModel

<link rel="stylesheet" href="~/css/toolbars.css"/>
<style>
    fieldset{
        border: none;
        margin: 2px;
    }
    .row {
        margin-bottom: 5px;
    }

    .switch {
      position: relative;
      display: inline-block;
    }

    /* Hide default HTML checkbox */
    .switch input {
      opacity: 0;
      width: 0;
      height: 0;
    }

    .switchActive{
        background-color: bisque;
        border-color: blanchedalmond;
    }

    .switchActive:hover{
        background-color: #FFC485;
        border-color: #FFCC80;
    }

    .switchActive:active{
        background-color: #FFC485;
        border-color: #FFCC80;
    }

    ::placeholder{
        font-style: italic;
        color: #d7d9ff99;
    }

    .hiddenList{
        display: none !important;
    }
</style>
@using (Html.BeginForm("TourGroupGroupingSettings", "Tour", FormMethod.Post, new {id = "updateGroupingSettingsForm", enctype = "multipart/form-data"}))
{
    <div id="groupingSettingToolbar" class="top-toolbar" style="margin-top: 35px; width: 55%"></div>
    <div id="settingsRows" class="bottom-main-content">

        @Html.HiddenFor(m => m.GroupId)
        @for (var i = 0; i < Model.Settings.Count; i++)
        {
            await Html.RenderPartialFor("TourGroupGroupingSettingsPartial.cshtml", m => m.Settings[i]);
        }

    </div>
    <div id="dictionaryUploadModal"></div>
    <div id="dictionaryCardModal"></div>
}

<script src="~/js/toolbars.js"></script>
<script src="~/js/common-modals.js"></script>
<script src="~/js/custom-filters.js"></script>
<script src="~/js/custom-validation.js"></script>
<script>
    let currentRow = @Model.Settings.Count;
    $(document).ready(function () {
        initSignalRConnection();
        $("#groupingSettingToolbar").kendoToolBar({
            items: [
                {
                    type: 'button',
                    id: 'save',
                    icon: 'save',
                    text: 'Сохранить',
                    click: save
                },
                {
                    type: 'splitButton',
                    id: 'add',
                    icon: 'plus',
                    text: 'Добавить условие',
                    click: addConditionWithoutDict,
                    menuButtons:[
                        {
                            type: 'button',
                            id: 'addDict',
                            icon: 'list-unordered',
                            text: 'Добавить условие (справочник)',
                            click: addConditionWithDict
                        }
                    ]
                }]
        });

        bindEvents();
    });

    function bindEvents(){
        let currentRow = @Model.Settings.Count;
        for (let i=0; i<currentRow; i++){
            bindEvent(i);
        }
    }

    function bindEvent(rowIndex){
        bindAttributeSelectorEvents('#Settings_'+rowIndex.toString()+'__KoAttributes');
        bindUnusedFieldHider('Settings_'+rowIndex.toString()+'__GroupFilters');

        swapDropDownAndDeleteButton(rowIndex);
        bindSwitch(rowIndex);
        bindUpload(rowIndex);
        bindDelete(rowIndex);
        bindDictionaryCard(rowIndex);

        $('#Settings_'+rowIndex.toString()+'__GroupFilters_Type').change();
        createMultiSelectForDictionary(rowIndex);
    }

    function swapDropDownAndDeleteButton(rowIndex){
        let wrapper = $('#Settings_'+rowIndex.toString()+'__KoAttributesWrapper');
        wrapper.children().first().children().first().insertAfter(wrapper.children().first().children().last());
    }

    function bindDelete(rowIndex){
        $('#Settings_'+rowIndex.toString()+'__KoAttributesWrapper').find('a').click( (e) => {
            $('#groupFilter_'+rowIndex.toString()).parent().hide();
            $('#Settings_'+rowIndex.toString()+'__IsDeleted').val(true);
        });
    }

    function bindUpload(rowIndex){
        let button = $('#UploadDictionary_'+rowIndex.toString());
        button.click( (e) => showDictionaryUploadModalForRow(rowIndex));
        let attributeControl = $('#Settings_'+rowIndex.toString()+'__KoAttributes').data('kendoDropDownTree');
        attributeControl.bind('change', () => {
            if (attributeControl.value() == 0)
                $('#UploadDictionary_'+rowIndex.toString()).addClass('k-state-disabled');
            else $('#UploadDictionary_'+rowIndex.toString()).removeClass('k-state-disabled');
        });
        attributeControl.trigger('change');
    }

    function bindDictionaryCard(rowIndex){
        let button = $('#ShowDictionary_'+rowIndex.toString());
            button.click( (e) => showDictionaryModalForRow(rowIndex));
        let dictControl = $('#Settings_'+rowIndex.toString()+'__DictionaryId');
        dictControl.change( (e) => {
            if (dictControl.data('kendoDropDownList').value() == 0)
                $('#ShowDictionary_'+rowIndex.toString()).addClass('k-state-disabled');
            else $('#ShowDictionary_'+rowIndex.toString()).removeClass('k-state-disabled');
        });
        dictControl.change();
    }

    function bindSwitch(rowIndex){
        let switchBox = $('#UseDictionary_'+rowIndex.toString());
        let dictUpload = $('#UploadDictionary_'+rowIndex.toString());
        let dictView = $('#ShowDictionary_'+rowIndex.toString());
        let dictFields = $('#dict_'+rowIndex.toString());
        let filterFields = $('#filters_'+rowIndex.toString());
        let switchContainer = switchBox.parent('label');

        switchBox.change((e) => {
            if (e.target.checked) {
                switchContainer.addClass('switchActive');
                switchContainer.hide();
                dictFields.show();
                dictUpload.show();
                dictView.show();
                filterFields.hide();
            } else {
                switchContainer.removeClass('switchActive');
                //switchContainer.show();
                dictFields.hide();
                dictUpload.hide();
                dictView.hide();
                filterFields.show();
            } });
        switchBox.change();
    }

    function createMultiSelectForDictionary(rowIndex){
        let valueBox = $('#Settings_'+rowIndex.toString()+'__DictionaryValue');
        valueBox.hide();
        let data = valueBox.val().split('\n');
        let presetData = (valueBox.val()!=="")
            ? data.map( (x) => { return { valuesFilter:x, valuesFilterName:x, selected: true } })
            : [];
        let multiSelect = $('#DictionaryValueSelect_'+rowIndex).kendoMultiSelect({
            dataTextField: "valuesFilterName",
            dataValueField: "valuesFilter",
            dataSource: {
                data: presetData
            },
            dataBound: onDataBound,
            enable: true,
            clearButton: false
        });
        multiSelect.getKendoMultiSelect().list.addClass('hiddenList');
        //$('#DictionaryValueSelect_'+rowIndex+'_listbox').addClass('hiddenList');
        multiSelect.getKendoMultiSelect().value(data);
    }

    function onDataBound(e) {
        $('.k-multiselect .k-input').unbind('keyup');
        $('.k-multiselect .k-input').on('keyup', onClickEnter);
    }

    function onClickEnter(e) {
        if (e.keyCode === 13) {
            var widget = $(e.target.parentElement.parentElement).find('select').getKendoMultiSelect();
            var dataSource = widget.dataSource;
            var input = $(e.target);
            var value = input.val().trim();
            if (!value || value.length === 0) {
                return;
            }
            var newItem = {
                valuesFilter: value,
                valuesFilterName: value
            };

            dataSource.add(newItem);
            var newValue = newItem.valuesFilter;
            widget.value(widget.value().concat([newValue]));
            var box = $(e.target).parents('[id^="dictValue"]').children('[id^="Settings"]')
            box.val(widget.value().join('\n'));
        }
    }

    function showDictionaryUploadModal() {
        let modal = $("#dictionaryUploadModal");
        ShowIframe('@Url.Action("GroupingDictionaryImport", "Tour")', modal, '50%', '80%', "Загрузка справочника", null, true);
    }

    function showDictionaryUploadModalForRow(row) {
        let attr = $('#Settings_'+row+'__KoAttributes').val();
        let modal = $("#dictionaryUploadModal");
        ShowIframe('@Url.Action("GroupingDictionaryImportPreconfigured", "Tour")'+'?groupId=@Model.GroupId&attributeId='+attr, modal, '50%', '80%', "Загрузка справочника", null, true);
    }

    function showDictionaryModalForRow(row){
        let dictId = $('#Settings_'+row+'__DictionaryId').val();
        let modal = $("#dictionaryCardModal");
        ShowIframe('@Url.Action("GroupingDictionaryCard", "Tour")'+'?dictionaryId='+dictId+'&showItems=true', modal, '50%', '80%', "Просмотр справочника", null, true);
    }

    function initSignalRConnection(){
        var connection = new signalR.HubConnectionBuilder()
            .withUrl("/koGroupingDictionaryProgress", { skipNegotiation: true, transport: signalR.HttpTransportType.WebSockets })
            .withAutomaticReconnect()
            .build();

        connection.on('ReceiveMessage', function (message) {

            var encodedMsg = JSON.parse(message);

            for (var row = 0; row < currentRow; row++){
                let dropDownDictionaryList = $('#Settings_'+row+'__DictionaryId').data('kendoDropDownList');
                let selected = dropDownDictionaryList.value();
                dropDownDictionaryList.dataSource.data(encodedMsg)
                dropDownDictionaryList.value(selected);
            }
        });

        connection.start()
            .then(function () {
                connection.invoke('SendMessage');
            })
            .catch(error => {
                console.error(error.message);
            });
    }

    function save() {
        kendo.ui.progress($('body'), true);
        var form = $('#updateGroupingSettingsForm');
        var formObject = Common.Functions.FormToObject(form);
        console.log(formObject);
        $.ajax({
            type: form.attr('method'),
            url: form.attr('action'),
            data: formObject,
            success: function (response) {
                if (response.Errors) {
                    var errors = getErrors(response.Errors);
                    Common.ShowError(errors);
                    return;
                }
                Common.ShowMessage(response.Message);
            },
            error: function (response) {
                Common.ShowError(response.responseText);
            },
            complete: function() {
                kendo.ui.progress($('body'), false);
            }
        });
    }

    function addConditionWithoutDict(){
        addCondition(false);
    }
    function addConditionWithDict(){
        addCondition(true);
    }

    function addCondition(useDict){
        let index = currentRow;
        kendo.ui.progress($('body'), true);
        $.ajax({
            url: '@Url.Action("TourGroupGroupingSettingsPartialNewRow","Tour")',
            data: {
              groupId: @Model.GroupId,
              index: index,
              prefix: 'Settings['+index+']',
              useDictionary: useDict
            },
            cache: false,
            success: function (html) {
                $("#settingsRows").append(html);
                bindEvent(index);
                currentRow++;
                kendo.ui.progress($('body'), false);
            },
            error: function (html) {
                alert(html);
                kendo.ui.progress($('body'), false);
            }
        });
        return false;
    }
</script>