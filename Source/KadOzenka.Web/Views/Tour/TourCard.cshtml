
<div class="flex-content">
    <!-- Модальное окно для добавления Тура -->
    <div id="tourAdditionModal" style="display: none;  padding: 2%;">
        <div class="form-group">
            <label for="addTourInput"> Наименование </label>
            <input id="addTourInput" class="form-control" required="required" type="number" name="addTour" />
            <button class="btn btn-default" style="margin-top: 10px;" id="saveTour"> Сохранить </button>
        </div>
    </div>

    <!-- Модальное окно для добавления Группы/Подгруппы -->
    <div id="groupAdditionModal" style="display: none; padding: 2%;">
        <div class="form-group">
            <div class="row">
                <div class="col-sm-4">
                    <label>Тур:</label>
                </div>
                <div class="col-sm-7 col-sm-offset-1">
                    <input id="tourYearId" type="text" style="display: none" />
                    <label id="tourYear"></label>
                </div>
            </div>
        </div>
        <div class="form-group">
            <div class="row">
                <div class="col-sm-4">
                    <label>Основная группа:</label>
                </div>
                <div class="col-sm-7 col-sm-offset-1">
                    <input id="mainGroupId" type="text" style="display: none" />
                    <label id="mainGroupName"></label>
                </div>
            </div>
        </div>
        <div id="groupForm" class="form-group">
            <div class="row">
                <div class="col-sm-4">
                    <label>Группа:</label>
                </div>
                <div class="col-sm-7 col-sm-offset-1">
                    <input id="groupId" type="text" style="display: none" />
                    <label id="groupName"></label>
                </div>
            </div>
        </div>
        <div class="form-group">
            <div class="row">
                <div class="col-sm-4">
                    <label for="addGroupNumberInput"> Номер </label>
                </div>
                <div class="col-sm-7 col-sm-offset-1">
                    <input id="addGroupNumberInput" type="number" class="form-control" required="required" name="addGroupNumberInput" />
                </div>
            </div>
        </div>
        <div class="form-group">
            <div class="row">
                <div class="col-sm-4">
                    <label for="addGroupNameInput"> Наименование </label>
                </div>
                <div class="col-sm-7 col-sm-offset-1">
                    <textarea id="addGroupNameInput" class="form-control" required="required" name="addGroupNameInput" rows="3"></textarea>
                </div>
            </div>
        </div>
        <div class="form-group" id="addGroupAlgorithmBlock">
            <div class="row">
                <div class="col-sm-4">
                    <label for="addGroupAlgorithmInput">Механизм группировки</label>
                </div>
                <div class="col-sm-7 col-sm-offset-1">
                    @(Html.Kendo().DropDownList()
                        .Name("addGroupAlgorithmInput")
                        .DataTextField("Text")
                        .DataValueField("Value")
                        .BindTo((System.Collections.IEnumerable)ViewBag.GroupAlgorithms))
                 </div>
            </div>
        </div>
        <div class="form-group">
            <div class="row">
                <div class="col-sm-2 col-sm-offset-5">
                    <button class="btn btn-default" style="margin-top: 10px;" id="saveGroup">Сохранить</button>
                </div>
            </div>
        </div>
    </div>

    <div class="container-fluid">
        <!-- Дерево и правая панель для редактирования -->
        <div class="row">
            <div class="k-content wide flex-tree-list col-sm-5">
                <div id="treeList" class="height-constraint" style="font-size: 120%;"></div>
                <div style="display: flex; place-items: center;">
                    <div>
                        @(Html.Kendo().ToolBar()
                            .Name("additionToolbar")
                            .Items(items =>
                            {
                                items.Add().Type(CommandType.SplitButton).Text("")
                                    .Icon("add").HtmlAttributes(new {style = "color: green;"})
                                    .MenuButtons(menuButtons =>
                                    {
                                        menuButtons.Add().Text("Тур").Id("add-tour");
                                        menuButtons.Add().Text("Группа").Id("add-group");
                                        menuButtons.Add().Text("Подгруппа").Id("add-subgroup");
                                    });
                            }))
                    </div>
                    <button type="button" id="deleteGroupOrTourButton"><span class="k-icon k-i-delete"></span></button>
                </div>
            </div>
            <div id="tabs" class="col-sm-7" style="display: none">
                @(Html.Kendo().TabStrip()
                    .Name("tabStrip")
                    .Animation(false)
                    .Items(tabstrip =>
                    {
                        tabstrip.Add().Text("Карточка")
                            .HtmlAttributes(new {id="mainContentTab"})
                            .Selected(true)
                            .Content(@<text>
                                         <div id="mainContent" style="width: 98%">
                                         </div>
                                      </text>);
                        tabstrip.Add().Text("Настройка группировки")
                            .HtmlAttributes(new {id="groupingSettingsTab"})
                            .Content(@<text>
                                         <div id="groupingSettings" style="width: 98%">
                                         </div>
                                      </text>);
                        tabstrip.Add().Text("Настройка сегмента")
                            .HtmlAttributes(new {id="segmentSettingsTab"})
                            .Content(@<text>
                                         <div id="segmentSettings" style="width: 98%">
                                         </div>
                                      </text>);
                        tabstrip.Add().Text("Настройка для разъяснений")
                            .HtmlAttributes(new {id="explanationSettingsTab"})
                            .Content(@<text>
                                         <div id="explanationSettings" style="width: 98%">
                                         </div>
                                      </text>);
                        tabstrip.Add().Text("Настройка для акта определения")
                            .HtmlAttributes(new {id="cadastralCostDefinitionActSettingsTab"})
                            .Content(@<text>
                                         <div id="cadastralCostDefinitionActSettings" style="width: 98%">
                                         </div>
                                      </text>);
                    }))
            </div>
        </div>
    </div>
</div>

<script src="~/js/common-modals.js"></script>
<script src="~/js/groups.js"></script>
<script type="text/javascript">
    const GROUP_TYPE = { NONE: 0, UNDEFINED: 1, MAIN:2, GROUP: 3, SUBGROUP: 4 };

    $(document).ready(function () {
        $('#additionToolbar').removeClass("k-widget");
        $('#additionToolbar .k-split-button').addClass("displayInherit");
        $('#additionToolbar .k-overflow-anchor').addClass("displayNone");

        $("#add-tour").click(function () {
            var modal = $("#tourAdditionModal");
            ShowModal(modal, '25%', '15%');
        });
        $("#saveTour").click(function () {
            SaveTour();
        });


        $("#add-group").click(function () {
            $("#groupForm").hide();
            ShowAddGroupModal();
        });
        $("#add-subgroup").click(function () {
            $("#groupForm").show();
            ShowAddSubGroupModal();
        });
        $("#saveGroup").click(function () {
            SaveGroup($("#groupForm").is(":visible"));
        });


        $("#tabStrip .k-tabstrip-items").on("click", "li.k-state-default", function (e) {
            var selectedTabId = $(this).attr('id');
            var row = GetSelectedRowInTree();
            var data = GetDataFromRowInTree(row);
            if (row.length > 0) {
                switch (selectedTabId) {
                    case "groupingSettingsTab":
                        $('#groupingSettings').load(data.UrlForGroupingSettings);
                        break;
                    case "segmentSettingsTab":
                        $('#segmentSettings').load(data.UrlForSegmentSettings);
                        break;
                    case "explanationSettingsTab":
                        $('#explanationSettings').load(data.UrlForExplanationSettings);
                        break;
                    case "cadastralCostDefinitionActSettingsTab":
                        $('#cadastralCostDefinitionActSettings').load(data.UrlForCadastralCostDefinitionActSettings);
                        break;
                }
            }
        });

        DownloadTours();
    });



	function DownloadTours() {
		kendo.ui.progress($('body'), true);
		$.ajax({
			type: 'GET',
			url: "@Url.Action("GetAllTours", "Tour")",
			dataType: "json",
			success: function(response) {
				var data = response.map(function(tour) {
					return {
						Id: tour.Id,
						GroupName: tour.GroupName,
						IsTour: true,
						UrlForEdit: tour.UrlForEdit,
						GroupType: tour.GroupType,
						AreGroupsDownloaded: false,
						items: tour.Items.map(function(emptyGroup) {
							return {
								Id: emptyGroup.Id,
								GroupName: emptyGroup.GroupName
							}
						})
					}
				});
				$("#treeList").kendoTreeView({
					dataSource: data,
					dataTextField: 'GroupName',
					dataValueField: 'Id',
					change: UpdateMainContent,
					expand: function (tree) {
						DownloadGroupsForTour(tree);
					}
				});

                $("#deleteGroupOrTourButton").kendoButton({
                    icon: "delete",
                    click: ondeleteGroupOrTourButtonClick
                });

				FocusOnTour();
			},
			error: function(response) {
				Common.ShowError(response.responseText);
			},
			complete: function() {
				kendo.ui.progress($('body'), false);
			}
		});
	}

    function ondeleteGroupOrTourButtonClick() {
        var row = GetSelectedRowInTree();
        if (row.length > 0) {
            var data = GetDataFromRowInTree(row);

            var checkUrl, deleteUrl;
            var deleteRequestType = 'POST';
            var requestData = { id: data.Id };
            var confirmMessage, forbiddingMessage;
            if (data.IsTour) {
                checkUrl = '@Url.Action("CanTourBeDeleted", "Tour")';
                deleteUrl = '@Url.Action("TourEstimates", "Tour")';
                deleteRequestType = 'DELETE';
                confirmMessage = `Выполнить удаление тура '${data.GroupName}'? Все связанные с туром данные также будут удалены.`;
                forbiddingMessage = `Тур '${data.GroupName}' не может быть удален, т.к. имеются связанные задания на оценку`;
            } else {
                var parentYear = GetParentFromTree(row);
                var parentYearData = GetDataFromRowInTree(parentYear);
                switch (data.GroupType) {
                case GROUP_TYPE.MAIN:
                    checkUrl = '@Url.Action("CanGroupsBeDeleted", "Tour")';
                    deleteUrl = '@Url.Action("DeleteGroups", "Tour")';
                        requestData = { tourId: parentYearData.Id, isOks: data.GroupName.endsWith('ОКС') };
                    break;
                case GROUP_TYPE.GROUP:
                    parentYear = GetParentFromTree(parentYear);
                    parentYearData = GetDataFromRowInTree(parentYear);
                    checkUrl = '@Url.Action("CanGroupBeDeleted", "Tour")';
                    deleteUrl = '@Url.Action("DeleteGroup", "Tour")';
                    break;
                case GROUP_TYPE.SUBGROUP:
                    parentYear = GetParentFromTree(GetParentFromTree(parentYear));
                    parentYearData = GetDataFromRowInTree(parentYear);
                    checkUrl = '@Url.Action("CanGroupBeDeleted", "Tour")';
                    deleteUrl = '@Url.Action("DeleteGroup", "Tour")';
                    break;
                }
                confirmMessage = `Выполнить удаление группы '${data.GroupName}' тура '${parentYearData.GroupName}'? Все связанные с группой модели также будут удалены.`;
                forbiddingMessage = `Группа '${data.GroupName}' тура '${parentYearData.GroupName}' не может быть удалена, т.к. имеются связанные единицы оценки`;
            }

            kendo.ui.progress($('body'), true);
            $.ajax({
                url: checkUrl,
                type: 'POST',
                data: requestData,
                success: function (response) {
                    if (response.CanBeDeleted) {
                        Common.UI.ShowConfirm({
                            title: '',
                            content: confirmMessage,
                            onSuccess: function() {
                                kendo.ui.progress($('body'), true);
                                $.ajax({
                                    url: deleteUrl,
                                    type: deleteRequestType,
                                    data: requestData,
                                    success: function(response) {
                                        if (response.Success) {
                                            window.parent.location.reload();
                                            Common.ShowMessage(response.Success);
                                        }
                                    },
                                    error: function(response) {
                                        Common.ShowError(response.responseText);
                                    },
                                    complete: function () {
                                        kendo.ui.progress($('body'), false);
                                    }
                                });
                            }
                        });
                    }
                    else {
                        Common.UI.ShowDialog({
                            title: '',
                            icon: 'error',
                            content: forbiddingMessage});
                    }
                },
                error: function(response) {
                    Common.ShowError(response.responseText);
                },
                complete: function () {
                    kendo.ui.progress($('body'), false);
                }
            });
        } else {
            Common.UI.ShowDialog({
                title: '',
                icon: 'error',
                content: `Не выбрана запись для удаления`});
        }
    }

	function DownloadGroupsForTour(tree) {
		var node = $('#treeList').data('kendoTreeView').dataItem(tree.node);
		//подгружаем список групп только для тура и только один раз
		if (!node || !node.IsTour || node.AreGroupsDownloaded)
			return;
		var tourId = node.Id;
		kendo.ui.progress($('body'), true);
		$.ajax({
			type: 'GET',
			url: "@Url.Action("GetGroupsForTour", "Tour")",
			data: { tourId: tourId },
			dataType: "json",
			success: function (response) {
				if (!response)
					return;
				var result = MapTourGroups(response);
				node.items.length = 0;
				result.forEach(function(e) {
					node.items.push(e);
				});
				node.AreGroupsDownloaded = true;
				FocusOnGroup();
			},
			error: function(response) {
				Common.ShowError(response.responseText);
			},
			complete: function() {
				kendo.ui.progress($('body'), false);
			}
		});
	}



	function UpdateMainContent() {
        var row = GetSelectedRowInTree();
        if (row.length > 0) {
            var data = GetDataFromRowInTree(row);
            $("#tabs").show();
            $('#segmentSettings').html("");
            $('#explanationSettings').html("");
            $('#cadastralCostDefinitionActSettings').html("");
            $('#mainContent').load(data.UrlForEdit);
            var tabStrip = $("#tabStrip").kendoTabStrip().data("kendoTabStrip");
            tabStrip.select(0);
            var tabWithMarketSegmentSettings = tabStrip.tabGroup.children().eq(1);
            var tabWithExplanationSettings = tabStrip.tabGroup.children().eq(2);
            var tabWithCadastralCostDefinitionActSettings = tabStrip.tabGroup.children().eq(3);
            if (data.GroupType == GROUP_TYPE.GROUP || data.GroupType == GROUP_TYPE.SUBGROUP) {
                $("#tabStrip-2").removeAttr("style");
                $("#tabStrip-2").attr("style", "display: block");
                tabStrip.enable(tabWithMarketSegmentSettings);

                if (data.GroupType == GROUP_TYPE.SUBGROUP) {
                    $("#tabStrip-3").removeAttr("style");
                    $("#tabStrip-3").attr("style", "display: block");
                    tabStrip.enable(tabWithExplanationSettings);

                    $("#tabStrip-4").removeAttr("style");
                    $("#tabStrip-4").attr("style", "display: block");
                    tabStrip.enable(tabWithCadastralCostDefinitionActSettings);
                } else {
                    tabStrip.disable(tabWithExplanationSettings);
                    tabStrip.disable(tabWithCadastralCostDefinitionActSettings);
                }
            } else {
                tabStrip.disable(tabWithMarketSegmentSettings);
                tabStrip.disable(tabWithExplanationSettings);
                tabStrip.disable(tabWithCadastralCostDefinitionActSettings);
            }
        }
    }


    function GetSelectedRowInTree() {
		var treeList = $("#treeList").data("kendoTreeView");
        return treeList.select();
    }


    function GetDataFromRowInTree(row) {
		var treeList = $("#treeList").data("kendoTreeView");
        var data = treeList.dataItem(row);
        return data;
	}


	function GetParentFromTree(row) {
		var tree = $("#treeList").data("kendoTreeView");
		var parent = tree.parent(row);
		return parent;
	}


	function FocusOnTour() {
		var tourId = '@ViewBag.ChangedTourId';
		if (tourId == 0)
			return;
		var treeView = $("#treeList").data("kendoTreeView");
		var allData = treeView.dataSource._data;
		ExpandNode(allData, tourId, true);
		ScrollToSelectedNode();
	}


    var shouldFocus = true;
	function FocusOnGroup() {
		if (!shouldFocus)
			return;
	    var tourId = '@ViewBag.ChangedTourId';
	    var parentGroupId = '@ViewBag.ChangedGroupParentGroupId';
		var groupId = '@ViewBag.ChangedGroupId';
		if (tourId == 0 || parentGroupId == 0 || groupId == 0)
		    return;
	    var treeView = $("#treeList").data("kendoTreeView");
	    var allData = treeView.dataSource._data;
	    allData.forEach(function(tour) {
			if (tour.Id == tourId) {
				var mainGroups = tour.children._data;
				var isParentWasFound = false;
				//раскрыть списки до группы
			    mainGroups.forEach(function(mainGroup) {
					if (mainGroup.Id == parentGroupId) {
						isParentWasFound = true;
						var groups = mainGroup.children._data;
						ExpandNode(mainGroups, parentGroupId, false);
						ExpandNode(groups, groupId, true);
					}
				});
				//раскрыть списки до подгруппы
				if (!isParentWasFound) {
					mainGroups.forEach(function(mainGroup) {
						var groups = mainGroup.children._data;
						groups.forEach(function (group) {
							if (group.Id == parentGroupId) {
								var subGroups = group.children._data;
								subGroups.forEach(function (subGroup) {
									if (subGroup.Id == groupId) {
										ExpandNode(mainGroups, mainGroup.Id, false);
										ExpandNode(groups, parentGroupId, false);
										ExpandNode(subGroups, groupId, true);
									}
								});
							}
						});
					});
				}
		    }
		});
		ScrollToSelectedNode();
		shouldFocus = false;
	}


    function ExpandNode(allData, nodeId, shouldSelect) {
	    var treeView = $("#treeList").data("kendoTreeView");
	    allData.forEach(function (e) {
		    var node = treeView.findByUid(e.uid);
			if (e.Id == nodeId) {
				if (shouldSelect) {
					treeView.select(node);
				}
				treeView.expand(node);
			} else {
			    treeView.collapse(node);
		    }
	    });
	}


	function ScrollToSelectedNode() {
		var treeView = $("#treeList").data("kendoTreeView");
		var selectedNode = treeView.select()[0];
		if (selectedNode) {
			var itemScrollTop = GetElementTopPosition(selectedNode);
			$("#treeList").animate({ scrollTop: itemScrollTop });
		}
	}
    function GetElementTopPosition(el) {
	    var rect = el.getBoundingClientRect(),
		    scrollTop = window.pageYOffset || document.documentElement.scrollTop;
	    return rect.top + scrollTop;
    }


    function ShowInfoWindow(message) {
        Common.UI.ShowInfo({
            content: message,
            onSuccess: function() {
                Common.UI.CloseWindow('Dashboard', window.parent);
            }
        });
    }


    function SaveTour() {
        kendo.ui.progress($('body'), true);
        var data = {
            id: -1,
            year: $('#addTourInput').val()
        };
        $.ajax({
            type: 'POST',
            url: '@Url.Action("TourEstimates", "Tour")',
            data: data,
            success: function () {
                $("#tourAdditionModal").data("kendoWindow").close();
                Common.ShowMessage("Сохранение выполнено");
                window.parent.location.reload();
            },
            error: function (response) {
                Common.ShowError(response.responseText);
            },
            complete: function() {
                kendo.ui.progress($('body'), false);
            }
        });
    }


    function ShowAddGroupModal() {
        var row = GetSelectedRowInTree();
        if (row.length <= 0) {
            ShowInfoWindow("Для добавления группы нужно выбрать строку из дерева c основной группой");
        } else {
            var data = GetDataFromRowInTree(row);
            if (data.GroupType != GROUP_TYPE.MAIN)
                ShowInfoWindow("Нужно выбрать основную группу из дерева");
            else { ;
	            var parentYear = GetParentFromTree(row);
				var parentYearData = GetDataFromRowInTree(parentYear);
	            $("#tourYearId").val(parentYearData.Id);
				$("#tourYear").html(parentYearData.GroupName);
	            $("#mainGroupId").val(data.Id);
				$("#mainGroupName").html(data.GroupName);
                $("#addGroupAlgorithmBlock").hide();
                var modal = $("#groupAdditionModal");
                ShowModal(modal, '60%', '45%');
            }
        }
    }


    function ShowAddSubGroupModal() {
        var row = GetSelectedRowInTree();
        if (row.length <= 0) {
            ShowInfoWindow("Для добавления подгруппы нужно выбрать строку из дерева c неосновной группой");
        } else {
            var data = GetDataFromRowInTree(row);
            if (data.GroupType != GROUP_TYPE.GROUP)
                ShowInfoWindow("Нужно выбрать неосновную группу из дерева");
            else {
	            var parentMainGroup = GetParentFromTree(row);
				var parentMainGroupData = GetDataFromRowInTree(parentMainGroup);
				$("#mainGroupId").val(parentMainGroupData.Id);
				$("#mainGroupName").html(parentMainGroupData.GroupName);

				var parentYear = GetParentFromTree(parentMainGroup);
				var parentYearData = GetDataFromRowInTree(parentYear);
				$("#tourYearId").val(parentYearData.Id);
				$("#tourYear").html(parentYearData.GroupName);

				$("#groupId").val(data.Id);
				$("#groupName").html(data.GroupName);
                $("#addGroupAlgorithmBlock").show();
                var modal = $("#groupAdditionModal");
                ShowModal(modal, '60%', '45%');
            }
        }
    }


    function SaveGroup(isSubGroup) {
        kendo.ui.progress($('body'), true);
        var dto = {
            Id: null,
			RatingTourId: $('#tourYearId').val(),
            ParentGroupId: isSubGroup ? $('#groupId').val() : $('#mainGroupId').val(),
            Name: $('#addGroupNameInput').val(),
            Number: $('#addGroupNumberInput').val(),
            GroupAlgorithm: $('[name="addGroupAlgorithmInput"]').val() 
        };
        $.ajax({
            url: '@Url.Action("EditGroup", "Tour")',
            type: 'POST',
            data: dto,
            success: function (response) {
                if (response.Errors) {
                    var errors = getErrors(response.Errors);
                    Common.ShowError(errors);
                    return;
                } else {
                    Common.ShowMessage('Сохранение выполнено');
                    $("#groupAdditionModal").data("kendoWindow").close();
                    var parentId = isSubGroup ? dto.ParentGroupId : dto.GroupingAlgorithmId;
                    ReloadTourCartTab(dto.RatingTourId, parentId, response.Id);
                }
            },
            error: function (response) {
                Common.ShowError(response.responseText);
            },
            complete: function () {
                kendo.ui.progress($('body'), false);
            }
        });
    }


	function ReloadTourCartTab(tourId, parentGroupId, groupId) {
		window.location.replace('@Url.Action("TourCard", "Tour")' + "?tourId=" +
			tourId + "&parentGroupId=" + parentGroupId + "&groupId=" + groupId);
	}

</script>

@section styles {
    <style>
        .border {
            border: 1px solid #969696;
        }

        .height-constraint {
            max-height: 95%;
            max-height: 95vh;
        }

        .flex-content {
            display: flex;
            height: 100%;
        }

        .flex-tree-list {
            /*margin: 10px;*/
            flex-grow: 1;
            flex-shrink: 1;
            flex-basis: auto;
            align-items: stretch;
        }

        .flex-list-buttons {
            margin: 10px;
        }

        button {
            width: 10rem;
            margin-bottom: 5px !important;
        }

        .tour p:hover {
            background: #eaeef7;
        }

        .tour p {
            padding: 5px;
        }

        .selected {
            background: #eaeef7;
        }

        .control-label {
            margin-bottom: 0px;
            font-weight: normal;
            vertical-align: sub;
        }

        /*Стили для табов*/
        .k-panelbar .k-tabstrip > .k-content, .k-tabstrip > .k-content
        {
            background: transparent;
            border: none;
        }
        .k-tabstrip .k-content.k-state-active {
            background-color: transparent;
        }
        .k-active-filter, .k-state-active, .k-state-active:hover {
            background-color: transparent;
            border: none;
        }
        .k-tabstrip:focus {
            box-shadow: none;
        }

        .displayInherit {
            display: inherit !important;
        }

        .displayNone {
            display: none !important;
        }

        #deleteGroupOrTourButton {
            background-color: white;
            border-color: #e5e8f0;
        }

        #deleteGroupOrTourButton:hover {
            background-color: #9ea8b9;
            border-color: #bebec3;
        } 

        #deleteGroupOrTourButton span{
             color: red;
        }
    </style>
}