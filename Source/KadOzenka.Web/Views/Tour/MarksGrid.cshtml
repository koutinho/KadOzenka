@model KadOzenka.Web.Models.Tour.TourModel

<div class="form-horizontal col-sm-12">
    <div style="display: flex;">
        <div id="markGrid"></div>
    </div>
</div>

<script>
    $(document).ready(function () {

        var markGridDataSource = new kendo.data.DataSource({
            transport: {
                read: {
                    url: '@Url.Action("GetMarkCatalog", "Tour")',
                    contentType: 'application/json; charset=utf-8',
                    data: {
                        groupId: '@ViewBag.GroupId', factorId: '@ViewBag.FactorId' },
                    dataType: 'json'
                },
                create: {
                    url: '@Url.Action("CreateMark", "Tour")',                         
                    type: 'POST',
                    dataType: 'json'
                },
                update: {
                    url: '@Url.Action("UpdateMark", "Tour")',                    
                    type: 'POST',
                    dataType: 'json'
                },
                destroy: {
                    url: '@Url.Action("DeleteMark", "Tour")',                        
                    type: 'POST',
                    dataType: 'json'
                }
            },
            requestStart: function(e) {
                if (e.type == "read") {
                    kendo.ui.progress($('body'), true);
                }
            },
            requestEnd: function (e) {
                if (e.type == "read") {
                    kendo.ui.progress($('body'), false);
                }
            },
            error: function (e) {
                Common.ShowError(e.xhr.responseText);
            },
            schema: {
                model: {
                    id: "Id",
                    fields: {
                        Id: { editable: false, nullable: true },
                        GroupId: { editable: false},
                        FactorId: { editable: false },
                        ValueFactor: { validation: { required: true } },
                        MetkaFactor: { type: "number", nullable: true  }
                    }
                }
            },
            change: function (e) {
                //если добавляем новое значение в грид, а к нему уже была применена фильтрация
                //чтобы отобразить новую пустую строчку, нужна дополнительная фильтрация
                if (e.action == "add") {
                    var filter = this.filter();
                    if (filter) {
                        var noValueFilter = { field: "ValueFactor", operator: "eq", value: "" };
                        var newFilter = {
                            logic: "or",
                            filters: [noValueFilter, filter]
                        };
                        this.filter(newFilter);
                    }
                }
            },
            pageSize: 10
        });

        $('#markGrid').kendoGrid({
            dataSource: markGridDataSource,
            columns: [
                {
                    field: 'ValueFactor',
                    title: 'Значение',
                    headerAttributes: {                            
                        style: "text-align: center;"
                    }
                }, {
                    field: 'MetkaFactor',
                    title: 'Метка',
                    headerAttributes: {
                        style: "text-align: center;"
                    },
                    editor: function (container, options) {
                        console.log('asdsdsd');
                        $('<input />').appendTo(container).kendoNumericTextBox({ format: "n", decimals: 13 });
                    }
                },
                { command: ["edit", "destroy"], title: "&nbsp;", width: "250px" }
            ],
            toolbar: ["create"],
            scrollable: true,
            pageable: true,
            editable: "inline",
            filterable: {
                extra: false,
                operators: {
                    string: {
                        startswith: "Начинается с",
                        eq: "Равно",
                        neq: "Не равно"
                    },
                    number: {
                        eq: "Равно",
                        gte: "Больше",
                        lte: "Меньше"
                    }
                }
            },
            beforeEdit: function (e) {
                if (e.model.isNew()) {
                    e.model.GroupId = '@ViewBag.GroupId';
                    e.model.FactorId = '@ViewBag.FactorId';
                }
            }
        });

    });

</script>

