@using KadOzenka.Web.Helpers
@using KadOzenka.Web.Models.GbuObject
@using ObjectModel.Directory
@using ObjectModel.Directory.Common

@model KadOzenka.Web.Models.GbuObject.HarmonizationCODViewModel

@using (Html.BeginForm("HarmonizationCOD", "GbuObject", FormMethod.Post))
{
<div class="form-horizontal col-sm-12">
    <div class="form-group"></div>
    <div class="form-group">
        <div class="col-sm-2">
            @Html.CustomLabelFor(m => m.IdCodJob)
        </div>
        <div class="col-sm-10">
            @Html.KendoDropDownListWithAutocompleteFor(m => m.IdCodJob, (System.Collections.IEnumerable)ViewData["CodJobs"])
        </div>
    </div>
@(await Html.PartialAsync("PartialCharacteristic", new PartialCharacteristicViewModel
{
	IdAttributeResult = Model.IdAttributeResult,
	IsNewAttribute = Model.IsNewAttribute,
	NameNewAttribute = Model.NameNewAttribute,
	RegistryId = Model.RegistryId,
	TypeNewAttribute = Model.TypeNewAttribute
}))
    <div class="form-group">
        <div class="col-sm-12">
            @(Html.Kendo().RadioButtonFor(m => m.PropertyType).Label(PropertyTypes.Stead.GetEnumDescription()).Value((long)PropertyTypes.Stead))
            <span>&nbsp;</span>
            @(Html.Kendo().RadioButtonFor(m => m.PropertyType).Label(PropertyTypes.Building.GetEnumDescription()).Value((long)PropertyTypes.Building))
            <span>&nbsp;</span>
            @(Html.Kendo().RadioButtonFor(m => m.PropertyType).Label(PropertyTypes.Construction.GetEnumDescription()).Value((long)PropertyTypes.Construction))
            <span>&nbsp;</span>
            @(Html.Kendo().RadioButtonFor(m => m.PropertyType).Label("ОНС").Value((long)PropertyTypes.UncompletedBuilding))
            <span>&nbsp;</span>
            @(Html.Kendo().RadioButtonFor(m => m.PropertyType).Label(PropertyTypes.Pllacement.GetEnumDescription()).Value((long)PropertyTypes.Pllacement))
        </div>

    </div>
    <fieldset class="filterFieldset">
        <div class="form-group">
            <div class="col-sm-12">
                @Html.Kendo().RadioButtonFor(m => m.SelectAllObject).Label("Все объекты").Value(true)
            </div>
        </div>
        <div class="form-group">
            <div class="col-sm-12">
                @Html.Kendo().RadioButtonFor(m => m.SelectAllObject).Label("По значению").Value(false)
            </div>
        </div>
        <div class="form-group">
            <div class="col-sm-7">
                <div class="col-sm-3">
                    @Html.CustomLabelFor(m => m.IdAttributeFilter)
                </div>
                <div class="col-sm-9">
                    @Html.KendoDropDownListWithAutocompleteFor(m => m.IdAttributeFilter, (System.Collections.IEnumerable)ViewData["Attributes"], isReadonly: Model.SelectAllObject)
                </div>
            </div>
            <div class="col-sm-5">
                <div class="col-sm-3">
                    @Html.CustomLabelFor(m => m.ValuesFilter)
                </div>
                <div class="col-sm-9">
                    <select id="valuesFilter" style="width: 100%;"></select>
                </div>
            </div>
        </div>
    </fieldset>
    <fieldset class="filterFieldset">
            <div class="form-group">
                <div class="col-sm-2">
                    @Html.Kendo().RadioButtonFor(m => m.IsDataActualUsed).Label("Дата актуализации").Value(true)
                </div>
                <div class="col-sm-4">
                    @(Html.Kendo().DatePickerFor(m => m.DataActual).Enable(Model.IsDataActualUsed))
                </div>
            </div>
            <div class="form-group">
                <div class="col-sm-2">
                    @Html.Kendo().RadioButtonFor(m => m.IsDataActualUsed).Label("Задания на оценку").Value(false)
                </div>
                <div class="col-sm-10">
                    @(Html.Kendo().MultiSelectFor(m => m.TaskFilter)
                    .DataTextField("Text")
                    .DataValueField("Value")
                    .Filter("contains")
                    .DataSource(source =>
                    {
                        source.Read(read =>
                        {
                            read.Action("GetTasksData", "GbuObject");
                        })
                        .ServerFiltering(false);
                    }).Enable(!Model.IsDataActualUsed))
                </div>
            </div>
        </fieldset>
    <fieldset class="attrLevelFieldset">
        <legend>1 уровень</legend>
        <div class="col-sm-2">
            @Html.CustomLabel("Характеристика")
        </div>
        <div class="col-sm-10">
            @Html.KendoDropDownListWithAutocompleteFor(m => m.Level1Attribute, (System.Collections.IEnumerable)ViewData["Attributes"])
        </div>
    </fieldset>
    <fieldset class="attrLevelFieldset">
        <legend>2 уровень</legend>
        <div class="col-sm-2">
            @Html.CustomLabel("Характеристика")
        </div>
        <div class="col-sm-10">
            @Html.KendoDropDownListWithAutocompleteFor(m => m.Level2Attribute, (System.Collections.IEnumerable)ViewData["Attributes"])
        </div>
    </fieldset>
    <fieldset class="attrLevelFieldset">
        <legend>3 уровень</legend>
        <div class="col-sm-2">
            @Html.CustomLabel("Характеристика")
        </div>
        <div class="col-sm-10">
            @Html.KendoDropDownListWithAutocompleteFor(m => m.Level3Attribute, (System.Collections.IEnumerable)ViewData["Attributes"])
        </div>
    </fieldset>
    <fieldset class="attrLevelFieldset">
        <legend>4 уровень</legend>
        <div class="col-sm-2">
            @Html.CustomLabel("Характеристика")
        </div>
        <div class="col-sm-10">
            @Html.KendoDropDownListWithAutocompleteFor(m => m.Level4Attribute, (System.Collections.IEnumerable)ViewData["Attributes"])
        </div>
    </fieldset>
    <fieldset class="attrLevelFieldset">
        <legend>5 уровень</legend>
        <div class="col-sm-2">
            @Html.CustomLabel("Характеристика")
        </div>
        <div class="col-sm-10">
            @Html.KendoDropDownListWithAutocompleteFor(m => m.Level5Attribute, (System.Collections.IEnumerable)ViewData["Attributes"])
        </div>
    </fieldset>
    <fieldset class="attrLevelFieldset">
        <legend>6 уровень</legend>
        <div class="col-sm-2">
            @Html.CustomLabel("Характеристика")
        </div>
        <div class="col-sm-10">
            @Html.KendoDropDownListWithAutocompleteFor(m => m.Level6Attribute, (System.Collections.IEnumerable)ViewData["Attributes"])
        </div>
    </fieldset>
    <fieldset class="attrLevelFieldset">
        <legend>7 уровень</legend>
        <div class="col-sm-2">
            @Html.CustomLabel("Характеристика")
        </div>
        <div class="col-sm-10">
            @Html.KendoDropDownListWithAutocompleteFor(m => m.Level7Attribute, (System.Collections.IEnumerable)ViewData["Attributes"])
        </div>
    </fieldset>
    <fieldset class="attrLevelFieldset">
        <legend>8 уровень</legend>
        <div class="col-sm-2">
            @Html.CustomLabel("Характеристика")
        </div>
        <div class="col-sm-10">
            @Html.KendoDropDownListWithAutocompleteFor(m => m.Level8Attribute, (System.Collections.IEnumerable)ViewData["Attributes"])
        </div>
    </fieldset>
    <fieldset class="attrLevelFieldset">
        <legend>9 уровень</legend>
        <div class="col-sm-2">
            @Html.CustomLabel("Характеристика")
        </div>
        <div class="col-sm-10">
            @Html.KendoDropDownListWithAutocompleteFor(m => m.Level9Attribute, (System.Collections.IEnumerable)ViewData["Attributes"])
        </div>
    </fieldset>
    <fieldset class="attrLevelFieldset">
        <legend>10 уровень</legend>
        <div class="col-sm-2">
            @Html.CustomLabel("Характеристика")
        </div>
        <div class="col-sm-10">
            @Html.KendoDropDownListWithAutocompleteFor(m => m.Level10Attribute, (System.Collections.IEnumerable)ViewData["Attributes"])
        </div>
    </fieldset>
    <div class="form-group">
        <div class="col-sm-3">
            @Html.CustomLabelFor(x => x.DefaultValue)
        </div>
        <div class="col-sm-9">
            @Html.KendoTextBoxFor(x => x.DefaultValue, isReadonly: false)
        </div>
    </div>
    <div class="form-group">
        <div class="col-sm-3">
            @Html.CustomLabelFor(m => m.IdDocument)
        </div>
        <div class="col-sm-9">
            @Html.KendoDropDownListWithAutocompleteFor(m => m.IdDocument, (System.Collections.IEnumerable)ViewData["Documents"])
        </div>
    </div>
    <div class="form-group">
        <div class="col-sm-7">
            @( await Html.PartialAsync("PartialTemplateStorage", new TemplateStorageViewModel
			{
				ControllerName = "GbuObject",
				ActionName = "GetTemplatesHarmonizationCOD"
			}))
        </div>
        <div class="col-sm-2 col-sm-offset-3">
            <button style="float: right" id="performHarmonization" class="k-button" type="button">Выполнить</button>
        </div>
    </div>
</div>
}

@section styles {
    <style>
        fieldset.attrLevelFieldset {
            border: 1px solid #c8c6cc;
            border-radius: 6px;
            margin-bottom: 10px;
            padding-bottom: 10px;
        }

            fieldset.attrLevelFieldset legend {
                font-size: initial;
                font-style: italic;
                margin: 0;
            }

        fieldset.filterFieldset {
            border: 1px solid #656565;
            margin-bottom: 10px;
            padding-bottom: 10px;
            padding-top: 10px;
        }

        #valuesFilter-list {
            display: none !important;
        }

        .filter {
            padding-top: 5px;
        }
    </style>
}
@section scripts {
	<script type="text/javascript">

        function fillForm(data) {
        $('#valuesFilter').getKendoMultiSelect().value([]);
        $('#@(nameof(Model.TaskFilter))').data("kendoMultiSelect").value([]);
		data.forEach(function (val) {
			if (Object.keys(val)[0].includes('Level') || Object.keys(val)[0].includes('IdAttributeResult') ||
                Object.keys(val)[0].includes('IdAttributeFilter') || Object.keys(val)[0].includes('IdCodJob') || Object.keys(val)[0].includes('IdDocument')) {
				$('#' + Object.keys(val)[0]).data('kendoDropDownList').value(val[Object.keys(val)[0]]);
			}

			if (Object.keys(val)[0].includes('ValuesFilter')) {
				var widget = $('#valuesFilter').getKendoMultiSelect();
				var dataSource = widget.dataSource;
				var newItem = {
					valuesFilter: val[Object.keys(val)[0]],
					valuesFilterName: val[Object.keys(val)[0]]
				};

				dataSource.add(newItem);
				var newValue = newItem.valuesFilter;
				widget.value(widget.value().concat([newValue]));
			}

			if (Object.keys(val)[0] === '@(nameof(Model.SelectAllObject))') {
				console.log(true);
				if (!!val[Object.keys(val)[0]]) {
                    $('#@(nameof(Model.SelectAllObject))_True').prop("checked", true);
				    changeAttributeFilterAvailability(true);
					return;
				}
                $('#@(nameof(Model.SelectAllObject))_False').prop("checked", true);
			    changeAttributeFilterAvailability(false);
            }

		    if (Object.keys(val)[0] === '@(nameof(Model.IsDataActualUsed))') {
		        if (!!val[Object.keys(val)[0]]) {
		            $('#@(nameof(Model.IsDataActualUsed))_True').prop("checked", true);
		            changeDataActualAvailability(true);
		            return;
		        }
		        $('#@(nameof(Model.IsDataActualUsed))_False').prop("checked", true);
		        changeDataActualAvailability(false);
		    }

		    if (Object.keys(val)[0] === '@(nameof(Model.DataActual))') {
		        $('#@(nameof(Model.DataActual))').data('kendoDatePicker').value(kendo.parseDate(val[Object.keys(val)[0]]));
		    }

		    if (Object.keys(val)[0].includes('@(nameof(Model.TaskFilter))')) {
		        var currentValue = $('#@(nameof(Model.TaskFilter))').data("kendoMultiSelect").value();
		        currentValue.push([val[Object.keys(val)[0]]]);
		        $('#@(nameof(Model.TaskFilter))').data("kendoMultiSelect").value(currentValue);
		    }

			if (Object.keys(val)[0] === 'PropertyType') {
				var id = '#PropertyType_' + val[Object.keys(val)[0]];
				$(id).prop("checked", true);
            }

		    if (Object.keys(val)[0].includes('DefaultValue')) {
		        $('#' + Object.keys(val)[0]).val(val[Object.keys(val)[0]]);
		    }
		});
	}

		$(document).ready(function () {

			templateStorage.init(@((int)DataFormStorege.HarmonizationCOD), "SaveTemplateHarmonizationCODObject", "GbuObject", "GetTemplatesOneGroup", "GbuObject", fillForm);
		    initIsDataActualUsedChangedHandler();
		    initSelectAllObjectChangedHandler();

			function onDataBound(e) {
				$('.k-multiselect .k-input').unbind('keyup');
				$('.k-multiselect .k-input').on('keyup', onClickEnter);
			}
			function onClickEnter(e) {
				if (e.keyCode === 13) {
					var widget = $('#valuesFilter').getKendoMultiSelect();
					var dataSource = widget.dataSource;
					var input = $('.k-multiselect .k-input');
					var value = input.val().trim();
					if (!value || value.length === 0) {
						return;
					}
					var newItem = {
						valuesFilter: value,
						valuesFilterName: value
					};

					dataSource.add(newItem);
					var newValue = newItem.valuesFilter;
					widget.value(widget.value().concat([newValue]));
				}
			}
			$("#valuesFilter").kendoMultiSelect({
				dataTextField: "valuesFilterName",
				dataValueField: "valuesFilter",
				dataSource: {
					data: []
				},
                dataBound: onDataBound,
				enable: @(Model.SelectAllObject ? "false" : "true")
			});

			$('#performHarmonization').on('click',
				function() {
					kendo.ui.progress($('body'), true);
					var form = $('form');
					var formObject = Common.Functions.FormToObject(form);
                    formObject.ValuesFilter = $("#valuesFilter").data("kendoMultiSelect").value();
				    formObject.TaskFilter = $('#@(nameof(Model.TaskFilter))').data("kendoMultiSelect").value();
					$.post(form.attr('action'), formObject).done(function(response) {
						kendo.ui.progress($('body'), false);
						if (response.Errors) {
							var errors = $.map(distinctErrors(response.Errors),
								function(el) {
									return el.Message;
								});
							Common.ShowError(errors);
							return;
						}
						if (response.Success) {
							if (response.idResultAttribute && updateResultControl) {
								updateResultControl(response.idResultAttribute);
							}
							Common.ShowMessage(response.Success);
						}
					}).fail(function (response, textStatus, errorThrown) {
						kendo.ui.progress($('body'), false);
						Common.ShowError(response.responseText);
					});
				});
		});

        function distinctErrors(errors) {
            var result = [];
            $.each(errors,
                function (index, event) {
                    var events = $.grep(result,
                        function (e) {
                            return event.Message === e.Message;
                        });
                    if (events.length === 0) {
                        result.push(event);
                    }
                });

            return result;
        }

        function initSelectAllObjectChangedHandler() {
            $('input[type="radio"][name="SelectAllObject"][value="True"] ').change(function() {
                if (this.checked) {
                    changeAttributeFilterAvailability(true);
                }
            });
            $('input[type="radio"][name="SelectAllObject"][value="False"] ').change(function() {
                if (this.checked) {
                    changeAttributeFilterAvailability(false);
                }
            });
        }

        function initIsDataActualUsedChangedHandler() {
            $('input[type="radio"][name="IsDataActualUsed"][value="True"] ').change(function() {
                if (this.checked) {
                    changeDataActualAvailability(true);
                }
            });
            $('input[type="radio"][name="IsDataActualUsed"][value="False"] ').change(function() {
                if (this.checked) {
                    changeDataActualAvailability(false);
                }
            });
        }

        function changeDataActualAvailability(isDataActualUsed) {
            if (isDataActualUsed) {
                $('#@(nameof(Model.TaskFilter))').data("kendoMultiSelect").value([]);
                $('#@(nameof(Model.TaskFilter))').data("kendoMultiSelect").enable(false);
                $('#@(nameof(Model.DataActual))').data('kendoDatePicker').enable(true);
            } else {
                $('#@(nameof(Model.DataActual))').data('kendoDatePicker').value(null);
                $('#@(nameof(Model.DataActual))').data('kendoDatePicker').enable(false);
                $('#@(nameof(Model.TaskFilter))').data("kendoMultiSelect").enable(true);
            }
        }

        function changeAttributeFilterAvailability(areFieldsReadonly) {
            if (areFieldsReadonly) {
                $('#@(nameof(Model.IdAttributeFilter))').data('kendoDropDownList').value('');
                $('#@(nameof(Model.IdAttributeFilter))').data('kendoDropDownList').enable(false);
                $('a.clear-button-@(nameof(Model.IdAttributeFilter))').addClass('k-state-disabled');

                $('#valuesFilter').data("kendoMultiSelect").value([]);
                $('#valuesFilter').data("kendoMultiSelect").enable(false);
            } else {
                $('#@(nameof(Model.IdAttributeFilter))').data('kendoDropDownList').enable(true);
                $('a.clear-button-@(nameof(Model.IdAttributeFilter))').removeClass('k-state-disabled');
                $('#valuesFilter').data("kendoMultiSelect").enable(true);
            }
        }
    </script>
}