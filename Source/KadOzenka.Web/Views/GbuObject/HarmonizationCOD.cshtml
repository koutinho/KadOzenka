@using System.Collections
@using KadOzenka.Web.Helpers
@using KadOzenka.Web.Models.GbuObject
@using ObjectModel.Directory
@using ObjectModel.Directory.Common

@model KadOzenka.Web.Models.GbuObject.HarmonizationCODViewModel

@using (Html.BeginForm("HarmonizationCOD", "GbuObject", FormMethod.Post))
{
    <div class="form-horizontal col-sm-12">
        <div class="form-group"></div>
        <div class="form-group">
            <div class="col-sm-2">
                @Html.CustomLabelFor(m => m.IdCodJob)
            </div>
            <div class="col-sm-10">
                @Html.KendoDropDownListWithAutocompleteFor(m => m.IdCodJob, (System.Collections.IEnumerable)ViewData["CodJobs"])
            </div>
        </div>
        @(await Html.PartialAsync("Partials/PartialCharacteristic.cshtml", new PartialCharacteristicViewModel
            {
                IdAttributeResult = Model.IdAttributeResult,
                IsNewAttribute = Model.IsNewAttribute,
                NameNewAttribute = Model.NameNewAttribute,
                RegistryId = Model.RegistryId,
                TypeNewAttribute = Model.TypeNewAttribute
            }))
        <div class="form-group">
            <div class="col-sm-12">
                @(Html.Kendo().RadioButtonFor(m => m.PropertyType).Label(PropertyTypes.Stead.GetEnumDescription()).Value((long)PropertyTypes.Stead))
                <span>&nbsp;</span>
                @(Html.Kendo().RadioButtonFor(m => m.PropertyType).Label(PropertyTypes.Building.GetEnumDescription()).Value((long)PropertyTypes.Building))
                <span>&nbsp;</span>
                @(Html.Kendo().RadioButtonFor(m => m.PropertyType).Label(PropertyTypes.Construction.GetEnumDescription()).Value((long)PropertyTypes.Construction))
                <span>&nbsp;</span>
                @(Html.Kendo().RadioButtonFor(m => m.PropertyType).Label("ОНС").Value((long)PropertyTypes.UncompletedBuilding))
                <span>&nbsp;</span>
                @(Html.Kendo().RadioButtonFor(m => m.PropertyType).Label(PropertyTypes.Pllacement.GetEnumDescription()).Value((long)PropertyTypes.Pllacement))
            </div>
        </div>
        <fieldset class="filterFieldset">
            <div class="form-group">
                <div class="col-sm-12">
                    <label>
                        @(Html.Kendo().CheckBoxFor(m => m.SelectAllObject))
                        Все объекты
                    </label>
                </div>
            </div>
            <div class="form-group">
                <div class="col-sm-2">
                    <label>
                        @(Html.Kendo().CheckBoxFor(m => m.IsValuesFilterUsed).Enable(!Model.SelectAllObject))
                        По значению
                    </label>
                </div>
                <div class="col-sm-2">
                    @Html.CustomLabelFor(m => m.IdAttributeFilter)
                </div>
                <div class="col-sm-4">
                    @Html.KendoDropDownListTreeWithButton(m => m.IdAttributeFilter, (IEnumerable<DropDownTreeItemModel>)ViewData["TreeAttributes"], isReadonly: true)
                </div>
                <div class="col-sm-1">
                    @Html.CustomLabelFor(m => m.ValuesFilter)
                </div>
                <div class="col-sm-3">
                    <select id="valuesFilter" style="width: 100%;"></select>
                </div>
            </div>
            <div class="form-group">
                <div class="col-sm-2">
                    <label>
                        @(Html.Kendo().CheckBoxFor(m => m.IsDataActualUsed).Enable(!Model.SelectAllObject))
                        Дата актуализации
                    </label>
                </div>
                <div class="col-sm-4">
                    @(Html.Kendo().DatePickerFor(m => m.DataActual).Enable(Model.IsDataActualUsed))
                </div>
            </div>
            <div class="form-group">
                <div class="col-sm-2">
                    <label>
                        @(Html.Kendo().CheckBoxFor(m => m.IsTaskFilterUsed).Enable(!Model.SelectAllObject))
                        Задания на оценку
                    </label>
                </div>
                <div class="col-sm-10">
                    @(Html.Kendo().MultiSelectFor(m => m.TaskFilter)
                            .DataTextField("Text")
                            .DataValueField("Value")
                            .Filter("contains")
                            .Enable(Model.IsTaskFilterUsed)
                            .DataSource(source =>
                            {
                                source.Read(read =>
                                {
                                    read.Action("GetTasksData", "GbuObject");
                                })
                                    .ServerFiltering(false);
                            }))
                </div>
            </div>
        </fieldset>
        <fieldset class="attrLevelFieldset">
            <legend>1 уровень</legend>
            <div class="col-sm-2">
                @Html.CustomLabel("Характеристика")
            </div>
            <div class="col-sm-10">
                @Html.KendoDropDownListTreeWithButton(m => m.Level1Attribute, (IEnumerable<DropDownTreeItemModel>)ViewData["TreeAttributes"])
            </div>
        </fieldset>
        <fieldset class="attrLevelFieldset">
            <legend>2 уровень</legend>
            <div class="col-sm-2">
                @Html.CustomLabel("Характеристика")
            </div>
            <div class="col-sm-10">
                @Html.KendoDropDownListTreeWithButton(m => m.Level2Attribute, (IEnumerable<DropDownTreeItemModel>)ViewData["TreeAttributes"])
            </div>
        </fieldset>
        <fieldset class="attrLevelFieldset">
            <legend>3 уровень</legend>
            <div class="col-sm-2">
                @Html.CustomLabel("Характеристика")
            </div>
            <div class="col-sm-10">
                @Html.KendoDropDownListTreeWithButton(m => m.Level3Attribute, (IEnumerable<DropDownTreeItemModel>)ViewData["TreeAttributes"])
            </div>
        </fieldset>
        <fieldset class="attrLevelFieldset">
            <legend>4 уровень</legend>
            <div class="col-sm-2">
                @Html.CustomLabel("Характеристика")
            </div>
            <div class="col-sm-10">
                @Html.KendoDropDownListTreeWithButton(m => m.Level4Attribute, (IEnumerable<DropDownTreeItemModel>)ViewData["TreeAttributes"])
            </div>
        </fieldset>
        <fieldset class="attrLevelFieldset">
            <legend>5 уровень</legend>
            <div class="col-sm-2">
                @Html.CustomLabel("Характеристика")
            </div>
            <div class="col-sm-10">
                @Html.KendoDropDownListTreeWithButton(m => m.Level5Attribute, (IEnumerable<DropDownTreeItemModel>)ViewData["TreeAttributes"])
            </div>
        </fieldset>
        <fieldset class="attrLevelFieldset">
            <legend>6 уровень</legend>
            <div class="col-sm-2">
                @Html.CustomLabel("Характеристика")
            </div>
            <div class="col-sm-10">
                @Html.KendoDropDownListTreeWithButton(m => m.Level6Attribute, (IEnumerable<DropDownTreeItemModel>)ViewData["TreeAttributes"])
            </div>
        </fieldset>
        <fieldset class="attrLevelFieldset">
            <legend>7 уровень</legend>
            <div class="col-sm-2">
                @Html.CustomLabel("Характеристика")
            </div>
            <div class="col-sm-10">
                @Html.KendoDropDownListTreeWithButton(m => m.Level7Attribute, (IEnumerable<DropDownTreeItemModel>)ViewData["TreeAttributes"])
            </div>
        </fieldset>
        <fieldset class="attrLevelFieldset">
            <legend>8 уровень</legend>
            <div class="col-sm-2">
                @Html.CustomLabel("Характеристика")
            </div>
            <div class="col-sm-10">
                @Html.KendoDropDownListTreeWithButton(m => m.Level8Attribute, (IEnumerable<DropDownTreeItemModel>)ViewData["TreeAttributes"])
            </div>
        </fieldset>
        <fieldset class="attrLevelFieldset">
            <legend>9 уровень</legend>
            <div class="col-sm-2">
                @Html.CustomLabel("Характеристика")
            </div>
            <div class="col-sm-10">
                @Html.KendoDropDownListTreeWithButton(m => m.Level9Attribute, (IEnumerable<DropDownTreeItemModel>)ViewData["TreeAttributes"])
            </div>
        </fieldset>
        <fieldset class="attrLevelFieldset">
            <legend>10 уровень</legend>
            <div class="col-sm-2">
                @Html.CustomLabel("Характеристика")
            </div>
            <div class="col-sm-10">
                @Html.KendoDropDownListTreeWithButton(m => m.Level10Attribute, (IEnumerable<DropDownTreeItemModel>)ViewData["TreeAttributes"])
            </div>
        </fieldset>
        <div class="form-group">
            <div class="col-sm-3">
                @Html.CustomLabelFor(x => x.DefaultValue)
            </div>
            <div class="col-sm-9">
                @Html.KendoTextBoxFor(x => x.DefaultValue, isReadonly: false)
            </div>
        </div>
        <div class="form-group">
            <div class="col-sm-3">
                @Html.CustomLabelFor(m => m.IdDocument)
            </div>
            <div class="col-sm-9">
                @Html.KendoDropDownListWithAutocompleteFor(m => m.IdDocument, (IEnumerable)ViewData["Documents"])
            </div>
        </div>
        <div class="form-group">
            <div class="col-sm-7">
                @( await Html.PartialAsync("/Views/Shared/PartialTemplateStorage.cshtml", new TemplateStorageViewModel
                    {
                        ControllerName = "GbuObject",
                        ActionName = "GetTemplatesHarmonizationCOD"
                    }))
            </div>
            <div class="col-sm-2 col-sm-offset-3">
                <button style="float: right" id="performHarmonization" class="k-button" type="button">Выполнить</button>
            </div>
        </div>
    </div>
}

@section styles {
    <style>
        fieldset.attrLevelFieldset {
            border: 1px solid #c8c6cc;
            border-radius: 6px;
            margin-bottom: 10px;
            padding-bottom: 10px;
        }

        fieldset.attrLevelFieldset legend {
            font-size: initial;
            font-style: italic;
            margin: 0;
        }

        fieldset.filterFieldset {
            border: 1px solid #656565;
            margin-bottom: 10px;
            padding-bottom: 10px;
            padding-top: 10px;
        }

        #valuesFilter-list {
            display: none !important;
        }

        .filter {
            padding-top: 5px;
        }
    </style>
}
@section scripts {
    <script src="~/js/custom-validation.js"></script>
    <script type="text/javascript">
        function fillForm(data) {
            $('#valuesFilter').getKendoMultiSelect().value([]);
            $('#@(nameof(Model.TaskFilter))').data("kendoMultiSelect").value([]);
            data.forEach(function (val) {
                if (Object.keys(val)[0].includes('Level') || Object.keys(val)[0].includes('IdAttributeResult') ||
                    Object.keys(val)[0].includes('IdAttributeFilter') ) {
                    $('#' + Object.keys(val)[0]).data('kendoDropDownTree').value(val[Object.keys(val)[0]] || '');
                    $('#' + Object.keys(val)[0]).data('kendoDropDownTree').trigger('change');
				}

				if (Object.keys(val)[0].includes('IdCodJob') || Object.keys(val)[0].includes('IdDocument')) {
	                $('#' + Object.keys(val)[0]).data('kendoDropDownList').value(val[Object.keys(val)[0]]);
                }

                if (Object.keys(val)[0].includes('ValuesFilter')) {
                    var widget = $('#valuesFilter').getKendoMultiSelect();
                    var dataSource = widget.dataSource;
                    var newItem = {
                        valuesFilter: val[Object.keys(val)[0]],
                        valuesFilterName: val[Object.keys(val)[0]]
                    };

                    dataSource.add(newItem);
                    var newValue = newItem.valuesFilter;
                    widget.value(widget.value().concat([newValue]));
                }

                if (Object.keys(val)[0] === '@(nameof(Model.SelectAllObject))') {
                    if (!!val[Object.keys(val)[0]]) {
                        $('#@(nameof(Model.SelectAllObject))').prop("checked", true);
                        selectAllObjectChanged(true);
                        return;
                    }
                    $('#@(nameof(Model.SelectAllObject))').prop("checked", false);
                    selectAllObjectChanged(false);
                }

                if (Object.keys(val)[0] === '@(nameof(Model.IsDataActualUsed))') {
                    if (!!val[Object.keys(val)[0]]) {
                        $('#@(nameof(Model.IsDataActualUsed))').prop("checked", true);
                        changeDataActualAvailability(true);
                        return;
                    }
                    $('#@(nameof(Model.IsDataActualUsed))').prop("checked", false);
                    changeDataActualAvailability(false);
                }

                if (Object.keys(val)[0] === '@(nameof(Model.IsTaskFilterUsed))') {
                    if (!!val[Object.keys(val)[0]]) {
                        $('#@(nameof(Model.IsTaskFilterUsed))').prop("checked", true);
                        changeTaskFilterAvailability(true);
                        return;
                    }
                    $('#@(nameof(Model.IsTaskFilterUsed))').prop("checked", false);
                    changeTaskFilterAvailability(false);
                }

                if (Object.keys(val)[0] === '@(nameof(Model.IsValuesFilterUsed))') {
                    if (!!val[Object.keys(val)[0]]) {
                        $('#@(nameof(Model.IsValuesFilterUsed))').prop("checked", true);
                        changeValuesFilterAvailability(true);
                        return;
                    }
                    $('#@(nameof(Model.IsValuesFilterUsed))').prop("checked", false);
                    changeValuesFilterAvailability(false);
                }

                if (Object.keys(val)[0] === '@(nameof(Model.DataActual))') {
                    $('#@(nameof(Model.DataActual))').data('kendoDatePicker').value(kendo.parseDate(val[Object.keys(val)[0]]));
                }

                if (Object.keys(val)[0].includes('@(nameof(Model.TaskFilter))')) {
                    var currentValue = $('#@(nameof(Model.TaskFilter))').data("kendoMultiSelect").value();
                    currentValue.push([val[Object.keys(val)[0]]]);
                    $('#@(nameof(Model.TaskFilter))').data("kendoMultiSelect").value(currentValue);
                }

                if (Object.keys(val)[0] === 'PropertyType') {
                    var id = '#PropertyType_' + val[Object.keys(val)[0]];
                    $(id).prop("checked", true);
                }

                if (Object.keys(val)[0].includes('DefaultValue')) {
                    $('#' + Object.keys(val)[0]).val(val[Object.keys(val)[0]]);
                }
            });
            var isSelectAllObjectsChecked =
                $('#SelectAllObject').prop('checked');
            selectAllObjectChanged(isSelectAllObjectsChecked);
        }

    function changeDataActualAvailability(isDataActualUsed) {
        if (isDataActualUsed) {
            $('#@(nameof(Model.DataActual))').data('kendoDatePicker').enable(true);
        } else {
            $('#@(nameof(Model.DataActual))').data('kendoDatePicker').value(null);
            $('#@(nameof(Model.DataActual))').data('kendoDatePicker').enable(false);
        }
    }

    function changeValuesFilterAvailability(isValuesFilterUsed) {
        if (isValuesFilterUsed) {
            $('#@(nameof(Model.IdAttributeFilter))').data('kendoDropDownTree').enable(true);
            $('a.clear-button-@(nameof(Model.IdAttributeFilter))').removeClass('k-state-disabled');
            $('#valuesFilter').data("kendoMultiSelect").enable(true);
        } else {
            $('#@(nameof(Model.IdAttributeFilter))').data('kendoDropDownTree').value('');
            $('#@(nameof(Model.IdAttributeFilter))').data('kendoDropDownTree').enable(false);
            $('a.clear-button-@(nameof(Model.IdAttributeFilter))').addClass('k-state-disabled');

            $('#valuesFilter').data("kendoMultiSelect").value([]);
            $('#valuesFilter').data("kendoMultiSelect").enable(false);
        }
    }

    function changeTaskFilterAvailability(isTaskFilterUsed) {
        if (isTaskFilterUsed) {
            $('#@(nameof(Model.TaskFilter))').data("kendoMultiSelect").enable(true);
        } else {
            $('#@(nameof(Model.TaskFilter))').data("kendoMultiSelect").value([]);
            $('#@(nameof(Model.TaskFilter))').data("kendoMultiSelect").enable(false);
        }
    }

    function selectAllObjectChanged(checked) {
        if (checked) {
            $('#IsValuesFilterUsed').prop('checked', false);
            $('#IsValuesFilterUsed').attr("disabled", true);
            $('#IsDataActualUsed').prop('checked', false);
            $('#IsDataActualUsed').attr("disabled", true);
            $('#IsTaskFilterUsed').prop('checked', false);
            $('#IsTaskFilterUsed').attr("disabled", true);

            changeDataActualAvailability(false);
            changeValuesFilterAvailability(false);
            changeTaskFilterAvailability(false);
        } else {
            $('#IsValuesFilterUsed').attr("disabled", false);
            $('#IsDataActualUsed').attr("disabled", false);
            $('#IsTaskFilterUsed').attr("disabled", false);
        }
    }

        $(document).ready(function () {
            $('#SelectAllObject').bind("change", function () {
                selectAllObjectChanged(this.checked);
            });
            $('#IsValuesFilterUsed').bind("change", function () {
                changeValuesFilterAvailability(this.checked);
            });
            $('#IsDataActualUsed').bind("change", function () {
                changeDataActualAvailability(this.checked);
            });
            $('#IsTaskFilterUsed').bind("change", function () {
                changeTaskFilterAvailability(this.checked);
            });
            templateStorage.init(@((int)DataFormStorege.HarmonizationCOD), "SaveTemplateHarmonizationCODObject", "GbuObject", "GetTemplatesOneGroup", "GbuObject", fillForm);

            function onDataBound(e) {
                $('.k-multiselect .k-input').unbind('keyup');
                $('.k-multiselect .k-input').on('keyup', onClickEnter);
            }
            function onClickEnter(e) {
                if (e.keyCode === 13) {
                    var widget = $('#valuesFilter').getKendoMultiSelect();
                    var dataSource = widget.dataSource;
                    var input = $('.k-multiselect .k-input');
                    var value = input.val().trim();
                    if (!value || value.length === 0) {
                        return;
                    }
                    var newItem = {
                        valuesFilter: value,
                        valuesFilterName: value
                    };

                    dataSource.add(newItem);
                    var newValue = newItem.valuesFilter;
                    widget.value(widget.value().concat([newValue]));
                }
            }
            $("#valuesFilter").kendoMultiSelect({
                dataTextField: "valuesFilterName",
                dataValueField: "valuesFilter",
                dataSource: {
                    data: []
                },
                dataBound: onDataBound,
                enable: @(Model.SelectAllObject ? "false" : "true")
            });

            $('#performHarmonization').on('click',
                function() {
                    kendo.ui.progress($('body'), true);
                    var form = $('form');
                    var formObject = Common.Functions.FormToObject(form);
                    formObject.ValuesFilter = $("#valuesFilter").data("kendoMultiSelect").value();
                    formObject.TaskFilter = $('#@(nameof(Model.TaskFilter))').data("kendoMultiSelect").value();
                    $.post(form.attr('action'), formObject).done(function(response) {
                        kendo.ui.progress($('body'), false);
                        if (response.Errors) {
                            var errors = $.map(distinctErrors(response.Errors),
                                function(el) {
                                    return el.Message;
                                });
                            Common.ShowError(errors);
                            return;
                        }
                        if (response.Success) {
                            if (response.idResultAttribute && updateResultControl) {
                                updateResultControl(response.idResultAttribute);
                            }
                            Common.ShowMessage(response.Success);
                        }
                    }).fail(function (response, textStatus, errorThrown) {
                        kendo.ui.progress($('body'), false);
                        Common.ShowError(response.responseText);
                    });
                });
        });
    </script>
}