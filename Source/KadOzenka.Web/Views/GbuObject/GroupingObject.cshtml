@using System.Collections
@using KadOzenka.Dal.Enum
@using KadOzenka.Web.Controllers
@using KadOzenka.Web.Helpers
@using KadOzenka.Web.Models.GbuObject
@using ObjectModel.Directory.Common
@model KadOzenka.Web.Models.GbuObject.GroupingObject;

<link rel="stylesheet" href="~/css/toolbars.css"/>
@if (ViewContext.HttpContext.Request.Query["useMasterPage"] == "true")
{
    <link rel="stylesheet" href="~/css/toolbars-top-menu.css"/>
}
<style>
    fieldset {
        border: 1px solid #c8c6cc;
        border-radius: 6px;
        margin-bottom: 10px;
    }

    fieldset legend {
        font-size: initial;
        font-style: italic;
        margin: 0;
    }

    .error {
        border: 1px solid red;
        border-color: red !important;
    }

    #valuesFilter-list {
        display: none !important;
    }
    .wrap-level {
        padding-top: 5px;
    }
    .row {
        padding: inherit;
    }

    .k-multiselect-wrap
    {
        overflow: auto;
        max-height: 100px;
    }
    .codJobParam{
        display: none;
    }
</style>

@using (Html.BeginForm("GroupingObject", "GbuObject", FormMethod.Post))
{
    <div class="top-toolbar k-toolbar k-widget k-toolbar-resizable">
        <div class="col-sm-7">
            @(await Html.PartialAsync("/Views/Shared/PartialTemplateStorage.cshtml", new TemplateStorageViewModel
            {
                GetTemplatesActionName = nameof(TemplateController.GetTemplates),
                Parameters = "formStorageType=" + (int) DataFormStorege.Normalisation,
                SaveTemplateActionName = nameof(TemplateController.SaveTemplateGroupingObject)
            }))
        </div>

        <div class="col-sm-1 col-sm-offset-1">
            <button style="float: right" id="execute" class="k-button" type="button">Выполнить</button>
        </div>
        <div class="col-sm-3">
            <a class="k-button k-state-disabled" id="goToProcessBtn" href="" target="_blank" style="float: right">
                <span>Перейти к процессу</span>
            </a>
        </div>
    </div>
    <div class="bottom-main-content">
    <div class="form-horizontal col-sm-12">
    @Html.RenderHelpButton()
    <div class="form-group">
        <div class="col-sm-2">
            @Html.CustomLabelFor(m => m.IdCodJob)
        </div>
        <div class="col-sm-10">
            @Html.KendoDropDownListWithAutocompleteFor(m => m.IdCodJob, (IEnumerable) ViewData["CodJob"])
        </div>
    </div>
    <fieldset class="wrap-level">
        <div class="form-group">
            <div class="col-sm-12">
                <label>
                    @(Html.Kendo().CheckBoxFor(m => m.SelectAllObject))
                    Все объекты
                </label>
            </div>
        </div>
        <div class="form-group">
            <div class="col-sm-2">
                <label>
                    @(Html.Kendo().CheckBoxFor(m => m.IsDataActualUsed).Enable(!Model.SelectAllObject))
                    Дата актуализации
                </label>
            </div>
            <div class="col-sm-4">
                @(Html.Kendo().DatePickerFor(m => m.DataActual).Enable(Model.IsDataActualUsed))
            </div>
        </div>
        <div class="form-group">
            <div class="col-sm-2">
                <label>
                    @(Html.Kendo().CheckBoxFor(m => m.IsTaskFilterUsed).Enable(!Model.SelectAllObject))
                    Задания на оценку
                </label>
            </div>
            <div class="col-sm-10">
                @(Html.Kendo().MultiSelectFor(m => m.TaskFilter)
                    .DataTextField("Text")
                    .DataValueField("Value")
                    .Filter("contains")
                    .Enable(Model.IsTaskFilterUsed)
                    .DataSource(source =>
                    {
                        source.Read(read => { read.Action("GetTasksData", "GbuObject"); })
                            .ServerFiltering(false);
                    }))
            </div>
        </div>
        <div class="form-group">
            <div class="col-sm-2">
                @Html.CustomLabelFor(x => x.ObjectChangeStatus)
            </div>
            <div class="col-sm-10">
                @(Html.Kendo().MultiSelectFor(m => m.ObjectChangeStatus)
                    .BindTo(KadOzenka.Web.Helpers.EnumExtensions.GetSelectList(typeof(ObjectChangeStatus)))
                    .Filter(FilterType.Contains))
            </div>
        </div>
    </fieldset>
<fieldset id="level1cod" class="wrap-level codJobParam">
    <legend></legend>
    <div class="form-group">
        <div class="col-sm-2">
            <label>
                @(Html.Kendo().CheckBoxFor(m => m.Level1.SkipDefis))
                Игнорировать "-"
            </label>
        </div>
        <div class="col-sm-2">
            @Html.CustomLabel("Характеристика")
        </div>
        <div class="col-sm-8">
            @Html.KendoDropDownListTreeWithButton(m => m.Level1.IdFactor, (IEnumerable<DropDownTreeItemModel>)ViewBag.TreeAttributes )
        </div>
        @Html.HiddenFor(m=>m.Level1.CodValueId)
        @Html.HiddenFor(m=>m.Level1.CodValueName)
    </div>
</fieldset>
<fieldset id="level2cod" class="wrap-level codJobParam">
    <legend></legend>
    <div class="form-group">
        <div class="col-sm-2">
            <label>
                @(Html.Kendo().CheckBoxFor(m => m.Level2.SkipDefis))
                Игнорировать "-"
            </label>
        </div>
        <div class="col-sm-2">
            @Html.CustomLabel("Характеристика")
        </div>
        <div class="col-sm-8">
            @Html.KendoDropDownListTreeWithButton(m => m.Level2.IdFactor, (IEnumerable<DropDownTreeItemModel>)ViewBag.TreeAttributes )
        </div>
        @Html.HiddenFor(m=>m.Level2.CodValueId)
        @Html.HiddenFor(m=>m.Level2.CodValueName)
    </div>
</fieldset>
<fieldset id="level3cod" class="wrap-level codJobParam">
    <legend></legend>
    <div class="form-group">
        <div class="col-sm-2">
            <label>
                @(Html.Kendo().CheckBoxFor(m => m.Level3.SkipDefis))
                Игнорировать "-"
            </label>
        </div>
        <div class="col-sm-2">
            @Html.CustomLabel("Характеристика")
        </div>
        <div class="col-sm-8">
            @Html.KendoDropDownListTreeWithButton(m => m.Level3.IdFactor, (IEnumerable<DropDownTreeItemModel>)ViewBag.TreeAttributes )
        </div>
        @Html.HiddenFor(m=>m.Level3.CodValueId)
        @Html.HiddenFor(m=>m.Level3.CodValueName)
    </div>
</fieldset>
<fieldset id="level4cod" class="wrap-level codJobParam">
    <legend></legend>
    <div class="form-group">
        <div class="col-sm-2">
            <label>
                @(Html.Kendo().CheckBoxFor(m => m.Level4.SkipDefis))
                Игнорировать "-"
            </label>
        </div>
        <div class="col-sm-2">
            @Html.CustomLabel("Характеристика")
        </div>
        <div class="col-sm-8">
            @Html.KendoDropDownListTreeWithButton(m => m.Level4.IdFactor, (IEnumerable<DropDownTreeItemModel>)ViewBag.TreeAttributes )
        </div>
        @Html.HiddenFor(m=>m.Level4.CodValueId)
        @Html.HiddenFor(m=>m.Level4.CodValueName)
    </div>
</fieldset>
<fieldset id="level5cod" class="wrap-level codJobParam">
    <legend></legend>
    <div class="form-group">
        <div class="col-sm-2">
            <label>
                @(Html.Kendo().CheckBoxFor(m => m.Level5.SkipDefis))
                Игнорировать "-"
            </label>
        </div>
        <div class="col-sm-2">
            @Html.CustomLabel("Характеристика")
        </div>
        <div class="col-sm-8">
            @Html.KendoDropDownListTreeWithButton(m => m.Level5.IdFactor, (IEnumerable<DropDownTreeItemModel>)ViewBag.TreeAttributes )
        </div>
        @Html.HiddenFor(m=>m.Level5.CodValueId)
        @Html.HiddenFor(m=>m.Level5.CodValueName)
    </div>
</fieldset>
<fieldset id="level6cod" class="wrap-level codJobParam">
    <legend></legend>
    <div class="form-group">
        <div class="col-sm-2">
            <label>
                @(Html.Kendo().CheckBoxFor(m => m.Level6.SkipDefis))
                Игнорировать "-"
            </label>
        </div>
        <div class="col-sm-2">
            @Html.CustomLabel("Характеристика")
        </div>
        <div class="col-sm-8">
            @Html.KendoDropDownListTreeWithButton(m => m.Level6.IdFactor, (IEnumerable<DropDownTreeItemModel>)ViewBag.TreeAttributes )
        </div>
        @Html.HiddenFor(m=>m.Level6.CodValueId)
        @Html.HiddenFor(m=>m.Level6.CodValueName)
    </div>
</fieldset>
<fieldset id="level7cod" class="wrap-level codJobParam">
    <legend></legend>
    <div class="form-group">
        <div class="col-sm-2">
            <label>
                @(Html.Kendo().CheckBoxFor(m => m.Level7.SkipDefis))
                Игнорировать "-"
            </label>
        </div>
        <div class="col-sm-2">
            @Html.CustomLabel("Характеристика")
        </div>
        <div class="col-sm-8">
            @Html.KendoDropDownListTreeWithButton(m => m.Level7.IdFactor, (IEnumerable<DropDownTreeItemModel>)ViewBag.TreeAttributes )
        </div>
        @Html.HiddenFor(m=>m.Level7.CodValueId)
        @Html.HiddenFor(m=>m.Level7.CodValueName)
    </div>
</fieldset>
<fieldset id="level8cod" class="wrap-level codJobParam">
    <legend></legend>
    <div class="form-group">
        <div class="col-sm-2">
            <label>
                @(Html.Kendo().CheckBoxFor(m => m.Level8.SkipDefis))
                Игнорировать "-"
            </label>
        </div>
        <div class="col-sm-2">
            @Html.CustomLabel("Характеристика")
        </div>
        <div class="col-sm-8">
            @Html.KendoDropDownListTreeWithButton(m => m.Level8.IdFactor, (IEnumerable<DropDownTreeItemModel>)ViewBag.TreeAttributes )
        </div>
        @Html.HiddenFor(m=>m.Level8.CodValueId)
        @Html.HiddenFor(m=>m.Level8.CodValueName)
    </div>
</fieldset>
<fieldset id="level9cod" class="wrap-level codJobParam">
    <legend></legend>
    <div class="form-group">
        <div class="col-sm-2">
            <label>
                @(Html.Kendo().CheckBoxFor(m => m.Level9.SkipDefis))
                Игнорировать "-"
            </label>
        </div>
        <div class="col-sm-2">
            @Html.CustomLabel("Характеристика")
        </div>
        <div class="col-sm-8">
            @Html.KendoDropDownListTreeWithButton(m => m.Level9.IdFactor, (IEnumerable<DropDownTreeItemModel>)ViewBag.TreeAttributes )
        </div>
        @Html.HiddenFor(m=>m.Level9.CodValueId)
        @Html.HiddenFor(m=>m.Level9.CodValueName)
    </div>
</fieldset>
<div class="form-group"></div>
@(await Html.PartialAsync("Partials/PartialCharacteristic", new PartialCharacteristicViewModel
{
    IdAttributeResult = Model.IdAttributeResult,
    IsNewAttribute = Model.IsNewAttribute,
    NameNewAttribute = Model.NameNewAttribute,
    RegistryId = Model.RegistryId,
    TypeNewAttribute = Model.TypeNewAttribute,
    PossibleAttributes = (List<DropDownTreeItemModel>)ViewBag.StringTreeAttributes
}))
    </div>
    </div>
}

<script src="~/js/toolbars.js"></script>
<script src="~/js/custom-validation.js"></script>
<script type="text/javascript">

    function fillForm(data) {
        $('#@(nameof(Model.TaskFilter))').data("kendoMultiSelect").value([]);
        $('#@(nameof(Model.ObjectChangeStatus))').data("kendoMultiSelect").value([]);
        data.forEach(function (val) {
            if (Object.keys(val)[0].includes('IdFactor') || Object.keys(val)[0].includes('IdAttributeResult')
                || Object.keys(val)[0].includes('IdAttributeSource') || Object.keys(val)[0].includes('IdAttributeDocument')) {
                $('#' + Object.keys(val)[0]).data('kendoDropDownTree').value(val[Object.keys(val)[0]] || '');
                $('#' + Object.keys(val)[0]).data('kendoDropDownTree').trigger('change');
                $('#' + Object.keys(val)[0]).data('kendoDropDownTree').filterInput.val('');
                $('#' + Object.keys(val)[0]).data('kendoDropDownTree').trigger('filtering', [true]);
            }

            if (Object.keys(val)[0].includes('IdCodJob')) {
                $('#' + Object.keys(val)[0]).data('kendoDropDownList').value(val[Object.keys(val)[0]]);
            }

            if (Object.keys(val)[0] === '@(nameof(Model.SelectAllObject))') {
                if (!!val[Object.keys(val)[0]]) {
                    $('#@(nameof(Model.SelectAllObject))').prop("checked", true);
                    selectAllObjectChanged(true);
                    return;
                }
                $('#@(nameof(Model.SelectAllObject))').prop("checked", false);
                selectAllObjectChanged(false);
            }

            if (Object.keys(val)[0] === '@(nameof(Model.IsDataActualUsed))') {
                if (!!val[Object.keys(val)[0]]) {
                    $('#@(nameof(Model.IsDataActualUsed))').prop("checked", true);
                    changeDataActualAvailability(true);
                    return;
                }
                $('#@(nameof(Model.IsDataActualUsed))').prop("checked", false);
                changeDataActualAvailability(false);
            }

            if (Object.keys(val)[0] === '@(nameof(Model.IsTaskFilterUsed))') {
                if (!!val[Object.keys(val)[0]]) {
                    $('#@(nameof(Model.IsTaskFilterUsed))').prop("checked", true);
                    changeTaskFilterAvailability(true);
                    return;
                }
                $('#@(nameof(Model.IsTaskFilterUsed))').prop("checked", false);
                changeTaskFilterAvailability(false);
            }

            if (Object.keys(val)[0] === '@(nameof(Model.DataActual))') {
                $('#@(nameof(Model.DataActual))').data('kendoDatePicker').value(kendo.parseDate(val[Object.keys(val)[0]]));
            }

            if (Object.keys(val)[0].includes('@(nameof(Model.TaskFilter))')) {
                var currentValue = $('#@(nameof(Model.TaskFilter))').data("kendoMultiSelect").value();
                currentValue.push([val[Object.keys(val)[0]]]);
                $('#@(nameof(Model.TaskFilter))').data("kendoMultiSelect").value(currentValue);
            }

            if (Object.keys(val)[0].includes('@(nameof(Model.ObjectChangeStatus))')) {
                var element = $('#@(nameof(Model.ObjectChangeStatus))').data("kendoMultiSelect");
                var currentUnitChangeStatusValue = element.value();
                currentUnitChangeStatusValue.push([val[Object.keys(val)[0]]]);
                element.value(currentUnitChangeStatusValue);
            }

            if (Object.keys(val)[0].includes('UseDictionary') || Object.keys(val)[0].includes('SkipDefis')) {
                $('#' + Object.keys(val)[0]).prop("checked", val[Object.keys(val)[0]]);
            }
        });
        var isSelectAllObjectsChecked =
            $('#SelectAllObject').prop('checked');
        selectAllObjectChanged(isSelectAllObjectsChecked);
        getCodJobParams(false);
        updateStates();
    }

    function changeDataActualAvailability(isDataActualUsed) {
        if (isDataActualUsed) {
            $('#@(nameof(Model.DataActual))').data('kendoDatePicker').enable(true);
        } else {
            $('#@(nameof(Model.DataActual))').data('kendoDatePicker').value(null);
            $('#@(nameof(Model.DataActual))').data('kendoDatePicker').enable(false);
        }
    }

    function changeTaskFilterAvailability(isTaskFilterUsed) {
        if (isTaskFilterUsed) {
            $('#@(nameof(Model.TaskFilter))').data("kendoMultiSelect").enable(true);
        } else {
            disableKendoMultiSelect("TaskFilter");
        }
    }
    function disableKendoMultiSelect(name) {
        $('#' + name).data("kendoMultiSelect").value([]);
        $('#' + name).data("kendoMultiSelect").enable(false);
    }

    function selectAllObjectChanged(checked) {
        if (checked) {
            $('#IsDataActualUsed').prop('checked', false);
            $('#IsDataActualUsed').attr("disabled", true);
            $('#IsTaskFilterUsed').prop('checked', false);
            $('#IsTaskFilterUsed').attr("disabled", true);

            changeDataActualAvailability(false);
            changeTaskFilterAvailability(false);
        } else {
            $('#IsDataActualUsed').attr("disabled", false);
            $('#IsTaskFilterUsed').attr("disabled", false);
        }
    }

    function getDataSource() {
        return $.find('input[class^=Level]').concat($.find('input[class^=Attribute]')).map(d => $(d).data('kendoDropDownTree'));
    }

    function getSelectedValues() {
        return getDataSource().map(d => d.value());
    }

    function getAllUidsToDisable(arrValues) {
        var allNodes = getDataSource().map((d) => flattenDataSource(d)).flat();
        var filter = allNodes.filter((e) => { return arrValues.includes(e.value); });
        return filter.map((i) => { return i.uid; });
    }

    function flattenDataSource(d) {
        return d.dataSource.data().map((v) => { return v.items; }).map((l1) => { return l1.map((l2) => { return l2; }); }).flat();
    }

    function blockAlreadySelectedNodes(arr) {
        var uidsToBlock = getAllUidsToDisable(arr);
        var nodes = getDataSource().map((d) => uidsToBlock.map((s) => d.treeview.findByUid(s))).flat();
        nodes.forEach(n => n.addClass('k-state-disabled'));
    }

    function clearTreeStates() {
        getDataSource().forEach((d) => d.tree.find('.k-item').removeClass('k-state-disabled'));
    }

    function updateSelected(e) {
        var dataItem = e.sender.dataItem(e.node);
        var itemValue = Number(dataItem.value);
        if (isNaN(itemValue) || itemValue <= 0 ) {
            e.preventDefault();
            return;
        }

        clearTreeStates();

        var changedEntries = flattenDataSource($(e.node.closest('.k-treeview')).data().kendoTreeView).filter(v=>v.selected).map(v=>v.value);
        var arr = getSelectedValues();
        if (arr.includes(dataItem.value)) {
            e.preventDefault();
        }
        var filtered = arr.filter(v=>!changedEntries.includes(v));
        filtered.push(dataItem.value);
        blockAlreadySelectedNodes(filtered);
    }

    function updateStates() {
        clearTreeStates();
        var arr = getSelectedValues();
        blockAlreadySelectedNodes(arr);
    }

    function addSelectionHandlersForDropDowns() {
        getDataSource().forEach(function (d) {
                d.treeview.unbind('select', e => updateSelected(e));
                d.treeview.bind('select', e => updateSelected(e));
            }
        );

        updateStates();

        var clearButtons = $.find('[class^=clear-button-Level]').concat($.find('[class^=clear-button-Attribute]'));

        clearButtons.forEach(b => b.onclick = function() { updateStates(); });
        getDataSource().forEach(d => d.bind("onFiltered", function () { updateStates(); }));
    }

    function resetParams()
    {
        $('.codJobParam').hide();
        for (var i=1; i <= 9; i++) {
            var selector = $('#level'+i+'cod');
            selector.find('span>input').val(null);
            $('#Level'+i+'_CodValueId').val(null);
            $('#Level'+i+'_CodValueName').val(null);
            clearField('Level'+i+'_IdFactor');
        }
    }

    function getCodJobParams(reset) {
        kendo.ui.progress($('body'), true);
        if (reset) resetParams();
        let codJobId = $('#IdCodJob').val();

        $.get({
            url: '/GbuObject/GetCodJobParam',
            data: { codJobId },
            success: function (data){
                kendo.ui.progress($('body'), false);
                for (var i=1; i <= data.length; i++) {
                    var selector = $('#level'+i+'cod');
                    selector.find('legend').text(data[i-1].CodValueName);
                    $('#Level'+i+'_CodValueId').val(data[i-1].CodValueId);
                    $('#Level'+i+'_CodValueName').val(data[i-1].CodValueName);
                    selector.show();
                }
            }
        });
    }

    $(document).ready(function () {
        addSelectionHandlersForDropDowns();
        $('#IdCodJob').on('change',() => getCodJobParams(true));

        $('#SelectAllObject').bind("change",
            function() {
                selectAllObjectChanged(this.checked);
            });
        $('#IsDataActualUsed').bind("change",
            function() {
                changeDataActualAvailability(this.checked);
            });
        $('#IsTaskFilterUsed').bind("change",
            function() {
                changeTaskFilterAvailability(this.checked);
            });

        templateStorage.init(@((int) DataFormStorege.Normalisation), fillForm);


        $('#execute').on('click',
            function () {
                var form = $('form');
                var formObject = Common.Functions.FormToObject(form);
                kendo.ui.progress($('body'), true);

                $.post(form.attr('action'), formObject).done(function(response) {
                        if (response.Errors) {
                            var errors = getErrors(response.Errors);
                            Common.ShowError(errors);
                            return;
                        }
                        if (response.success) {
                            if (response.idResultAttribute && updateResultControl) {
                                updateResultControl(response.idResultAttribute);
                            }
                            Common.ShowMessage(
                                "Процедура нормализации данных успешно добавлена в очередь, по результатам операции будет отправлено сообщение");

                            if (response.QueueId) {
                                var hrefForJournal = "/RegistersView/CoreLongProcessQueue?Transition=1&97500100=" + response.QueueId;
                                var goToProcessBtn = $("#goToProcessBtn");
                                goToProcessBtn.removeClass('k-state-disabled');
                                goToProcessBtn.attr('href', hrefForJournal);
                            }
                        }
                    })
                    .fail(function(response, textStatus, errorThrown) {
                        Common.ShowError(response.responseText);
                    })
                    .always(function() {
                        kendo.ui.progress($('body'), false);
                    });
            });
    });
</script>