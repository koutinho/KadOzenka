@using System.Collections
@using DevExpress.DataProcessing
@using FastReport.Fonts
@using KadOzenka.Web.Helpers
@using KadOzenka.Web.Models.GbuObject
@using ObjectModel.Directory.Common
@model KadOzenka.Web.Models.GbuObject.GroupingObject;

<style>
	fieldset {
		border: 1px solid #c8c6cc;
		border-radius: 6px;
		margin-bottom: 10px;
	}

	fieldset legend {
		font-size: initial;
		font-style: italic;
		margin: 0;
	}

	.error {
		border: 1px solid red;
		border-color: red !important;
	}

	#valuesFilter-list {
		display: none !important;
	}
	.wrap-level {
		padding-top: 5px;
	}
	.row {
		padding: inherit;
	}

	.k-multiselect-wrap
	{
		overflow: auto;
		max-height: 100px;
	}
</style>

@using (Html.BeginForm("GroupingObject", "GbuObject", FormMethod.Post))
{
<div class="form-horizontal col-sm-12">
	<div class="form-group">
		<div class="col-sm-2">
			@Html.CustomLabelFor(m => m.IdCodJob)
		</div>
		<div class="col-sm-10">
			@Html.KendoDropDownListWithAutocompleteFor(m => m.IdCodJob, (IEnumerable) ViewData["CodJob"] )
		</div>
	</div>
	<fieldset class="wrap-level">
		<div class="form-group">
		    <div class="col-sm-12">
		        <label>
		            @(Html.Kendo().CheckBoxFor(m => m.SelectAllObject))
		            Все объекты
		        </label>
		    </div>
		</div>
		<div class="form-group">
		    <div class="col-sm-2">
		        <label>
		            @(Html.Kendo().CheckBoxFor(m => m.IsValuesFilterUsed).Enable(!Model.SelectAllObject))
		            По значению
		        </label>
		    </div>
		    <div class="col-sm-2">
		        @Html.CustomLabelFor(m => m.IdAttributeFilter)
		    </div>
		    <div class="col-sm-3">
		        @Html.KendoDropDownListTreeWithButton(m => m.IdAttributeFilter, (IEnumerable<DropDownTreeItemModel>)ViewData["TreeAttributes"], isReadonly: true)
		    </div>
		    <div class="col-sm-2">
		        @Html.CustomLabelFor(m => m.ValuesFilter)
		    </div>
		    <div class="col-sm-3">
		        <select id="valuesFilter" style="width: 100%;"></select>
		    </div>
		</div>
	    <div class="form-group">
	        <div class="col-sm-2">
                <label>
                    @(Html.Kendo().CheckBoxFor(m => m.IsDataActualUsed).Enable(!Model.SelectAllObject))
                    Дата актуализации
                </label>
            </div>
	        <div class="col-sm-4">
	            @(Html.Kendo().DatePickerFor(m => m.DataActual).Enable(Model.IsDataActualUsed))
	        </div>
	    </div>
	    <div class="form-group">
	        <div class="col-sm-2">
	            <label>
	                @(Html.Kendo().CheckBoxFor(m => m.IsTaskFilterUsed).Enable(!Model.SelectAllObject))
	                Задания на оценку
	            </label>
	        </div>
	        <div class="col-sm-10">
	            @(Html.Kendo().MultiSelectFor(m => m.TaskFilter)
	                  .DataTextField("Text")
	                  .DataValueField("Value")
	                  .Filter("contains")
	                  .Enable(Model.IsTaskFilterUsed)
	                  .DataSource(source =>
	                  {
	                      source.Read(read =>
	                      {
	                          read.Action("GetTasksData", "GbuObject");
	                      })
	                          .ServerFiltering(false);
	                  }))
	        </div>
	    </div>
	</fieldset>
<fieldset class="wrap-level">
	<legend>1 Уровень</legend>
	<div class="form-group">
		<div class="col-sm-2">
			<label>
				@(Html.Kendo().CheckBoxFor(m => m.Level1.UseDictionary))
				Справочник
			</label>
		</div>
		<div class="col-sm-2">
			<label>
				@(Html.Kendo().CheckBoxFor(m => m.Level1.SkipDefis))
				Игнорировать "-"
			</label>
		</div>
		<div class="col-sm-2">
			@Html.CustomLabel("Характеристика")
		</div>
		<div class="col-sm-6">
			@Html.KendoDropDownListTreeWithButton(m => m.Level1.IdFactor, (IEnumerable<DropDownTreeItemModel>)ViewData["TreeAttributes"] )
		</div>
	</div>
</fieldset>
<fieldset class="wrap-level">
	<legend>2 Уровень</legend>
	<div class="form-group">
		<div class="col-sm-2">
			<label>
				@(Html.Kendo().CheckBoxFor(m => m.Level2.UseDictionary))
				Справочник
			</label>
		</div>
		<div class="col-sm-2">
			<label>
				@(Html.Kendo().CheckBoxFor(m => m.Level2.SkipDefis))
				Игнорировать "-"
			</label>
		</div>
		<div class="col-sm-2">
			@Html.CustomLabel("Характеристика")
		</div>
		<div class="col-sm-6">
			@Html.KendoDropDownListTreeWithButton(m => m.Level2.IdFactor, (IEnumerable<DropDownTreeItemModel>)ViewData["TreeAttributes"] )
		</div>
	</div>
</fieldset>
<fieldset class="wrap-level">
	<legend>3 Уровень</legend>
	<div class="form-group">
		<div class="col-sm-2">
			<label>
				@(Html.Kendo().CheckBoxFor(m => m.Level3.UseDictionary))
				Справочник
			</label>
		</div>
		<div class="col-sm-2">
			<label>
				@(Html.Kendo().CheckBoxFor(m => m.Level3.SkipDefis))
				Игнорировать "-"
			</label>
		</div>
		<div class="col-sm-2">
			@Html.CustomLabel("Характеристика")
		</div>
		<div class="col-sm-6">
			@Html.KendoDropDownListTreeWithButton(m => m.Level3.IdFactor, (IEnumerable<DropDownTreeItemModel>)ViewData["TreeAttributes"] )
		</div>
	</div>
</fieldset>
<fieldset class="wrap-level">
	<legend>4 Уровень</legend>
	<div class="form-group">
		<div class="col-sm-2">
			<label>
				@(Html.Kendo().CheckBoxFor(m => m.Level4.UseDictionary))
				Справочник
			</label>
		</div>
		<div class="col-sm-2">
			<label>
				@(Html.Kendo().CheckBoxFor(m => m.Level4.SkipDefis))
				Игнорировать "-"
			</label>
		</div>
		<div class="col-sm-2">
			@Html.CustomLabel("Характеристика")
		</div>
		<div class="col-sm-6">
			@Html.KendoDropDownListTreeWithButton(m => m.Level4.IdFactor, (IEnumerable<DropDownTreeItemModel>)ViewData["TreeAttributes"] )
		</div>
	</div>
</fieldset>
<fieldset class="wrap-level">
	<legend>5 Уровень</legend>
	<div class="form-group">
		<div class="col-sm-2">
			<label>
				@(Html.Kendo().CheckBoxFor(m => m.Level5.UseDictionary))
				Справочник
			</label>
		</div>
		<div class="col-sm-2">
			<label>
				@(Html.Kendo().CheckBoxFor(m => m.Level5.SkipDefis))
				Игнорировать "-"
			</label>
		</div>
		<div class="col-sm-2">
			@Html.CustomLabel("Характеристика")
		</div>
		<div class="col-sm-6">
			@Html.KendoDropDownListTreeWithButton(m => m.Level5.IdFactor, (IEnumerable<DropDownTreeItemModel>)ViewData["TreeAttributes"] )
		</div>
	</div>
</fieldset>
<fieldset class="wrap-level">
	<legend>6 Уровень</legend>
	<div class="form-group">
		<div class="col-sm-2">
			<label>
				@(Html.Kendo().CheckBoxFor(m => m.Level6.UseDictionary))
				Справочник
			</label>
		</div>
		<div class="col-sm-2">
			<label>
				@(Html.Kendo().CheckBoxFor(m => m.Level6.SkipDefis))
				Игнорировать "-"
			</label>
		</div>
		<div class="col-sm-2">
			@Html.CustomLabel("Характеристика")
		</div>
		<div class="col-sm-6">
			@Html.KendoDropDownListTreeWithButton(m => m.Level6.IdFactor, (IEnumerable<DropDownTreeItemModel>)ViewData["TreeAttributes"] )
		</div>
	</div>
</fieldset>
<fieldset class="wrap-level">
	<legend>7 Уровень</legend>
	<div class="form-group">
		<div class="col-sm-2">
			<label>
				@(Html.Kendo().CheckBoxFor(m => m.Level7.UseDictionary))
				Справочник
			</label>
		</div>
		<div class="col-sm-2">, 
			<label>
				@(Html.Kendo().CheckBoxFor(m => m.Level7.SkipDefis))
				Игнорировать "-"
			</label>
		</div>
		<div class="col-sm-2">
			@Html.CustomLabel("Характеристика")
		</div>
		<div class="col-sm-6">
			@Html.KendoDropDownListTreeWithButton(m => m.Level7.IdFactor, (IEnumerable<DropDownTreeItemModel>)ViewData["TreeAttributes"] )
		</div>
	</div>
</fieldset>
<fieldset class="wrap-level">
	<legend>8 Уровень</legend>
	<div class="form-group">
		<div class="col-sm-2">
			<label>
				@(Html.Kendo().CheckBoxFor(m => m.Level8.UseDictionary))
				Справочник
			</label>
		</div>
		<div class="col-sm-2">
			<label>
				@(Html.Kendo().CheckBoxFor(m => m.Level8.SkipDefis))
				Игнорировать "-"
			</label>
		</div>
		<div class="col-sm-2">
			@Html.CustomLabel("Характеристика")
		</div>
		<div class="col-sm-6">
			@Html.KendoDropDownListTreeWithButton(m => m.Level8.IdFactor, (IEnumerable<DropDownTreeItemModel>)ViewData["TreeAttributes"] )
		</div>
	</div>
</fieldset>
<fieldset class="wrap-level">
	<legend>9 Уровень</legend>
	<div class="form-group">
		<div class="col-sm-2">
			<label>
				@(Html.Kendo().CheckBoxFor(m => m.Level9.UseDictionary))
				Справочник
			</label>
		</div>
		<div class="col-sm-2">
			<label>
				@(Html.Kendo().CheckBoxFor(m => m.Level9.SkipDefis))
				Игнорировать "-"
			</label>
		</div>
		<div class="col-sm-2">
			@Html.CustomLabel("Характеристика")
		</div>
		<div class="col-sm-6">
			@Html.KendoDropDownListTreeWithButton(m => m.Level9.IdFactor, (IEnumerable<DropDownTreeItemModel>)ViewData["TreeAttributes"] )
		</div>
	</div>
</fieldset>
<fieldset class="wrap-level">
	<legend>10 Уровень</legend>
	<div class="form-group">
		<div class="col-sm-2">
			<label>
				@(Html.Kendo().CheckBoxFor(m => m.Level10.UseDictionary))
				Справочник
			</label>
		</div>
		<div class="col-sm-2">
			<label>
				@(Html.Kendo().CheckBoxFor(m => m.Level10.SkipDefis))
				Игнорировать "-"
			</label>
		</div>
		<div class="col-sm-2">
			@Html.CustomLabel("Характеристика")
		</div>
		<div class="col-sm-6">
			@Html.KendoDropDownListTreeWithButton(m => m.Level10.IdFactor, (IEnumerable<DropDownTreeItemModel>)ViewData["TreeAttributes"])
		</div>
	</div>
</fieldset>
<fieldset class="wrap-level">
	<legend>11 Уровень</legend>
	<div class="form-group">
		<div class="col-sm-2">
			<label>
				@(Html.Kendo().CheckBoxFor(m => m.Level11.UseDictionary))
				Справочник
			</label>
		</div>
		<div class="col-sm-2">
			<label>
				@(Html.Kendo().CheckBoxFor(m => m.Level11.SkipDefis))
				Игнорировать "-"
			</label>
		</div>
		<div class="col-sm-2">
			@Html.CustomLabel("Характеристика")
		</div>
		<div class="col-sm-6">
			@Html.KendoDropDownListTreeWithButton(m => m.Level11.IdFactor, (IEnumerable<DropDownTreeItemModel>)ViewData["TreeAttributes"])
		</div>
	</div>
</fieldset>
<div class="form-group"></div>
@(await Html.PartialAsync("Partials/PartialCharacteristic", new PartialCharacteristicViewModel
{
	IdAttributeResult = Model.IdAttributeResult,
	IsNewAttribute = Model.IsNewAttribute,
	NameNewAttribute = Model.NameNewAttribute,
	RegistryId = Model.RegistryId,
	TypeNewAttribute = Model.TypeNewAttribute,
    SelectEventName = "onAttributeResultChangeEvent"
}))
	<div class="form-group">
		<div class="col-sm-2">
			@Html.CustomLabelFor(m => m.AttributeResultSourceName)
		</div>
	    <div class="col-sm-10" style="padding-left: 30px; padding-right: 30px;">
	        @(Html.Kendo().TextBoxFor(m => m.AttributeResultSourceName).HtmlAttributes(new { @readonly = "readonly" }))
	    </div>
	</div>
<div class="form-group">
	<div class="col-sm-2">
		@Html.CustomLabelFor(m => m.IdAttributeDocument)
	</div>
    <div class="col-sm-10">
        @Html.KendoDropDownListWithAutocompleteFor(m => m.IdAttributeDocument, (IEnumerable)ViewData["Documents"])
    </div>
</div>
<div class="form-group">
	<div class="col-sm-7">
		@( await Html.PartialAsync("/Views/Shared/PartialTemplateStorage.cshtml", new TemplateStorageViewModel
			{
				ControllerName = "GbuObject",
				ActionName = "GetTemplatesGrouping"
			}))
	</div>
	
	<div class="col-sm-2 col-sm-offset-3">
		<button style="float: right" id="execute" class="k-button" type="button">Выполнить</button>
	</div>
</div>
</div>
}

<script type="text/javascript">

    var dataActualRadioButtonPrevValue, taskRadioButtonPrevValue;

	function fillForm(data) {
		debugger;
	    $('#valuesFilter').getKendoMultiSelect().value([]);
	    $('#@(nameof(Model.TaskFilter))').data("kendoMultiSelect").value([]);
		data.forEach(function (val) {
			if (Object.keys(val)[0].includes('IdFactor') || Object.keys(val)[0].includes('IdAttributeResult')
				 || Object.keys(val)[0].includes('IdAttributeFilter')) {
				$('#' + Object.keys(val)[0]).data('kendoDropDownTree').value(val[Object.keys(val)[0]]);
				$('#' + Object.keys(val)[0]).data('kendoDropDownTree').trigger('change');
            }

            if (Object.keys(val)[0].includes('AttributeResultSourceName')) {
		        $('#' + Object.keys(val)[0]).val(val[Object.keys(val)[0]]);
            }

            if (Object.keys(val)[0].includes('IdCodJob') || Object.keys(val)[0].includes('IdAttributeDocument')) {
				$('#' + Object.keys(val)[0]).data('kendoDropDownList').value(val[Object.keys(val)[0]]);
			}

			if (Object.keys(val)[0].includes('ValuesFilter')) {
				var widget = $('#valuesFilter').getKendoMultiSelect();
				var dataSource = widget.dataSource;
				var newItem = {
					valuesFilter: val[Object.keys(val)[0]],
					valuesFilterName: val[Object.keys(val)[0]]
				};

				dataSource.add(newItem);
				var newValue = newItem.valuesFilter;
				widget.value(widget.value().concat([newValue]));
            }

            if (Object.keys(val)[0] === '@(nameof(Model.SelectAllObject))') {
	            if (!!val[Object.keys(val)[0]]) {
                        $('#@(nameof(Model.SelectAllObject))').prop("checked", true);
	                    selectAllObjectChanged(true);
                        return;
                    }
                    $('#@(nameof(Model.SelectAllObject))').prop("checked", false);
                    selectAllObjectChanged(false);
            }

		    if (Object.keys(val)[0] === '@(nameof(Model.IsDataActualUsed))') {
		        if (!!val[Object.keys(val)[0]]) {
		            $('#@(nameof(Model.IsDataActualUsed))').prop("checked", true);
		            changeDataActualAvailability(true);
		            return;
                }
		        $('#@(nameof(Model.IsDataActualUsed))').prop("checked", false);
		        changeDataActualAvailability(false);
            }

		    if (Object.keys(val)[0] === '@(nameof(Model.IsTaskFilterUsed))') {
		        if (!!val[Object.keys(val)[0]]) {
		            $('#@(nameof(Model.IsTaskFilterUsed))').prop("checked", true);
                    changeTaskFilterAvailability(true);
		            return;
                }
		        $('#@(nameof(Model.IsTaskFilterUsed))').prop("checked", false);
                changeTaskFilterAvailability(false);
            }

		    if (Object.keys(val)[0] === '@(nameof(Model.IsValuesFilterUsed))') {
		        if (!!val[Object.keys(val)[0]]) {
		            $('#@(nameof(Model.IsValuesFilterUsed))').prop("checked", true);
                    changeValuesFilterAvailability(true);
		            return;
		        }
		        $('#@(nameof(Model.IsValuesFilterUsed))').prop("checked", false);
                changeValuesFilterAvailability(false);
		    }

		    if (Object.keys(val)[0] === '@(nameof(Model.DataActual))') {
		        $('#@(nameof(Model.DataActual))').data('kendoDatePicker').value(kendo.parseDate(val[Object.keys(val)[0]]));
		    }

		    if (Object.keys(val)[0].includes('@(nameof(Model.TaskFilter))')) {
		        var currentValue = $('#@(nameof(Model.TaskFilter))').data("kendoMultiSelect").value();
		        currentValue.push([val[Object.keys(val)[0]]]);
		        $('#@(nameof(Model.TaskFilter))').data("kendoMultiSelect").value(currentValue);
            }

			if (Object.keys(val)[0].includes('UseDictionary') || Object.keys(val)[0].includes('SkipDefis')) {
				$('#' + Object.keys(val)[0]).prop("checked", val[Object.keys(val)[0]]);
			}
        });
	    var isSelectAllObjectsChecked =
            $('#SelectAllObject').prop('checked');
        selectAllObjectChanged(isSelectAllObjectsChecked);
    }

    function changeDataActualAvailability(isDataActualUsed) {
        if (isDataActualUsed) {
            $('#@(nameof(Model.DataActual))').data('kendoDatePicker').enable(true);
        } else {
            $('#@(nameof(Model.DataActual))').data('kendoDatePicker').value(null);
            $('#@(nameof(Model.DataActual))').data('kendoDatePicker').enable(false);
        }
    }

    function changeValuesFilterAvailability(isValuesFilterUsed) {
        if (isValuesFilterUsed) {
            $('#@(nameof(Model.IdAttributeFilter))').data('kendoDropDownTree').enable(true);
            $('a.clear-button-@(nameof(Model.IdAttributeFilter))').removeClass('k-state-disabled');
            $('#valuesFilter').data("kendoMultiSelect").enable(true);
        } else {
            $('#@(nameof(Model.IdAttributeFilter))').data('kendoDropDownTree').value('');
            $('#@(nameof(Model.IdAttributeFilter))').data('kendoDropDownTree').enable(false);
            $('a.clear-button-@(nameof(Model.IdAttributeFilter))').addClass('k-state-disabled');

            $('#valuesFilter').data("kendoMultiSelect").value([]);
            $('#valuesFilter').data("kendoMultiSelect").enable(false);
        }
    }

    function changeTaskFilterAvailability(isTaskFilterUsed) {
        if (isTaskFilterUsed) {
            $('#@(nameof(Model.TaskFilter))').data("kendoMultiSelect").enable(true);
        } else {
            $('#@(nameof(Model.TaskFilter))').data("kendoMultiSelect").value([]);
            $('#@(nameof(Model.TaskFilter))').data("kendoMultiSelect").enable(false);
        }
    }

    function selectAllObjectChanged(checked) {
        if (checked) {
            $('#IsValuesFilterUsed').prop('checked', false);
            $('#IsValuesFilterUsed').attr("disabled", true);
            $('#IsDataActualUsed').prop('checked', false);
            $('#IsDataActualUsed').attr("disabled", true);
            $('#IsTaskFilterUsed').prop('checked', false);
            $('#IsTaskFilterUsed').attr("disabled", true);

            changeDataActualAvailability(false);
            changeValuesFilterAvailability(false);
            changeTaskFilterAvailability(false);
        } else {
            $('#IsValuesFilterUsed').attr("disabled", false);
            $('#IsDataActualUsed').attr("disabled", false);
            $('#IsTaskFilterUsed').attr("disabled", false);
        }
    }

    $(document).ready(function () {
        $('#SelectAllObject').bind("change", function () {
            selectAllObjectChanged(this.checked);
        });
        $('#IsValuesFilterUsed').bind("change", function () {
            changeValuesFilterAvailability(this.checked);
        });
        $('#IsDataActualUsed').bind("change", function () {
            changeDataActualAvailability(this.checked);
        });
        $('#IsTaskFilterUsed').bind("change", function () {
            changeTaskFilterAvailability(this.checked);
        });

		templateStorage.init(@((int)DataFormStorege.Normalisation), "SaveTemplateGroupingObject", "GbuObject", "GetTemplatesOneGroup", "GbuObject", fillForm);

		function onDataBound(e) {
			$('.k-multiselect .k-input').unbind('keyup');
            $('.k-multiselect .k-input').on('keyup', onClickEnter); 
		}
        function onClickEnter(e) {
			if (e.keyCode === 13) {
				var widget = $('#valuesFilter').getKendoMultiSelect();
				var dataSource = widget.dataSource;
				var input = $('.k-multiselect .k-input');
				var value = input.val().trim();
				if (!value || value.length === 0) {
					return;
				}
				var newItem = {
					valuesFilter: value,
					valuesFilterName: value
				};

				dataSource.add(newItem);
				var newValue = newItem.valuesFilter;
				widget.value(widget.value().concat([newValue]));
			}
		}
		$("#valuesFilter").kendoMultiSelect({
			dataTextField: "valuesFilterName",
			dataValueField: "valuesFilter",
			enable: false,
			dataSource: {
				data: []
			},
			dataBound: onDataBound
		});

		$('#execute').on('click',
			function () {
				var form = $('form');
				var formObject = Common.Functions.FormToObject(form);
				formObject['ValuesFilter'] = $("#valuesFilter").data('kendoMultiSelect').value();
				
				kendo.ui.progress($('body'), true);

				$.post(form.attr('action'), formObject).done(function(response) {
					kendo.ui.progress($('body'), false);
					if (response.Error) {
						kendo.ui.progress($('body'), false);
						Common.ShowError(response.Error);
						return;
					}

					if (response.Errors) {
						kendo.ui.progress($('body'), false);
						var errors = $.map(distinctErrors(response.Errors),
							function(el) {
								return el.Message;
							});
						Common.ShowError(errors);
						return;
					}
					if (response.success) {
						if (response.idResultAttribute && updateResultControl) {
							updateResultControl(response.idResultAttribute);
						}
						kendo.ui.progress($('body'), false);
					    Common.ShowMessage("Процедура нормализации данных успешно добавлена в очередь, по результатам операции будет отправлено сообщение");
					}
				});
			});
		
		function distinctErrors(errors) {
			var result = [];
			$.each(errors,
				function (index, event) {
					var events = $.grep(result,
						function (e) {
							return event.Message === e.Message;
						});
					if (events.length === 0) {
						result.push(event);
					}
				});

			return result;
        }
	});
</script>