@using System.Collections
@using Kendo.Mvc;
@using KadOzenka.Dal.Enum
@using KadOzenka.Web.Controllers
@using KadOzenka.Web.Helpers
@using KadOzenka.Web.Models.GbuObject
@using ObjectModel.Directory.Common
@model KadOzenka.Web.Models.GbuObject.GroupingObjectFinalize;

<style>
    fieldset {
        border: 1px solid #c8c6cc;
        border-radius: 6px;
        margin-bottom: 10px;
    }

    fieldset legend {
        font-size: initial;
        font-style: italic;
        margin: 0;
    }

    .error {
        border: 1px solid red;
        border-color: red !important;
    }

    #valuesFilter-list {
        display: none !important;
    }
    .wrap-level {
        padding-top: 5px;
    }
    .row {
        padding: inherit;
    }

    .k-multiselect-wrap
    {
        overflow: auto;
        max-height: 100px;
    }
    .codJobParam{
        display: none;
    }
</style>

@using (Html.BeginForm("GroupingObjectFinalize", "GbuObject", FormMethod.Post))
{
    <div class="form-horizontal col-sm-12">
    @Html.RenderHelpButton()
    @* <div class="form-group"> *@
    @*     <div class="col-sm-2"> *@
    @*         @Html.CustomLabelFor(m => m.IdCodJob) *@
    @*     </div> *@
    @*     <div class="col-sm-10"> *@
    @*         @Html.KendoDropDownListWithAutocompleteFor(m => m.IdCodJob, (IEnumerable) ViewData["CodJob"]) *@
    @*     </div> *@
    @* </div> *@
    <fieldset class="wrap-level">
        <div class="form-group">
            <div class="col-sm-12">
                <label>
                    @(Html.Kendo().CheckBoxFor(m => m.SelectAllObject))
                    Все объекты
                </label>
            </div>
        </div>
        <div class="form-group">
            <div class="col-sm-2">
                <label>
                    @(Html.Kendo().CheckBoxFor(m => m.IsDataActualUsed).Enable(!Model.SelectAllObject))
                    Дата актуализации
                </label>
            </div>
            <div class="col-sm-4">
                @(Html.Kendo().DatePickerFor(m => m.DataActual).Enable(Model.IsDataActualUsed))
            </div>
        </div>
        <div class="form-group">
            <div class="col-sm-2">
                <label>
                    @(Html.Kendo().CheckBoxFor(m => m.IsTaskFilterUsed).Enable(!Model.SelectAllObject))
                    Задания на оценку
                </label>
            </div>
            <div class="col-sm-10">
                @(Html.Kendo().MultiSelectFor(m => m.TaskFilter)
                    .DataTextField("Text")
                    .DataValueField("Value")
                    .Filter("contains")
                    .Enable(Model.IsTaskFilterUsed)
                    .DataSource(source =>
                    {
                        source.Read(read => { read.Action("GetTasksData", "GbuObject"); })
                            .ServerFiltering(false);
                    }))
            </div>
        </div>
        <div class="form-group">
            <div class="col-sm-2">
                @Html.CustomLabelFor(x => x.ObjectChangeStatus)
            </div>
            <div class="col-sm-10">
                @(Html.Kendo().MultiSelectFor(m => m.ObjectChangeStatus)
                    .BindTo(KadOzenka.Web.Helpers.EnumExtensions.GetSelectList(typeof(ObjectChangeStatus)))
                    .Filter(FilterType.Contains))
            </div>
        </div>
    </fieldset>
    <fieldset class="wrap-level" style="margin-top: 20px">
        <div class="form-group" style="margin-top: 10px">
            <div class="col-sm-2">
                @Html.CustomLabel("Преобразовываемая характеристика")
            </div>
            <div class="col-sm-10">
                @Html.KendoDropDownListTreeWithButton(m => m.IdAttributeSource, (IEnumerable<DropDownTreeItemModel>) ViewBag.TreeAttributes)
            </div>
        </div>
    </fieldset>
    <fieldset id="level2cod" class="wrap-level">
        <legend>Условие для 2 кодов</legend>
        <div class="form-group">
            <div class="col-sm-2">
                @Html.CustomLabel("Характеристика")
            </div>
            <div class="col-sm-10">
                @Html.KendoDropDownListTreeWithButton(m => m.IdAttributeForSelectionBetween2, (IEnumerable<DropDownTreeItemModel>) ViewBag.TreeAttributes)
            </div>
        </div>

        <div id="condition-group-2">
            <div class="form-group">
                <div class="col-sm-2">
                    @Html.CustomLabel("1. Если значение")
                </div>
                <div class="col-sm-10">
                    @{ await Html.RenderPartialFor("UiFilters", m => m.Filter1ForSelectionBetween2);}
                </div>
            </div>
            <div class="form-group">
                <div class="col-sm-2">
                    @Html.CustomLabel("2. Если значение")
                </div>
                <div class="col-sm-10">
                    @{ await Html.RenderPartialFor("UiFilters", m => m.Filter2ForSelectionBetween2);}
                </div>
            </div>
        </div>
    </fieldset>
    <fieldset id="level3cod" class="wrap-level">
        <legend>Условие для 3 кодов</legend>
        <div class="form-group">
            <div class="col-sm-2">
                @Html.CustomLabel("Характеристика")
            </div>
            <div class="col-sm-10">
                @Html.KendoDropDownListTreeWithButton(m => m.IdAttributeForSelectionBetween3, (IEnumerable<DropDownTreeItemModel>) ViewBag.TreeAttributes)
            </div>
        </div>
        <div id="condition-group-3">
            <div class="form-group">
                <div class="col-sm-2">
                    @Html.CustomLabel("1. Если значение")
                </div>
                <div class="col-sm-10">
                    @{ await Html.RenderPartialFor("UiFilters", m => m.Filter1ForSelectionBetween3);}
                </div>
            </div>
            <div class="form-group">
                <div class="col-sm-2">
                    @Html.CustomLabel("2. Если значение")
                </div>
                <div class="col-sm-10">
                    @{ await Html.RenderPartialFor("UiFilters", m => m.Filter2ForSelectionBetween3);}
                </div>
            </div>
            <div class="form-group">
                <div class="col-sm-2">
                    @Html.CustomLabel("3. Если значение")
                </div>
                <div class="col-sm-10">
                    @{ await Html.RenderPartialFor("UiFilters", m => m.Filter3ForSelectionBetween3);}
                </div>
            </div>
        </div>
    </fieldset>
    <div class="form-group"></div>
    @(await Html.PartialAsync("Partials/PartialCharacteristic", new PartialCharacteristicViewModel
    {
        IdAttributeResult = Model.IdAttributeResult,
        IsNewAttribute = Model.IsNewAttribute,
        NameNewAttribute = Model.NameNewAttribute,
        RegistryId = Model.RegistryId,
        TypeNewAttribute = Model.TypeNewAttribute,
        PossibleAttributes = (List<DropDownTreeItemModel>) ViewBag.StringTreeAttributes
    }))
    <div class="form-group">
        <div class="col-sm-7">
            @(await Html.PartialAsync("/Views/Shared/PartialTemplateStorage.cshtml", new TemplateStorageViewModel
            {
                GetTemplatesActionName = nameof(TemplateController.GetTemplates),
                Parameters = "formStorageType=" + (int) DataFormStorege.NormalisationFinal,
                SaveTemplateActionName = nameof(TemplateController.SaveTemplateGroupingObjectFinal)
            }))
        </div>

        <div class="col-sm-1 col-sm-offset-1">
            <button style="float: right" id="execute" class="k-button" type="button">Выполнить</button>
        </div>
        <div class="col-sm-3">
            <a class="k-button k-state-disabled" id="goToProcessBtn" href="" target="_blank" style="float: right">
                <span>Перейти к процессу</span>
            </a>
        </div>
    </div>
    </div>
}

<script src="~/js/custom-filters.js"></script>
<script src="~/js/custom-validation.js"></script>
<script type="text/javascript">

    function fillForm(data) {
        $('#@(nameof(Model.TaskFilter))').data("kendoMultiSelect").value([]);
        $('#@(nameof(Model.ObjectChangeStatus))').data("kendoMultiSelect").value([]);
        data.forEach(function (val) {
            let valKey = Object.keys(val)[0];
            if (valKey.includes('IdFactor') || valKey.includes('IdAttributeResult')
                || valKey.includes('IdAttributeSource') || valKey.includes('IdAttributeForSelection')) {
                try{
                    $('#' + valKey).data('kendoDropDownTree').value(val[valKey] || '');
                }
                catch {
                    console.log(valKey+ " failed");
                }
            }

            if (valKey.match('Filter.ForSelectionBetween._Type')){
                console.log(valKey+ " - Type");
                console.log(val[valKey]);
                let dropDownList = $('#' + valKey);
                dropDownList.data('kendoDropDownList').select(val[valKey] || 'None');
                dropDownList.trigger('change');
            }

            if (valKey.match('Filter.ForSelectionBetween._.+Filter_FilteringType')){
                console.log(valKey + " - FilteringType - " + val[valKey]);
                let dropDownList = $('#' + valKey);
                dropDownList.data('kendoDropDownList').select(val[valKey]);
                dropDownList.trigger('change');
            }

            if (valKey.match('.+_NumberFilter_Value.?')){
                console.log(valKey+ " - Value - " + val[valKey] );
                let input = $('#' + valKey);
                input.data('kendoNumericTextBox').value(val[valKey]);
                input.trigger('change');
            }

            if (valKey.match('.+_DateFilter_Value.?')){
                console.log(valKey+ " - Value - " + val[valKey] );
                let input = $('#' + valKey);
                if (val[valKey]) input.data('kendoDatePicker').value(new Date(val[valKey]));
                input.trigger('change');
            }

            if (valKey === '@(nameof(Model.SelectAllObject))') {
                if (!!val[valKey]) {
                    $('#@(nameof(Model.SelectAllObject))').prop("checked", true);
                    selectAllObjectChanged(true);
                    return;
                }
                $('#@(nameof(Model.SelectAllObject))').prop("checked", false);
                selectAllObjectChanged(false);
            }

            if (valKey === '@(nameof(Model.IsDataActualUsed))') {
                if (!!val[valKey]) {
                    $('#@(nameof(Model.IsDataActualUsed))').prop("checked", true);
                    changeDataActualAvailability(true);
                    return;
                }
                $('#@(nameof(Model.IsDataActualUsed))').prop("checked", false);
                changeDataActualAvailability(false);
            }

            if (valKey === '@(nameof(Model.IsTaskFilterUsed))') {
                if (!!val[valKey]) {
                    $('#@(nameof(Model.IsTaskFilterUsed))').prop("checked", true);
                    changeTaskFilterAvailability(true);
                    return;
                }
                $('#@(nameof(Model.IsTaskFilterUsed))').prop("checked", false);
                changeTaskFilterAvailability(false);
            }

            if (valKey === '@(nameof(Model.DataActual))') {
                $('#@(nameof(Model.DataActual))').data('kendoDatePicker').value(kendo.parseDate(val[valKey]));
            }

            if (valKey.includes('@(nameof(Model.TaskFilter))')) {
                var currentValue = $('#@(nameof(Model.TaskFilter))').data("kendoMultiSelect").value();
                currentValue.push([val[valKey]]);
                $('#@(nameof(Model.TaskFilter))').data("kendoMultiSelect").value(currentValue);
            }

            if (valKey.includes('@(nameof(Model.ObjectChangeStatus))')) {
                var element = $('#@(nameof(Model.ObjectChangeStatus))').data("kendoMultiSelect");
                var currentUnitChangeStatusValue = element.value();
                currentUnitChangeStatusValue.push([val[valKey]]);
                element.value(currentUnitChangeStatusValue);
            }
        });
        var isSelectAllObjectsChecked =
            $('#SelectAllObject').prop('checked');
        selectAllObjectChanged(isSelectAllObjectsChecked);
    }

    function changeDataActualAvailability(isDataActualUsed) {
        if (isDataActualUsed) {
            $('#@(nameof(Model.DataActual))').data('kendoDatePicker').enable(true);
        } else {
            $('#@(nameof(Model.DataActual))').data('kendoDatePicker').value(null);
            $('#@(nameof(Model.DataActual))').data('kendoDatePicker').enable(false);
        }
    }

    function changeTaskFilterAvailability(isTaskFilterUsed) {
        if (isTaskFilterUsed) {
            $('#@(nameof(Model.TaskFilter))').data("kendoMultiSelect").enable(true);
        } else {
            disableKendoMultiSelect("TaskFilter");
        }
    }
    function disableKendoMultiSelect(name) {
        $('#' + name).data("kendoMultiSelect").value([]);
        $('#' + name).data("kendoMultiSelect").enable(false);
    }

    function selectAllObjectChanged(checked) {
        if (checked) {
            $('#IsDataActualUsed').prop('checked', false);
            $('#IsDataActualUsed').attr("disabled", true);
            $('#IsTaskFilterUsed').prop('checked', false);
            $('#IsTaskFilterUsed').attr("disabled", true);

            changeDataActualAvailability(false);
            changeTaskFilterAvailability(false);
        } else {
            $('#IsDataActualUsed').attr("disabled", false);
            $('#IsTaskFilterUsed').attr("disabled", false);
        }
    }

    function clear2CodeParams(){
        let selector = 'input[id$="ForSelectionBetween2_Type"]';
        $(selector).toArray().forEach(e=> $(e).data('kendoDropDownList').value('None'));
        $(selector).toArray().forEach(e=> $(e).trigger('change'));
    }

    function clear3CodeParams(){
        let selector = 'input[id$="ForSelectionBetween3_Type"]';
        $(selector).toArray().forEach(e=> $(e).data('kendoDropDownList').value('None'));
        $(selector).toArray().forEach(e=> $(e).trigger('change'));
    }

    function getData(){
        return JSON.parse('{"SelectAllObject":true,"IsDataActualUsed":false,"IsTaskFilterUsed":false,"TaskFilter":[],"ObjectChangeStatus":[],"DataActual":null,"IdAttributeSource":{"CodValueName":null,"CodValueId":null,"SkipDefis":false,"IdFactor":56194265},"IdAttributeForSelectionBetween2":{"CodValueName":null,"CodValueId":null,"SkipDefis":false,"IdFactor":2},"Filter1ForSelectionBetween2":{"Type":3,"DateFilter":{"FilteringType":0,"Value":null,"Value2":null},"StringFilter":{"FilteringType":0,"Value":null},"NumberFilter":{"FilteringType":2,"Value":115.0,"Value2":null},"BoolFilter":{"FilteringType":0,"Value":false},"ReferenceFilter":null},"Filter2ForSelectionBetween2":{"Type":3,"DateFilter":{"FilteringType":0,"Value":null,"Value2":null},"StringFilter":{"FilteringType":0,"Value":null},"NumberFilter":{"FilteringType":5,"Value":115.0,"Value2":null},"BoolFilter":{"FilteringType":0,"Value":false},"ReferenceFilter":null},"IdAttributeForSelectionBetween3":{"CodValueName":null,"CodValueId":null,"SkipDefis":false,"IdFactor":1003},"Filter1ForSelectionBetween3":{"Type":1,"DateFilter":{"FilteringType":0,"Value":null,"Value2":null},"StringFilter":{"FilteringType":1,"Value":"safaf"},"NumberFilter":{"FilteringType":0,"Value":null,"Value2":null},"BoolFilter":{"FilteringType":0,"Value":false},"ReferenceFilter":null},"Filter2ForSelectionBetween3":{"Type":1,"DateFilter":{"FilteringType":0,"Value":null,"Value2":null},"StringFilter":{"FilteringType":5,"Value":"dghh"},"NumberFilter":{"FilteringType":0,"Value":null,"Value2":null},"BoolFilter":{"FilteringType":0,"Value":false},"ReferenceFilter":null},"Filter3ForSelectionBetween3":{"Type":1,"DateFilter":{"FilteringType":0,"Value":null,"Value2":null},"StringFilter":{"FilteringType":16,"Value":null},"NumberFilter":{"FilteringType":0,"Value":null,"Value2":null},"BoolFilter":{"FilteringType":0,"Value":false},"ReferenceFilter":null},"IdAttributeResult":56246499,"NameNewAttribute":null,"TypeNewAttribute":1,"RegistryId":3,"IsNewAttribute":false,"PossibleAttributes":null}');
    }

    function flattenObject(ob, prefix = false, result = null) {
      result = result || {};

      // Preserve empty objects and arrays, they are lost otherwise
      if (prefix && typeof ob === 'object' && ob !== null && Object.keys(ob).length === 0) {
        result[prefix] = Array.isArray(ob) ? [] : {};
        return result;
      }

      prefix = prefix ? prefix + '_' : '';

      for (const i in ob) {
        if (Object.prototype.hasOwnProperty.call(ob, i)) {
          if (typeof ob[i] === 'object' && ob[i] !== null) {
            // Recursion on deeper objects
            flattenObject(ob[i], prefix + i, result);
          } else {
            result[prefix + i] = ob[i];
          }
        }
      }
      return result;
    }

    $(document).ready(function () {
        $('#SelectAllObject').bind("change",
            function() {
                selectAllObjectChanged(this.checked);
            });
        $('#IsDataActualUsed').bind("change",
            function() {
                changeDataActualAvailability(this.checked);
            });
        $('#IsTaskFilterUsed').bind("change",
            function() {
                changeTaskFilterAvailability(this.checked);
            });

        $('.clear-button-IdAttributeForSelectionBetween2').bind('click', () => clear2CodeParams());
        $('.clear-button-IdAttributeForSelectionBetween3').bind('click', () => clear3CodeParams());

        bindUnusedFieldHider('Filter1ForSelectionBetween2');
        bindUnusedFieldHider('Filter2ForSelectionBetween2');
        bindUnusedFieldHider('Filter1ForSelectionBetween3');
        bindUnusedFieldHider('Filter2ForSelectionBetween3');
        bindUnusedFieldHider('Filter3ForSelectionBetween3');
        bindAttributeSelectorEvents('#IdAttributeForSelectionBetween2');
        bindAttributeSelectorEvents('#IdAttributeForSelectionBetween3');

        templateStorage.init(@((int) DataFormStorege.NormalisationFinal), fillForm);


        $('#execute').on('click',
            function () {
                var form = $('form');
                var formObject = Common.Functions.FormToObject(form);
                kendo.ui.progress($('body'), true);

                $.post(form.attr('action'), formObject).done(function(response) {
                        if (response.Errors) {
                            var errors = getErrors(response.Errors);
                            Common.ShowError(errors);
                            return;
                        }
                        if (response.success) {
                            if (response.idResultAttribute && updateResultControl) {
                                updateResultControl(response.idResultAttribute);
                            }
                            Common.ShowMessage(
                                "Процедура нормализации данных успешно добавлена в очередь, по результатам операции будет отправлено сообщение");

                            if (response.QueueId) {
                                var hrefForJournal = "/RegistersView/CoreLongProcessQueue?Transition=1&97500100=" + response.QueueId;
                                var goToProcessBtn = $("#goToProcessBtn");
                                goToProcessBtn.removeClass('k-state-disabled');
                                goToProcessBtn.attr('href', hrefForJournal);
                            }
                        }
                    })
                    .fail(function(response, textStatus, errorThrown) {
                        Common.ShowError(response.responseText);
                    })
                    .always(function() {
                        kendo.ui.progress($('body'), false);
                    });
            });
    });
</script>