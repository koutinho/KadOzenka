@using System.Collections
@using KadOzenka.Web.Helpers
@using KadOzenka.Web.Models.GbuObject
@using ObjectModel.Directory
@using ObjectModel.Directory.Common
@model KadOzenka.Web.Models.GbuObject.UnloadingFromDicViewModel

<style>
	fieldset {
		border: 1px solid #c8c6cc;
		border-radius: 6px;
		margin-bottom: 10px;
	}

		fieldset legend {
			font-size: initial;
			font-style: italic;
			margin: 0;
		}

	.error {
		border: 1px solid red;
		border-color: red !important;
	}

	#valuesFilter-list {
		display: none !important;
	}

	.wrap-level {
		padding-top: 5px;
	}

	.row {
		padding: inherit;
	}

	.k-multiselect-wrap {
		overflow: auto;
		max-height: 100px;
	}
</style>


@using (Html.BeginForm("UnloadingFromDict", "GbuObject", FormMethod.Post))
{
<div class="form-horizontal col-sm-12">
	<div class="form-group"></div>
	<div class="form-group">
		<div class="col-sm-2">
			@Html.CustomLabelFor(m => m.IdCodJob)
		</div>
		<div class="col-sm-10">
			@Html.KendoDropDownListWithAutocompleteFor(m => m.IdCodJob, (IEnumerable)ViewData["CodJob"], dataValueField: "Id")
		</div>
	</div>
	<div class="form-group" style="margin-top: 5px">
		<div class="col-sm-2">
			@Html.CustomLabelFor(m => m.IdAttributeResult)
		</div>
		<div class="col-sm-10">
			@Html.KendoDropDownListWithAutocompleteFor(m => m.IdAttributeResult, (IEnumerable)ViewData["Attribute"], dataValueField: "Id")
		</div>
	</div>
	<div class="form-group">
		<div class="col-sm-12">
			@(Html.Kendo().RadioButtonFor(m => m.PropertyType).Label(PropertyTypes.Stead.GetEnumDescription()).Value((long)PropertyTypes.Stead))
			<span>&nbsp;</span>
			@(Html.Kendo().RadioButtonFor(m => m.PropertyType).Label(PropertyTypes.Building.GetEnumDescription()).Value((long)PropertyTypes.Building))
			<span>&nbsp;</span>
			@(Html.Kendo().RadioButtonFor(m => m.PropertyType).Label(PropertyTypes.Construction.GetEnumDescription()).Value((long)PropertyTypes.Construction))
			<span>&nbsp;</span>
			@(Html.Kendo().RadioButtonFor(m => m.PropertyType).Label("ОНС").Value((long)PropertyTypes.UncompletedBuilding))
			<span>&nbsp;</span>
			@(Html.Kendo().RadioButtonFor(m => m.PropertyType).Label(PropertyTypes.Pllacement.GetEnumDescription()).Value((long)PropertyTypes.Pllacement))
		</div>
	</div>
	<fieldset class="filterFieldset">
		<div class="form-group">
			<div class="col-sm-12">
				@Html.Kendo().RadioButtonFor(m => m.SelectAllObject).Label("Все объекты").Value(true)
			</div>
		</div>
		<div class="form-group">
			<div class="col-sm-12">
				@Html.Kendo().RadioButtonFor(m => m.SelectAllObject).Label("По значению").Value(false)
			</div>
		</div>
		<div class="form-group">
			<div class="col-sm-7">
				<div class="col-sm-3">
					@Html.CustomLabelFor(m => m.IdAttributeFilter)
				</div>
				<div class="col-sm-9">
					@Html.KendoDropDownListWithAutocompleteFor(m => m.IdAttributeFilter, (IEnumerable)ViewData["Attribute"], dataValueField: "Id", isReadonly: Model.SelectAllObject)
				</div>
			</div>
			<div class="col-sm-5">
				<div class="col-sm-3">
					@Html.CustomLabelFor(m => m.ValuesFilter)
				</div>
				<div class="col-sm-9">
					<select id="valuesFilter" style="width: 100%;"></select>
				</div>
			</div>
		</div>
	</fieldset>
	<div class="form-group"></div>
	<div class="form-group">
		<div class="col-sm-2">
			@Html.CustomLabelFor(m => m.IdDocument)
		</div>
		<div class="col-sm-10">
			@Html.KendoDropDownListWithAutocompleteFor(m => m.IdDocument, (IEnumerable)ViewData["Document"], dataValueField: "Id")
		</div>
	</div>

	<div class="form-group">
		<div class="col-sm-7">
			@( await Html.PartialAsync("PartialTemplateStorage", new TemplateStorageViewModel
				{
					ControllerName = "GbuObject",
					ActionName = "GetTemplatesUnloadingForm"
				}))
		</div>

		<div class="col-sm-2 col-sm-offset-3">
			<button style="float: right" id="execute" class="k-button" type="button">Выполнить</button>
		</div>
	</div>
</div>
}

	<script type="text/javascript">
	function onDataBound(e) {
		$('.k-multiselect .k-input').unbind('keyup');
		$('.k-multiselect .k-input').on('keyup', onClickEnter);
	}
	function onClickEnter(e) {
		if (e.keyCode === 13) {
			var widget = $('#valuesFilter').getKendoMultiSelect();
			var dataSource = widget.dataSource;
			var input = $('.k-multiselect .k-input');
			var value = input.val().trim();
			if (!value || value.length === 0) {
				return;
			}
			var newItem = {
				valuesFilter: value,
				valuesFilterName: value
			};

			dataSource.add(newItem);
			var newValue = newItem.valuesFilter;
			widget.value(widget.value().concat([newValue]));
		}
	}
	$("#valuesFilter").kendoMultiSelect({
		dataTextField: "valuesFilterName",
		dataValueField: "valuesFilter",
		enable: false,
		dataSource: {
			data: []
		},
		dataBound: onDataBound
	});

	function distinctErrors(errors) {
		var result = [];
		$.each(errors,
			function (index, event) {
				var events = $.grep(result,
					function (e) {
						return event.Message === e.Message;
					});
				if (events.length === 0) {
					result.push(event);
				}
			});

		return result;
		}

	function initSelectAllObjectChangedHandler() {
            $('input[type="radio"][name="SelectAllObject"][value="True"] ').change(function() {
                if (this.checked) {
                    changeAttributeFilterAvailability(true);
                }
            });
		$('input[type="radio"][name="SelectAllObject"][value="False"] ').change(function () {
			console.log('123', this.checked);
                if (this.checked) {
                    changeAttributeFilterAvailability(false);
                }
            });
        }

	function changeAttributeFilterAvailability(areFieldsReadonly) {
            if (areFieldsReadonly) {
                $('#@(nameof(Model.IdAttributeFilter))').data('kendoDropDownList').value('');
                $('#@(nameof(Model.IdAttributeFilter))').data('kendoDropDownList').enable(false);
                $('a.clear-button-@(nameof(Model.IdAttributeFilter))').addClass('k-state-disabled');

                $('#valuesFilter').data("kendoMultiSelect").value([]);
                $('#valuesFilter').data("kendoMultiSelect").enable(false);
            } else {
                $('#@(nameof(Model.IdAttributeFilter))').data('kendoDropDownList').enable(true);
                $('a.clear-button-@(nameof(Model.IdAttributeFilter))').removeClass('k-state-disabled');
                $('#valuesFilter').data("kendoMultiSelect").enable(true);
            }
		}

		$(document).ready(function () {

			initSelectAllObjectChangedHandler();

			function fillForm(data) {
				data.forEach(function (val) {

					if (Object.keys(val)[0] === 'SelectAllObject') {
						if (!!val[Object.keys(val)[0]]) {
							$('#SelectAllObject_True').click();
							return;
						}
						$('#SelectAllObject_False').click();
					}

					if (Object.keys(val)[0].includes('IdAttributeResult') || Object.keys(val)[0].includes('IdCodJob')
						|| Object.keys(val)[0].includes('IdDocument') || Object.keys(val)[0].includes('IdAttributeFilter')) {
						$('#' + Object.keys(val)[0]).data('kendoDropDownList').value(val[Object.keys(val)[0]]);
					}

					if (Object.keys(val)[0].includes('ValuesFilter')) {
						var widget = $('#valuesFilter').getKendoMultiSelect();
						var dataSource = widget.dataSource;
						var newItem = {
							valuesFilter: val[Object.keys(val)[0]],
							valuesFilterName: val[Object.keys(val)[0]]
						};

						dataSource.add(newItem);
						var newValue = newItem.valuesFilter;
						widget.value(widget.value().concat([newValue]));
					}

					if (Object.keys(val)[0] === 'PropertyType') {
						var id = '#PropertyType_' + val[Object.keys(val)[0]];
						$(id).prop("checked", true);
					}
				});
			}

			templateStorage.init(@((int)DataFormStorege.UnloadingFromDict), "SaveTemplateUnloading", "GbuObject", "GetTemplatesOneGroup", "GbuObject", fillForm);

			$('#execute').on('click',
				function () {
					var form = $('form');
					var formObject = Common.Functions.FormToObject(form);
					formObject['ValuesFilter'] = $("#valuesFilter").data('kendoMultiSelect').value();
					console.log('formObject', formObject);
					kendo.ui.progress($('body'), true);
					$.post(form.attr('action'), formObject).done(function(response) {
						kendo.ui.progress($('body'), false);
						if (response.Errors) {
							kendo.ui.progress($('body'), false);
							var errors = $.map(distinctErrors(response.Errors),
								function(el) {
									return el.Message;
								});
							Common.ShowError(errors);
							return;
						}

						if (response.success) {
							kendo.ui.progress($('body'), false);
							Common.ShowMessage("Выполнено");
						}
					});
				});
		});
	</script>