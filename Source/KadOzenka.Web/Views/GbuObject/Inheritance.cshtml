@using KadOzenka.Dal.Enum
@using KadOzenka.Web.Controllers
@using KadOzenka.Web.Helpers
@using KadOzenka.Web.Models.GbuObject
@using ObjectModel.Directory.Common
@using DevExpress.XtraRichEdit.Import.Html
@using KadOzenka.Dal.GbuObject.Dto
@model KadOzenka.Web.Models.GbuObject.InheritanceViewModel;

@using (Html.BeginForm("Inheritance", "GbuObject", FormMethod.Post))
{
    <div class="form-horizontal col-sm-12">
        @Html.RenderHelpButton()

        <div class="form-group">
            <div class="col-sm-2">
                @Html.CustomLabel("Тур оценки")
            </div>
            <div class="col-sm-4">
                @(Html.Kendo().DropDownListFor(x => x.RatingTour)
                                            .DataTextField("Text")
                                            .DataValueField("Value")
                                            .DataSource(data => data.Read("GetRatingTours", "GbuObject"))
                )
            </div>
        </div>

        <div class="form-group">
            <div class="col-sm-2">
                @Html.CustomLabel("Задания на оценку")
            </div>
            <div class="col-sm-10">
                @(Html.Kendo().MultiSelectFor(m => m.TaskFilter)
                                    .DataTextField("Text")
                                    .DataValueField("Value")
                                    .Filter("contains")
                                    .DataSource(source =>
                                    {
                                        source.Read(read =>
                                        {
                                            read.Action("GetTasksByTour", "Task").Data("handlerData");
                                        })
                                        .ServerFiltering(false);
                                    }))
            </div>
        </div>
        
        <div class="form-group">
            <div class="col-sm-2">
                @Html.CustomLabelFor(x => x.ObjectChangeStatus)
            </div>
            <div class="col-sm-10">
                @(Html.Kendo().MultiSelectFor(m => m.ObjectChangeStatus)
                    .BindTo(KadOzenka.Web.Helpers.EnumExtensions.GetSelectList(typeof(ObjectChangeStatus)))
                    .Filter(FilterType.Contains))
            </div>
        </div>

        <fieldset>
            <legend>Тип наследования</legend>
            <div class="form-group">
                <div class="col-sm-6">
                    @(Html.Kendo().RadioButtonFor(m => m.CadastralBlockToParcel).Label("Кадастровый квартал \u2192 Земельный участок").Value(true).Checked(true))
                </div>
                <div class="col-sm-6">
                    @(Html.Kendo().RadioButtonFor(m => m.ParcelToBuilding).Label("Земельный участок \u2192 Здание").Value(true))
                </div>
                <div class="col-sm-6">
                    @(Html.Kendo().RadioButtonFor(m => m.CadastralBlockToBuilding).Label("Кадастровый квартал \u2192 Здание").Value(true))
                </div>
                <div class="col-sm-6">
                    @(Html.Kendo().RadioButtonFor(m => m.ParcelToConstruction).Label("Земельный участок \u2192 Сооружение").Value(true))
                </div>
                <div class="col-sm-6">
                    @(Html.Kendo().RadioButtonFor(m => m.CadastralBlockToConstruction).Label("Кадастровый квартал \u2192 Сооружение").Value(true))
                </div>
                <div class="col-sm-6">
                    @(Html.Kendo().RadioButtonFor(m => m.ParcelToUncomplited).Label("Земельный участок \u2192 Объект незавершенного строительства").Value(true))
                </div>
                <div class="col-sm-6">
                    @(Html.Kendo().RadioButtonFor(m => m.CadastralBlockToUncomplited).Label("Кадастровый квартал \u2192 Объект незавершенного строительства").Value(true))
                </div>
                <div class="col-sm-6">
                    @(Html.Kendo().RadioButtonFor(m => m.BuildToFlat).Label("Здание \u2192 Помещение").Value(true))
                </div>
            </div>
            <div class="form-group">
                <div class="col-sm-4">
                    @Html.CustomLabel("Фактор с родительским номером")
                </div>
                <div class="col-sm-8">
                    @Html.KendoDropDownListTreeWithButton(m => m.ParentCadastralNumberAttribute, (IEnumerable<DropDownTreeItemModel>)ViewData["TreeAttributes"])
                </div>
            </div>
        </fieldset>
        <div>
            <div class="form-group">
                <div class="col-sm-12">
                    <h4>Наследуемые факторы</h4>
                </div>
            </div>
            <div class="form-group"></div>
            <div class="form-group attributes-list">
                <div id="wrapperCustomRow" class="col-sm-11 col-sm-offset-1">
                    <div class="row">
                        <div class="col-sm-5">
                            @Html.Label("Фактор - откуда копировать значение")
                        </div>
                        <div class="col-sm-5 col-sm-offset-1">
                            @Html.Label("Фактор - куда копировать значение")
                        </div>
                    </div>
                    @for (var i = 0; i < Model.Attributes.Count; i++)
                    {
                        <div class="row">
                            <div class="col-sm-5">
                                @Html.KendoDropDownListTreeWithButton(m => m.Attributes[i].IdFrom, (IEnumerable<DropDownTreeItemModel>) ViewData["TreeAttributes"])
                            </div>
                            <div class="col-sm-5 col-sm-offset-1">
                                @Html.KendoDropDownListTreeWithButton(m => m.Attributes[i].IdTo, (IEnumerable<DropDownTreeItemModel>) ViewData["TreeAttributes"])
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
        <div class="form-group">
            <div class="col-sm-offset-1 col-sm-11" style="margin-top: 8px">
                <a href="#" class="k-button-icon k-button" id="addRow"><span class='fas fa-plus-circle'></span></a>
            </div>
        </div>
        <div class="form-group">
            <div class="col-sm-8">
                @(await Html.PartialAsync("/Views/Shared/PartialTemplateStorage.cshtml", new TemplateStorageViewModel
            {
                GetTemplatesActionName = nameof(TemplateController.GetTemplates),
                Parameters = "formStorageType=" + (int)DataFormStorege.Inheritance,
                SaveTemplateActionName = nameof(TemplateController.SaveTemplateInheritance)
            }))
            </div>
            <div class="col-sm-2 col-sm-offset-1">
                <button style="float: right" id="performInheritance" class="k-button" type="button">Выполнить</button>
            </div>
        </div>
    </div>
}


<script type="text/x-kendo-template" id="templateRow">
    <div class="wrapper-#: rowNumber #" style="display: none"></div>
</script>




<script src="~/js/custom-validation.js"></script>
<script type="text/javascript">
    var minCustomRowNumber =  @Model.Attributes.Count || 0;
    var currentRowNumber = @Model.Attributes.Count || 0;
    var setTaskFilterValuesFromTemplate = false;
    var taskFilterValuesFromTemplate = [];

    function addNewRow(rowNumber) {
        kendo.ui.progress($('body'), true);
        var classWrapper = generateCustomRowFromTemplate(rowNumber);
        $(classWrapper).load("@Url.Action("GetRow", "GbuObject")", { rowNumber: rowNumber }, function (response) {
            $(classWrapper).show(250);
            $("html, body").animate({ scrollTop: $(document).height() }, "slow");
            addSelectionHandlersForDropDownsInFromBlock();
            addSelectionHandlersForDropDownsInToBlock();
            kendo.ui.progress($('body'), false);
        });
    }

    async function addNewRows(startRowNumber, rowCount, rowValues) {
        if (rowCount === 0)
            return;
        var rowRange = `${startRowNumber}-${startRowNumber + rowCount - 1}`;
        var classWrapper = generateCustomRowFromTemplate(rowRange);
        await $.post("@Url.Action("GetRows", "GbuObject")",
            { startRowNumber: startRowNumber, rowCount: rowCount, rowValues: rowValues },
            function(data) {
                $(classWrapper).append(data);
                $(classWrapper).show(250);
                $("html, body").animate({ scrollTop: $(document).height() }, "slow");
                addSelectionHandlersForDropDowns();
            });
    }

    function generateCustomRowFromTemplate(rowNumber) {
        var data = [{ rowNumber }];

        var templateContent = $("#templateRow").html();
        var template = kendo.template(templateContent);
        var result = kendo.render(template, data);
        $("#wrapperCustomRow").append(result);
        var classWrapper = `.wrapper-${rowNumber}`;

        return classWrapper;
    }

    function handlerData() {
        return {
            tourId: $('#RatingTour').data('kendoDropDownList').value()
        }
    }

    function tourdropdownlist_select(e) {
        $('#@(nameof(Model.TaskFilter))').data('kendoMultiSelect').dataSource.read();
        $('#@(nameof(Model.TaskFilter))').data('kendoMultiSelect').refresh();
    }

    function taskFiltermultiselect_dataBound(e) {
        if (setTaskFilterValuesFromTemplate) {
            $('#@(nameof(Model.TaskFilter))').data("kendoMultiSelect").value(taskFilterValuesFromTemplate);
            setTaskFilterValuesFromTemplate = false;
            taskFilterValuesFromTemplate = [];
        }
    }

    //TODO collect dynamic rows
    /*
    function getDataSource() {
        return $.find('[class^=Attributes_]').concat($.find('div[class^=wrapper-] input[class*=Attributes_]')).map(d => $(d).data('kendoDropDownTree'));
    }
    */
    function getDataSourceInFromBlock() {
        //console.log('concat 1', $.find('div[class^=wrapper-] input[class*=Attributes_]'));
        //console.log('concat 2',  $.find('input[id$=_IdFrom]'));
        return $.find('input[id$=_IdFrom]').concat($.find('div[class^=wrapper-] input[class*=Attributes_]')).map(d => $(d).data('kendoDropDownTree'));
    }
    function getDataSourceInToBlock() {
        return $.find('input[id$=_IdTo]').concat($.find('div[class^=wrapper-] input[class*=Attributes_]')).map(d => $(d).data('kendoDropDownTree'));
    }

    /*
    function getSelectedValues() {
        return getDataSource().map(d => d.value());
    }
    */
    function getSelectedValuesInFromBlock() {
        return getDataSourceInFromBlock().map(d => d.value());
    }
    function getSelectedValuesInToBlock() {
        return getDataSourceInToBlock().map(d => d.value());
    }

    /*
    function getAllUidsToDisable(arrValues) {
        var allNodes = getDataSource().map((d) => flattenDataSource(d)).flat();
        var filter = allNodes.filter((e) => { return arrValues.includes(e.value); });
        return filter.map((i) => { return i.uid; });
    }
    */
    function getAllUidsInFromBlockToDisable(arrValues) {
        var allNodes = getDataSourceInFromBlock().map((d) => flattenDataSource(d)).flat();
        var filter = allNodes.filter((e) => { return arrValues.includes(e.value); });
        return filter.map((i) => { return i.uid; });
    }
    function getAllUidsInToBlockToDisable(arrValues) {
        var allNodes = getDataSourceInToBlock().map((d) => flattenDataSource(d)).flat();
        var filter = allNodes.filter((e) => { return arrValues.includes(e.value); });
        return filter.map((i) => { return i.uid; });
    }

    function flattenDataSource(d) {
        return d.dataSource.data().map((v) => { return v.items; }).map((l1) => { return l1.map((l2) => { return l2; }); }).flat();
    }

    /*
    function blockAlreadySelectedNodes(arr) {
        var uidsToBlock = getAllUidsToDisable(arr);
        var nodes = getDataSource().map((d) => uidsToBlock.map((s) => d.treeview.findByUid(s))).flat();
        nodes.forEach(n => n.addClass('k-state-disabled'));
    }
    */
    function blockAlreadySelectedNodesInFromBlock(arr) {
        var uidsToBlock = getAllUidsInFromBlockToDisable(arr);
        var nodes = getDataSourceInFromBlock().map((d) => uidsToBlock.map((s) => d.treeview.findByUid(s))).flat();
        nodes.forEach(n => n.addClass('k-state-disabled'));
    }
    function blockAlreadySelectedNodesInToBlock(arr) {
        var uidsToBlock = getAllUidsInToBlockToDisable(arr);
        var nodes = getDataSourceInToBlock().map((d) => uidsToBlock.map((s) => d.treeview.findByUid(s))).flat();
        nodes.forEach(n => n.addClass('k-state-disabled'));
    }

    /*
    function clearTreeStates() {
        getDataSource().forEach((d) => d.tree.find('.k-item').removeClass('k-state-disabled'));
    }
    */
    function clearTreeStatesInFromBlock() {
        getDataSourceInFromBlock().forEach((d) => d.tree.find('.k-item').removeClass('k-state-disabled'));
    }
    function clearTreeStatesInToBlock() {
        getDataSourceInToBlock().forEach((d) => d.tree.find('.k-item').removeClass('k-state-disabled'));
    }

    /*
    function updateSelected(e) {
        var dataItem = e.sender.dataItem(e.node);
        var itemValue = Number(dataItem.value);
        if (isNaN(itemValue) || itemValue <= 0 ) {
            e.preventDefault();
            return;
        }
        clearTreeStates();
        var changedEntries = flattenDataSource($(e.node.closest('.k-treeview')).data().kendoTreeView).filter(v=>v.selected).map(v=>v.value);
        var arr = getSelectedValues();
        if (arr.includes(dataItem.value)) {
            e.preventDefault();
        }
        var filtered = arr.filter(v=>!changedEntries.includes(v));
        filtered.push(dataItem.value);
        blockAlreadySelectedNodes(filtered);
    }
    */
    function updateSelectedValuesInFromBlock(e) {
        var dataItem = e.sender.dataItem(e.node);
        var itemValue = Number(dataItem.value);
        if (isNaN(itemValue) || itemValue <= 0 ) {
            e.preventDefault();
            return;
        }
        clearTreeStatesInFromBlock();
        var changedEntries = flattenDataSource($(e.node.closest('.k-treeview')).data().kendoTreeView).filter(v=>v.selected).map(v=>v.value);
        var arr = getSelectedValuesInFromBlock();
        if (arr.includes(dataItem.value)) {
            e.preventDefault();
        }
        var filtered = arr.filter(v=>!changedEntries.includes(v));
        filtered.push(dataItem.value);
        blockAlreadySelectedNodesInFromBlock(filtered);
    }

    function updateSelectedValuesInToBlock(e) {
        var dataItem = e.sender.dataItem(e.node);
        var itemValue = Number(dataItem.value);
        if (isNaN(itemValue) || itemValue <= 0 ) {
            e.preventDefault();
            return;
        }
        clearTreeStatesInToBlock();
        var changedEntries = flattenDataSource($(e.node.closest('.k-treeview')).data().kendoTreeView).filter(v=>v.selected).map(v=>v.value);
        var arr = getSelectedValuesInToBlock();
        if (arr.includes(dataItem.value)) {
            e.preventDefault();
        }
        var filtered = arr.filter(v=>!changedEntries.includes(v));
        filtered.push(dataItem.value);
        blockAlreadySelectedNodesInToBlock(filtered);
    }

    /*
    function updateStates() {
        clearTreeStates();
        var arr = getSelectedValues();
        blockAlreadySelectedNodes(arr);
    }
    */
    function updateStatesInFromBlock() {
        clearTreeStatesInFromBlock();
        var arr = getSelectedValuesInFromBlock();
        blockAlreadySelectedNodesInFromBlock(arr);
    }
    function updateStatesInToBlock() {
        clearTreeStatesInToBlock();
        var arr = getSelectedValuesInToBlock();
        blockAlreadySelectedNodesInToBlock(arr);
    }

    /*
    function addSelectionHandlersForDropDowns() {
        getDataSource().forEach(function (d) {
                d.treeview.unbind('select', e => updateSelected(e));
                d.treeview.bind('select', e => updateSelected(e));
            }
        );
        updateStates();
        var clearButtons = $.find('[class^=clear-button-Attributes]').concat($.find('div[class^=wrapper-] [class^=clear-button]'));
        clearButtons.forEach(b => b.onclick = function () { updateStates(); });
        getDataSource().forEach(d => d.bind("onFiltered", function () { updateStates(); }));
    }
    */

    function addSelectionHandlersForDropDownsInFromBlock() {
        getDataSourceInFromBlock().forEach(function (d) {
                d.treeview.unbind('select', e => updateSelectedValuesInFromBlock(e));
                d.treeview.bind('select', e => updateSelectedValuesInFromBlock(e));
            }
        );
        updateStatesInFromBlock();
        //clear-button-Attributes_0__IdFrom
        var clearButtons = $.find("a[class^='clear-button-Attributes'][class*='IdFrom']").concat($.find('div[class^=wrapper-] [class^=clear-button]'));
        //console.log('clearButtons', $.find('[class^=clear-button-Attributes][class$=_IdFrom]'));
        //console.log('clearButtons', $.find('[class^=clear-button-Attributes_0__IdFrom] [class=k-button-icon]'));
        //console.log('clearButtons', clearButtons);
        clearButtons.forEach(b => b.onclick = function () { updateStatesInFromBlock(); });
        getDataSourceInFromBlock().forEach(d => d.bind("onFiltered", function () { updateStatesInFromBlock(); }));
    }

    function addSelectionHandlersForDropDownsInToBlock() {
        getDataSourceInToBlock().forEach(function (d) {
                d.treeview.unbind('select', e => updateSelectedValuesInToBlock(e));
                d.treeview.bind('select', e => updateSelectedValuesInToBlock(e));
            }
        );
        updateStatesInToBlock();
        var clearButtons = $.find("a[class^='clear-button-Attributes'][class*='IdTo']").concat($.find('div[class^=wrapper-] [class^=clear-button]'));
        clearButtons.forEach(b => b.onclick = function () { updateStatesInToBlock(); });
        getDataSourceInToBlock().forEach(d => d.bind("onFiltered", function () { updateStatesInToBlock(); }));
    }


    function fillAttributesMappingInfo(formObject) {
        if (!formObject) {
            return formObject;
        }
        var attributes = [];
        var formObjectKeys = Object.keys(formObject);
        for (var i = 0; i < currentRowNumber; i++) {
            var fromKey, toKey;
            //собираем атрибуты без динамически добавленных строк
            if (i < minCustomRowNumber) {
                var elementIdPart = `Attributes[${i}]`;
                fromKey = elementIdPart + '.IdFrom';
                toKey = elementIdPart + '.IdTo';
            }
            //собираем атрибуты из динамически добавленных строк
            else
            {
                fromKey = 'IdFrom_' + i;
                toKey = 'IdTo_' + i;
            }
            var nameFrom = formObjectKeys.find(key => key.includes(fromKey));
            var nameTo = formObjectKeys.find(key => key.includes(toKey));
            attributes.push({
                IdFrom: formObject[nameFrom] || 0,
                IdTo: formObject[nameTo] || 0
            });
            delete formObject[nameTo];
            delete formObject[nameFrom];
        }
        attributes = attributes.filter(function (val) { return !!val});
        return Object.assign({}, formObject, { Attributes: attributes });
    }


    function clearCustomLevels() {
        var existedCustomLevels = $("div[class^='wrapper-']");
        existedCustomLevels.each(function () {
            this.remove();
        });
        currentRowNumber = minCustomRowNumber;
    }




    async function fillForm(data) {
        $('#@(nameof(Model.TaskFilter))').data("kendoMultiSelect").value([]);
        $('#@(nameof(Model.ObjectChangeStatus))').data("kendoMultiSelect").value([]);
        clearCustomLevels();
        var customRowValues = [];
        currentRowNumber = 0;
        data.forEach(function (val) {
            var elementName = Object.keys(val)[0];
            var elementValue = val[elementName];
            if (elementName === '@(nameof(Model.RatingTour))') {
                var tourDropDownList = $('#' + elementName).data("kendoDropDownList");
                tourDropDownList.value(elementValue || '');
                tourDropDownList.trigger('change');
            }

            if (elementName.includes('@(nameof(Model.TaskFilter))')) {
                setTaskFilterValuesFromTemplate = true;
                taskFilterValuesFromTemplate.push([elementValue]);
            }

            if (elementName.includes('@(nameof(Model.ObjectChangeStatus))')) {
                var element = $('#@(nameof(Model.ObjectChangeStatus))').data("kendoMultiSelect");
                var currentValue = element.value();
                currentValue.push([elementValue]);
                element.value(currentValue);
            }

            if (elementName === '@(nameof(Model.CadastralBlockToParcel))' ||
                elementName === '@(nameof(Model.ParcelToBuilding))' ||
                elementName === '@(nameof(Model.CadastralBlockToBuilding))' ||
                elementName === '@(nameof(Model.ParcelToConstruction))' ||
                elementName === '@(nameof(Model.CadastralBlockToConstruction))' ||
                elementName === '@(nameof(Model.ParcelToUncomplited))' ||
                elementName === '@(nameof(Model.CadastralBlockToUncomplited))' ||
                elementName === '@(nameof(Model.BuildToFlat))') {
                $(`input[name='${elementName}']`).prop("checked", elementValue);
                if (elementValue) {
                    $(`input[name='${elementName}']`).trigger('change');
                }
            }

            if (elementName === '@nameof(Model.ParentCadastralNumberAttribute)') {
                var kendoDropDownTree = $(`#${elementName}`).data('kendoDropDownTree');
                kendoDropDownTree.value(elementValue || '');
                kendoDropDownTree.trigger('change');
                kendoDropDownTree.filterInput.val('');
                kendoDropDownTree.trigger('filtering', [true]);
            }

            if (elementName.startsWith('@nameof(Model.Attributes)')) {
                //приходит: Attributes_1 = {IdFrom: 1001, IdTo: 0}
                //преобразуем к Attributes_0__IdFrom и Attributes_0__IdTo
                //заполняем атрибуты без динамически добавленных строк
                if (currentRowNumber < minCustomRowNumber) {
                    var id = '@nameof(Model.Attributes)';
                    var index = elementName.split('_')[1] - 1;
                    var baseElementId = `${id}_${index}__`;
                    var elementFromId = baseElementId + '@nameof(AttributeMapping.IdFrom)';
                    var elementToId = baseElementId + '@nameof(AttributeMapping.IdTo)';
                    createTreeElementForAttribute(elementFromId, elementValue.IdFrom, customRowValues);
                    createTreeElementForAttribute(elementToId, elementValue.IdTo, customRowValues);
                }
                //заполняем атрибуты из динамически добавленных строк
                else {
                    customRowValues.push(elementValue);
                }
                currentRowNumber++;
            }
        });

        await addNewRows(minCustomRowNumber, currentRowNumber - minCustomRowNumber, customRowValues);
        updateStatesInFromBlock();
        updateStatesInToBlock();
    }

    function createTreeElementForAttribute(id, elementValue, customRowValues) {
        var predefinedKendoDropDownTree = $(`#${id}`).data('kendoDropDownTree');
        if (predefinedKendoDropDownTree) {
            predefinedKendoDropDownTree.value(elementValue || '');
            predefinedKendoDropDownTree.trigger('change');
            predefinedKendoDropDownTree.filterInput.val('');
            predefinedKendoDropDownTree.trigger('filtering', [true]);
        }
    }


    $(document).ready(function () {
        addSelectionHandlersForDropDownsInFromBlock();
        addSelectionHandlersForDropDownsInToBlock();

        $('#addRow').on('click', (e) => {
            e.preventDefault();
            addNewRow(currentRowNumber);
            currentRowNumber++;
        });
        $("#RatingTour").data('kendoDropDownList').bind('change', tourdropdownlist_select);
        $("#RatingTour").data('kendoDropDownList').bind('dataBound', tourdropdownlist_select);
        $('#@(nameof(Model.TaskFilter))').data('kendoMultiSelect').bind('dataBound', taskFiltermultiselect_dataBound);

        $('input[type=radio]').change(function() {
            $('input[type=radio]:checked').not(this).prop('checked', false);
        });

        $('#performInheritance').on('click',
            function() {
                var form = $('form');
                var formObject = Common.Functions.FormToObject(form);
                formObject['TaskFilter'] = $("#TaskFilter").data('kendoMultiSelect').value();
                var data = fillAttributesMappingInfo(formObject);
                $.post(form.attr('action'), data).done(function(response) {
                    if (response.Errors) {
                        var errors = getErrors(response.Errors);
                        Common.ShowError(errors);
                        return;
                    }
                    if (response.Success) {
                        Common.ShowMessage(response.Success);
                    }
                }).fail(function (response, textStatus, errorThrown) {
                    Common.ShowError(response.responseText);
                }).always(function () {
                    kendo.ui.progress($('body'), false);
                });
            });

        templateStorage.init(@((int) DataFormStorege.Inheritance), null, fillAttributesMappingInfo, fillForm);
    });

</script>
