@using KadOzenka.Web.Helpers
@using KadOzenka.Web.Models.GbuObject
@using ObjectModel.Directory
@using ObjectModel.Directory.Common
@model KadOzenka.Web.Models.GbuObject.HarmonizationViewModel

@using (Html.BeginForm("Harmonization", "GbuObject", FormMethod.Post))
{
    <div class="form-horizontal col-sm-12">
        <div class="form-group"></div>
        @(await Html.PartialAsync("Partials/PartialCharacteristic", new PartialCharacteristicViewModel
            {
                IdAttributeResult = Model.IdAttributeResult,
                IsNewAttribute = Model.IsNewAttribute,
                NameNewAttribute = Model.NameNewAttribute,
                RegistryId = Model.RegistryId,
                TypeNewAttribute = Model.TypeNewAttribute
            }))
        <div class="form-group">
            <div class="col-sm-12">
                @(Html.Kendo().RadioButtonFor(m => m.PropertyType).Label(PropertyTypes.Stead.GetEnumDescription()).Value((long)PropertyTypes.Stead))
                <span>&nbsp;</span>
                @(Html.Kendo().RadioButtonFor(m => m.PropertyType).Label(PropertyTypes.Building.GetEnumDescription()).Value((long)PropertyTypes.Building))
                <span>&nbsp;</span>
                @(Html.Kendo().RadioButtonFor(m => m.PropertyType).Label(PropertyTypes.Construction.GetEnumDescription()).Value((long)PropertyTypes.Construction))
                <span>&nbsp;</span>
                @(Html.Kendo().RadioButtonFor(m => m.PropertyType).Label("ОНС").Value((long)PropertyTypes.UncompletedBuilding))
                <span>&nbsp;</span>
                @(Html.Kendo().RadioButtonFor(m => m.PropertyType).Label(PropertyTypes.Pllacement.GetEnumDescription()).Value((long)PropertyTypes.Pllacement))
            </div>
        </div>
        <fieldset class="filterFieldset">
            <div class="form-group">
                <div class="col-sm-12">
                    <label>
                        @(Html.Kendo().CheckBoxFor(m => m.SelectAllObject))
                        Все объекты
                    </label>
                </div>
            </div>
            <div class="form-group">
                <div class="col-sm-2">
                    <label>
                        @(Html.Kendo().CheckBoxFor(m => m.IsValuesFilterUsed).Enable(!Model.SelectAllObject))
                        По значению
                    </label>
                </div>
                <div class="col-sm-2">
                    @Html.CustomLabelFor(m => m.IdAttributeFilter)
                </div>
                <div class="col-sm-4">
                    @Html.KendoDropDownListTreeWithButton(m => m.IdAttributeFilter, (IEnumerable<DropDownTreeItemModel>)ViewData["TreeAttributes"], isReadonly: true)
                </div>
                <div class="col-sm-1">
                    @Html.CustomLabelFor(m => m.ValuesFilter)
                </div>
                <div class="col-sm-3">
                    <select id="valuesFilter" style="width: 100%;"></select>
                </div>
            </div>
            <div class="form-group">
                <div class="col-sm-2">
                    <label>
                        @(Html.Kendo().CheckBoxFor(m => m.IsDataActualUsed).Enable(!Model.SelectAllObject))
                        Дата актуализации
                    </label>
                </div>
                <div class="col-sm-4">
                    @(Html.Kendo().DatePickerFor(m => m.DataActual).Enable(Model.IsDataActualUsed))
                </div>
            </div>
            <div class="form-group">
                <div class="col-sm-2">
                    <label>
                        @(Html.Kendo().CheckBoxFor(m => m.IsTaskFilterUsed).Enable(!Model.SelectAllObject))
                        Задания на оценку
                    </label>
                </div>
                <div class="col-sm-10">
                    @(Html.Kendo().MultiSelectFor(m => m.TaskFilter)
                        .DataTextField("Text")
                        .DataValueField("Value")
                        .Filter("contains")
                        .Enable(Model.IsTaskFilterUsed)
                        .DataSource(source =>
                        {
                            source.Read(read =>
                            {
                                read.Action("GetTasksData", "GbuObject");
                            })
                                .ServerFiltering(false);
                        }))
                </div>
            </div>
        </fieldset>
        <div id="levelsList">
            <fieldset class="attrLevelFieldset">
            <legend>1 уровень</legend>
            <div class="col-sm-2">
                @Html.CustomLabel("Характеристика")
            </div>
            <div class="col-sm-10">
                @Html.KendoDropDownListTreeWithButton(m => m.Level1Attribute, (IEnumerable<DropDownTreeItemModel>)ViewData["TreeAttributes"])
            </div>
        </fieldset>
        <fieldset class="attrLevelFieldset">
            <legend>2 уровень</legend>
            <div class="col-sm-2">
                @Html.CustomLabel("Характеристика")
            </div>
            <div class="col-sm-10">
                @Html.KendoDropDownListTreeWithButton(m => m.Level2Attribute, (IEnumerable<DropDownTreeItemModel>)ViewData["TreeAttributes"])
            </div>
        </fieldset>
        <fieldset class="attrLevelFieldset">
            <legend>3 уровень</legend>
            <div class="col-sm-2">
                @Html.CustomLabel("Характеристика")
            </div>
            <div class="col-sm-10">
                @Html.KendoDropDownListTreeWithButton(m => m.Level3Attribute, (IEnumerable<DropDownTreeItemModel>)ViewData["TreeAttributes"])
            </div>
        </fieldset>
        <fieldset class="attrLevelFieldset">
            <legend>4 уровень</legend>
            <div class="col-sm-2">
                @Html.CustomLabel("Характеристика")
            </div>
            <div class="col-sm-10">
                @Html.KendoDropDownListTreeWithButton(m => m.Level4Attribute, (IEnumerable<DropDownTreeItemModel>)ViewData["TreeAttributes"])
            </div>
        </fieldset>
        <fieldset class="attrLevelFieldset">
            <legend>5 уровень</legend>
            <div class="col-sm-2">
                @Html.CustomLabel("Характеристика")
            </div>
            <div class="col-sm-10">
                @Html.KendoDropDownListTreeWithButton(m => m.Level5Attribute, (IEnumerable<DropDownTreeItemModel>)ViewData["TreeAttributes"])
            </div>
        </fieldset>
        <fieldset class="attrLevelFieldset">
            <legend>6 уровень</legend>
            <div class="col-sm-2">
                @Html.CustomLabel("Характеристика")
            </div>
            <div class="col-sm-10">
                @Html.KendoDropDownListTreeWithButton(m => m.Level6Attribute, (IEnumerable<DropDownTreeItemModel>)ViewData["TreeAttributes"])
            </div>
        </fieldset>
        <fieldset class="attrLevelFieldset">
            <legend>7 уровень</legend>
            <div class="col-sm-2">
                @Html.CustomLabel("Характеристика")
            </div>
            <div class="col-sm-10">
                @Html.KendoDropDownListTreeWithButton(m => m.Level7Attribute, (IEnumerable<DropDownTreeItemModel>)ViewData["TreeAttributes"])
            </div>
        </fieldset>
        <fieldset class="attrLevelFieldset">
            <legend>8 уровень</legend>
            <div class="col-sm-2">
                @Html.CustomLabel("Характеристика")
            </div>
            <div class="col-sm-10">
                @Html.KendoDropDownListTreeWithButton(m => m.Level8Attribute, (IEnumerable<DropDownTreeItemModel>)ViewData["TreeAttributes"])
            </div>
        </fieldset>
        <fieldset class="attrLevelFieldset">
            <legend>9 уровень</legend>
            <div class="col-sm-2">
                @Html.CustomLabel("Характеристика")
            </div>
            <div class="col-sm-10">
                @Html.KendoDropDownListTreeWithButton(m => m.Level9Attribute, (IEnumerable<DropDownTreeItemModel>)ViewData["TreeAttributes"])
            </div>
        </fieldset>
            <fieldset class="attrLevelFieldset">
                <legend>10 уровень</legend>
                <div class="col-sm-2">
                    @Html.CustomLabel("Характеристика")
                </div>
                <div class="col-sm-10">
                    @Html.KendoDropDownListTreeWithButton(m => m.Level10Attribute, (IEnumerable<DropDownTreeItemModel>)ViewData["TreeAttributes"])
                </div>
            </fieldset>
        </div>
        <div class="form-group">
            <div class="col-sm-2">
                <a href="#" class="k-button-icon k-button" id="addRow"><span class='fas fa-plus-circle'></span></a>
            </div>
        </div>
        <div class="form-group">
            <div class="col-sm-7">
                @( await Html.PartialAsync("/Views/Shared/PartialTemplateStorage.cshtml", new TemplateStorageViewModel
                    {
                        ControllerName = "GbuObject",
                        ActionName = "GetTemplatesHarmonization"
                    }))
            </div>
            <div class="col-sm-1 col-sm-offset-1">
                <button style="float: right" id="performHarmonization" class="k-button" type="button">Выполнить</button>
            </div>
            <div class="col-sm-3">
                <a class="k-button k-state-disabled" id="goToProcessBtn" href="" target="_blank" style="float: right"><span>Перейти к процессу</span></a>
            </div>
        </div>
    </div>
}

@section styles {
    <style>
        fieldset.attrLevelFieldset {
            border: 1px solid #c8c6cc;
            border-radius: 6px;
            margin-bottom: 10px;
            padding-bottom: 10px;
        }

            fieldset.attrLevelFieldset legend {
                font-size: initial;
                font-style: italic;
                margin: 0;
            }

        fieldset.filterFieldset {
            border: 1px solid #656565;
            margin-bottom: 10px;
            padding-bottom: 10px;
            padding-top: 10px;
        }

        #valuesFilter-list {
            display: none !important;
        }

        .filter {
            padding-top: 5px;
        }
    </style>
}


@section scripts {
<script type="text/x-kendo-template" id="templateRow">
	<div class="wrapper-#: rowNumber #" style="display: none">
	</div>
</script>
    
<script src="~/js/custom-validation.js"></script>
<script type="text/javascript">
    function fillForm(data) {
        $('#valuesFilter').getKendoMultiSelect().value([]);
        $('#@(nameof(Model.TaskFilter))').data("kendoMultiSelect").value([]);
		data.forEach(function (val) {
			if (Object.keys(val)[0].includes('Level') || Object.keys(val)[0].includes('IdAttributeResult') ||
				 Object.keys(val)[0].includes('IdAttributeFilter')) {
                $('#' + Object.keys(val)[0]).data('kendoDropDownTree').value(val[Object.keys(val)[0]] || '');
			    $('#' + Object.keys(val)[0]).data('kendoDropDownTree').trigger('change');
			}

			if (Object.keys(val)[0].includes('ValuesFilter')) {
				var widget = $('#valuesFilter').getKendoMultiSelect();
				var dataSource = widget.dataSource;
				var newItem = {
					valuesFilter: val[Object.keys(val)[0]],
					valuesFilterName: val[Object.keys(val)[0]]
				};

				dataSource.add(newItem);
				var newValue = newItem.valuesFilter;
				widget.value(widget.value().concat([newValue]));
			}

		    if (Object.keys(val)[0] === '@(nameof(Model.SelectAllObject))') {
		        if (!!val[Object.keys(val)[0]]) {
		            $('#@(nameof(Model.SelectAllObject))').prop("checked", true);
		            selectAllObjectChanged(true);
		            return;
		        }
		        $('#@(nameof(Model.SelectAllObject))').prop("checked", false);
		        selectAllObjectChanged(false);
		    }

		    if (Object.keys(val)[0] === '@(nameof(Model.IsDataActualUsed))') {
		        if (!!val[Object.keys(val)[0]]) {
		            $('#@(nameof(Model.IsDataActualUsed))').prop("checked", true);
		            changeDataActualAvailability(true);
		            return;
		        }
		        $('#@(nameof(Model.IsDataActualUsed))').prop("checked", false);
		        changeDataActualAvailability(false);
		    }

		    if (Object.keys(val)[0] === '@(nameof(Model.IsTaskFilterUsed))') {
		        if (!!val[Object.keys(val)[0]]) {
		            $('#@(nameof(Model.IsTaskFilterUsed))').prop("checked", true);
		            changeTaskFilterAvailability(true);
		            return;
		        }
		        $('#@(nameof(Model.IsTaskFilterUsed))').prop("checked", false);
		        changeTaskFilterAvailability(false);
		    }

		    if (Object.keys(val)[0] === '@(nameof(Model.IsValuesFilterUsed))') {
		        if (!!val[Object.keys(val)[0]]) {
		            $('#@(nameof(Model.IsValuesFilterUsed))').prop("checked", true);
		            changeValuesFilterAvailability(true);
		            return;
		        }
		        $('#@(nameof(Model.IsValuesFilterUsed))').prop("checked", false);
		        changeValuesFilterAvailability(false);
		    }

            if (Object.keys(val)[0] === '@(nameof(Model.DataActual))') {
                $('#@(nameof(Model.DataActual))').data('kendoDatePicker').value(kendo.parseDate(val[Object.keys(val)[0]]));
            }

            if (Object.keys(val)[0].includes('@(nameof(Model.TaskFilter))')) {
                var currentValue = $('#@(nameof(Model.TaskFilter))').data("kendoMultiSelect").value();
                currentValue.push([val[Object.keys(val)[0]]]);
                $('#@(nameof(Model.TaskFilter))').data("kendoMultiSelect").value(currentValue);
		    }

			if (Object.keys(val)[0] === 'PropertyType') {
				var id = '#PropertyType_' + val[Object.keys(val)[0]];
				$(id).prop("checked", true);
			}

		});
        var isSelectAllObjectsChecked =
            $('#SelectAllObject').prop('checked');
        selectAllObjectChanged(isSelectAllObjectsChecked);
    }

    function changeDataActualAvailability(isDataActualUsed) {
        if (isDataActualUsed) {
            $('#@(nameof(Model.DataActual))').data('kendoDatePicker').enable(true);
        } else {
            $('#@(nameof(Model.DataActual))').data('kendoDatePicker').value(null);
            $('#@(nameof(Model.DataActual))').data('kendoDatePicker').enable(false);
        }
    }

    function changeValuesFilterAvailability(isValuesFilterUsed) {
        if (isValuesFilterUsed) {
            $('#@(nameof(Model.IdAttributeFilter))').data('kendoDropDownTree').enable(true);
            $('a.clear-button-@(nameof(Model.IdAttributeFilter))').removeClass('k-state-disabled');
            $('#valuesFilter').data("kendoMultiSelect").enable(true);
        } else {
            $('#@(nameof(Model.IdAttributeFilter))').data('kendoDropDownTree').value('');
            $('#@(nameof(Model.IdAttributeFilter))').data('kendoDropDownTree').enable(false);
            $('a.clear-button-@(nameof(Model.IdAttributeFilter))').addClass('k-state-disabled');

            $('#valuesFilter').data("kendoMultiSelect").value([]);
            $('#valuesFilter').data("kendoMultiSelect").enable(false);
        }
    }

    function changeTaskFilterAvailability(isTaskFilterUsed) {
        if (isTaskFilterUsed) {
            $('#@(nameof(Model.TaskFilter))').data("kendoMultiSelect").enable(true);
        } else {
            $('#@(nameof(Model.TaskFilter))').data("kendoMultiSelect").value([]);
            $('#@(nameof(Model.TaskFilter))').data("kendoMultiSelect").enable(false);
        }
    }

    function selectAllObjectChanged(checked) {
        if (checked) {
            $('#IsValuesFilterUsed').prop('checked', false);
            $('#IsValuesFilterUsed').attr("disabled", true);
            $('#IsDataActualUsed').prop('checked', false);
            $('#IsDataActualUsed').attr("disabled", true);
            $('#IsTaskFilterUsed').prop('checked', false);
            $('#IsTaskFilterUsed').attr("disabled", true);

            changeDataActualAvailability(false);
            changeValuesFilterAvailability(false);
            changeTaskFilterAvailability(false);
        } else {
            $('#IsValuesFilterUsed').attr("disabled", false);
            $('#IsDataActualUsed').attr("disabled", false);
            $('#IsTaskFilterUsed').attr("disabled", false);
        }
    }


    var rowNumber = 1;
    function addNewRow() {
        kendo.ui.progress($('body'), true);
        var data = [{ rowNumber }];
        var templateContent = $("#templateRow").html();
        var template = kendo.template(templateContent);
        var result = kendo.render(template, data);
        $("#levelsList").append(result);
        var classWrapper = ".wrapper-" + rowNumber;
        var url = "@Url.Action("GetRowWithNewLevel", "GbuObject")";
        $(classWrapper).load(url, { rowNumber: rowNumber }, function (response) {
            $(classWrapper).show(500);
            rowNumber++;
            kendo.ui.progress($('body'), false);
        });
    }


    function addCustomLevels(formObject) {
        if (!formObject) {
            return formObject;
        }
        var customLevels = [];
        for (var i = 1; i < rowNumber; i++) {
            var attributeName = 'AttributeId_' + i;
            var levelName = 'LevelNumber_' + i;
            customLevels.push({
                LevelNumber: formObject[levelName],
                AttributeId: formObject[attributeName]
            });
            delete formObject[attributeName];
        }
        return Object.assign({}, formObject, { AdditionalCustomLevels: customLevels });
    }




    $(document).ready(function () {
        $('#addRow').on('click', addNewRow);

		    $('#SelectAllObject').bind("change", function () {
		        selectAllObjectChanged(this.checked);
		    });
		    $('#IsValuesFilterUsed').bind("change", function () {
		        changeValuesFilterAvailability(this.checked);
		    });
		    $('#IsDataActualUsed').bind("change", function () {
		        changeDataActualAvailability(this.checked);
		    });
		    $('#IsTaskFilterUsed').bind("change", function () {
		        changeTaskFilterAvailability(this.checked);
            });

            templateStorage.init(@((int)DataFormStorege.Harmonization), "SaveTemplateHarmonizationObject", "GbuObject", "GetTemplatesOneGroup", "GbuObject", fillForm);


			function onDataBound(e) {
				$('.k-multiselect .k-input').unbind('keyup');
				$('.k-multiselect .k-input').on('keyup', onClickEnter);
			}
			function onClickEnter(e) {
				if (e.keyCode === 13) {
					var widget = $('#valuesFilter').getKendoMultiSelect();
					var dataSource = widget.dataSource;
					var input = $('.k-multiselect .k-input');
					var value = input.val().trim();
					if (!value || value.length === 0) {
						return;
					}
					var newItem = {
						valuesFilter: value,
						valuesFilterName: value
					};

					dataSource.add(newItem);
					var newValue = newItem.valuesFilter;
					widget.value(widget.value().concat([newValue]));
				}
			}
			$("#valuesFilter").kendoMultiSelect({
				dataTextField: "valuesFilterName",
				dataValueField: "valuesFilter",
				dataSource: {
					data: []
				},
                dataBound: onDataBound,
                enable: @(Model.SelectAllObject ? "false" : "true")
			});

			$('#performHarmonization').on('click',
				function() {
					kendo.ui.progress($('body'), true);
					var form = $('form');
					var formObject = Common.Functions.FormToObject(form);
                    formObject.ValuesFilter = $("#valuesFilter").data("kendoMultiSelect").value();
                    formObject.TaskFilter = $('#@(nameof(Model.TaskFilter))').data("kendoMultiSelect").value();
                    formObject = addCustomLevels(formObject);
                    $.post(form.attr('action'), formObject).done(function(response) {
						if (response.Errors) {
                            var errors = getErrors(response.Errors);
							Common.ShowError(errors);
							return;
						}
						if (response.Success) {
							if (response.idResultAttribute && updateResultControl) {
								updateResultControl(response.idResultAttribute);
							}
                            Common.ShowMessage(response.Success);
                            if (response.QueueId) {
                                var hrefForJournal = "/RegistersView/CoreLongProcessQueue?Transition=1&97500100=" + response.QueueId;
                                var goToProcessBtn = $("#goToProcessBtn");
                                goToProcessBtn.removeClass('k-state-disabled');
                                goToProcessBtn.attr('href', hrefForJournal);
                            }
						}
					}).fail(function (response, textStatus, errorThrown) {
						Common.ShowError(response.responseText);
					}).always(function () {
					    kendo.ui.progress($('body'), false);
					});
				});
		});
    </script>
}