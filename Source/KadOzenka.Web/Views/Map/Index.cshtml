@model KadOzenka.Web.Models.MarketObject.MapObjectDto

@{
    ViewData["Title"] = "Рыночная оценка объектов недвижимости города Москвы";
}

<head>
    <meta charset="utf-8" />
</head>

<body>
    <div id="container" class="MapContainer">
        <div id="data" class="Data">
            <div id="dataContentController" class="DataContentController">
                <div id="toDashboardButton" class="Button ToDashBoard" onclick="BackTo()">
                    <div class="ButtonContainer">
                        <div class="Image" style="background-image:url(/MapIcons/back-arrow.svg)"></div>
                        <div>К выбору объектов аналогов</div>
                    </div>
                </div>
            </div>
            <div id="dataContentContainer" class="DataContentContainer"></div>
        </div>
        <div id="map" class="Map"></div>
    </div>
</body>

@section scripts {
    <script src="~/MapScripts/commonFunctions.js" charset="utf-8"></script>
    <script src="~/MapScripts/eventListeners.js" charset="utf-8"></script>
    <script src="~/MapScripts/HTMLEditor.js" charset="utf-8"></script>
    <script src="~/MapScripts/requests.js" charset="utf-8"></script>
    <script src="~/MapScripts/config.js" charset="utf-8"></script>
    <script src="~/MapScripts/initializeMap.js" charset="utf-8"></script>
    <script src="~/MapScripts/widgets.js" charset="utf-8"></script>
    <script src="~/MapScripts/clustering.js" charset="utf-8"></script>

    <script>
        var objectLatitude = @(Model.Latitude.HasValue ? Model.Latitude.ToString().Replace(',', '.') : "undefined");
        var objectLongitude = @(Model.Longitude.HasValue ? Model.Longitude.ToString().Replace(',', '.') : "undefined");
        if (objectLatitude && objectLongitude) {
            const params = new window.URLSearchParams(window.location.search);
            if (!params.has('center')) {
                params.set('center', [objectLatitude, objectLongitude]);
            }
            if (!params.has('zoom')) {
                params.set('zoom', MapWithDefinedObjectSettings.zoom);
            }

            if (window.history.pushState) {
                const newUrl = new URL(window.location.href);
                newUrl.search = params;
                window.history.pushState({ path: newUrl.href }, '', newUrl.href);
            }
        }

        window.onpopstate = function (event) {
            debugger;
            const params = new window.URLSearchParams(window.location.search);
            if (params.has('center') && params.has('zoom') && map) {
                map.setCenter(params.get('center').split(","),
                    params.get('zoom'),
                    {
                        checkZoomRange: false
                    });
            }
        };
    </script>
}

@section styles {
    <link rel="stylesheet" href="~/MapStyles/style.css" />
    <link rel="stylesheet" href="~/MapStyles/elemens.css" />
}
