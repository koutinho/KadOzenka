@using KadOzenka.Web.Helpers
@using KadOzenka.Web.Models.DataImportByTemplate
@using KadOzenka.Web.Models.GbuObject
@using ObjectModel.Gbu
@using ObjectModel.Market

<form id="importForm">
    @if((long)ViewBag.MainRegisterId == OMMainObject.GetRegisterId())
    {
        @Html.RenderHelpButton(true)
    }
    <ul id="upload_panelbar" class="panelBar" style="margin-top: 10px;">
        @(await Html.PartialAsync("~/Views/DataImportByTemplate/Partials/DataImportMain.cshtml"))

    <li id="partialDocument" data-expand>
            <div>
                <div class="form-horizontal col-sm-12">
                    <div class="form-group">
                        @(await Html.PartialAsync("~/Views/GbuObject/Partials/PartialDocument.cshtml", new PartialDocumentViewModel()))
                    </div>
                </div>
            </div>
        </li>
    </ul>
</form>

@section styles {
	<link rel="stylesheet" href="~/css/jquery.fancybox.min.css" />
	<link rel="stylesheet" href="~/css/data-import-by-template.css" />
}

@section scripts {
	<script src="~/js/jquery.fancybox.min.js"></script>
	<script src="~/js/data-import-by-template.js"></script>

    <script type="text/x-kendo-tmpl" id="template">
		<div class="matchItem k-widget">
			<div>
				<span>
					<span><input type="checkbox" #=IsKey ? checked='checked' : '' # onclick="checkboxChange(this)" data-bind="checked: IsKey" 
                                  #=IsReadOnly ? disabled='disabled' : '' #/></span>
					<span>#:ColumnName#</span>
					<span>-</span>
					<span>#:AttributeDescription#</span>
					<span #=IsReadOnly ? 'style="display: none"' : '' #>
                        <a class="k-button k-delete-button deleteButton" href="\\#">
                            <span class="k-icon k-i-close"></span>
                        </a>
                    </span>
				</span>
			</div>
		</div>
	</script>

    <script>
		var dataSource = new kendo.data.DataSource({
			data: [ ]
		});

		$(document).ready(function () {
            var mainRegisterId = @((long)ViewBag.MainRegisterId);
            const registerViewId = '@((string)ViewBag.RegisterViewId)';
            const dataCountForBackgroundLoading = @((int)ViewBag.DataCountForBackgroundLoading);
            const isForMarketObjects = '@((long)ViewBag.MainRegisterId == MarketPlaceBusiness.Common.Consts.RegisterId)' == 'True';
            const isForGbuObjects = '@((long)ViewBag.MainRegisterId == OMMainObject.GetRegisterId())' == 'True';

            initFilter();
            initMatchBtn(isForGbuObjects);

            $("#loadButton").kendoButton({
				enable: true,
				click: function (e) {
					kendo.ui.progress($('#importForm'), true);
					$("#loadButton").data('kendoButton').enable(false);
					var listView = $("#listView").data('kendoListView');
					var data = listView.dataSource.data();
					var columns = $.map(data, function (item) {
						return {
							ColumnName: item.ColumnName,
							AttributeId: item.AttributeId,
							IsKey: item.IsKey
						};
                    });

                    var file = $('#files').data('kendoUpload').getFiles()[0];
                    var isBackgroundDownload = $('#backgroundDownloadCheckbox').is(":checked");
                    var documentObject = Common.Functions.FormToObject($('#partialDocument'));

                    if (!isForMarketObjects && documentObject.IsNewDocument == "False" && !documentObject.IdDocument) {
                        kendo.ui.progress($('#importForm'), false);
                        $("#loadButton").data('kendoButton').enable(true);
                        Common.ShowError("Поле Документ обязательно для заполнения");
                        return;
                    }

                    var formData = new FormData();
					formData.append("MainRegisterId", @((long)ViewBag.MainRegisterId));
                    formData.append("File", file.rawFile);
                    formData.append("RegisterViewId", registerViewId);
                    formData.append("IsBackgroundDownload", isBackgroundDownload);
                    formData.append("@nameof(ImportGbuObjectModel.Document).@nameof(PartialDocumentViewModel.ModelPrefix)", documentObject.ModelPrefix);
                    formData.append("@nameof(ImportGbuObjectModel.Document).@nameof(PartialDocumentViewModel.IdDocument)", documentObject.IdDocument);
                    formData.append("@nameof(ImportGbuObjectModel.Document).@nameof(PartialDocumentViewModel.NewDocumentRegNumber)", documentObject.NewDocumentRegNumber);
                    formData.append("@nameof(ImportGbuObjectModel.Document).@nameof(PartialDocumentViewModel.NewDocumentName)", documentObject.NewDocumentName);
                    formData.append("@nameof(ImportGbuObjectModel.Document).@nameof(PartialDocumentViewModel.NewDocumentDate)", documentObject.NewDocumentDate);
                    formData.append("@nameof(ImportGbuObjectModel.Document).@nameof(PartialDocumentViewModel.NewDocumentApproveDate)", documentObject.NewDocumentApproveDate);
                    formData.append("@nameof(ImportGbuObjectModel.Document).@nameof(PartialDocumentViewModel.NewDocumentChangeDate)", documentObject.NewDocumentChangeDate);
                    formData.append("@nameof(ImportGbuObjectModel.Document).@nameof(PartialDocumentViewModel.IsNewDocument)", documentObject.IsNewDocument);
                    for (var i = 0; i !== columns.length; i++) {
						formData.append("columns[" + i + "].ColumnName", columns[i].ColumnName);
						formData.append("columns[" + i + "].AttributeId", columns[i].AttributeId);
						formData.append("columns[" + i + "].IsKey", columns[i].IsKey);
					}
                    $.ajax({
                        type: 'POST',
                        url: '@Url.Action("ImportDataFromExcel", "DataImportByTemplate")',
                        data: formData,
                        contentType: false,
                        processData: false,
                        success: function (data) {
                            if (data.Success) {
                                Common.ShowMessage(data.Message);
                            }
                            else {
                                Common.ShowError(data.Message);
                            }
                            if (data.ImportDataLogId) {
                                var hrefForJournal = "/RegistersView/DataImporter?Transition=1&80100100=" + data.ImportDataLogId;
                                var goToJournalBtn = $("#goToJournalBtn");
                                goToJournalBtn.removeClass('k-state-disabled');
                                goToJournalBtn.attr('href', hrefForJournal);
                            }
                            if (data.ResultFileName) {
                                window.location = '@Url.Action("DownloadExcelResultFile", "DataImportByTemplate")' +
                                    "?resultFileName=" +
                                    data.ResultFileName;
                            }
                        },
                        error: function (response) {
                            Common.ShowError(response.responseText);
                        },
                        complete: function (data) {
                            kendo.ui.progress($('#importForm'), false);
                            $("#loadButton").data('kendoButton').enable(true);
                        }
                    });
                }
			});

            initComparisonBlock();

            initColumnsFromExcelBlock();

            initAttributesTree();

			$('#upload_panelbar')
				.kendoPanelBar()
				.data('kendoPanelBar')
				.expand('li[data-expand]');

			$.ajax({
                type: 'GET',
                @if ((long)ViewBag.MainRegisterId == 100)
                {<text>
                url: '/CoreUi/GetAttributes',
                data: { registerViewId: registerViewId },
                </text>}
                else
                {
                {<text>
                url: '/DataImportByTemplate/GetTreeAttributes',
                </text>}
                }
				success: function (data) {
                    if (data) {
                        var filtered = data;
                        // При вызове для объектов аналогов
                        if (registerViewId==='MarketObjects') {
                            filtered = data.filter(function (x) {
                                // Оставляем только атрибуты объектов аналогов (Реестр №100)
                                return (x.ItemId == 100) || (x.AttributeId < '10100000' && x.AttributeId != '0');
                            });
                        }
						$("#treeview").data('kendoTreeView').setDataSource(getAttributesDataSource(filtered));
                    }
                },
				error: function (response) {
                    Common.ShowError(response.responseText);
                }
			});

            if (isForMarketObjects)
                $("#partialDocument").hide();
            $('#files').kendoUpload({
                multiple: false,
                localization: {
                    select: 'Загрузить Файл',
                  clearSelectedFiles: 'Очистить',
                    uploadSuccess: "Файл загружен"

                },
                async: {
                    autoUpload: isForMarketObjects,
                    saveUrl: '@Url.Action("ParseFileColumns", "DataImportByTemplate")'
                },
                select: function (e) {
                    if (isForMarketObjects)
                        return;
                    var upload = e.sender;
                    Common.UI.ShowConfirm({
                        title: 'Подтверждение',
                        content: 'Для корректной загрузки данных соблюдайте следующие требования к загружаемому файлу:' +
                            '<br/> 1 столбец - № п/п' +
                            '<br/> 2 столбец - Кадастровый номер',
                        captionYes: "Загрузить",
                        captionNo: "Отменить",
                        onSuccess: function () {
                            upload.upload();
                        },
                        onFail: function () {
                            upload.clearAllFiles();
                            var window = $(this).closest('[data-role=window]').data('kendoWindow');
                            window.close();
                            window.destroy();
                        }
                    });
                },
                validation: {
                    allowedExtensions: ['.xls', '.xlsx']
                },
                success: function (e) {
                    if (e.operation === "upload") {
                        var columnNames = e.response.ColumnsNames;
                        var dataCount = e.response.DataCount;
                        var excelColumnsListBox = $("#columnsListBox").data("kendoListBox");
                        excelColumnsListBox.setDataSource(columnNames);
                        if (dataCount > dataCountForBackgroundLoading) {
                            $("#backgroundDownloadCheckbox").prop('checked', true);
                        } else {
                            $("#backgroundDownloadCheckbox").prop('checked', false);
                        }
                        resetData();
                        if (!isForMarketObjects && excelColumnsListBox.items() != null) {
                            var numberColumn = excelColumnsListBox.items()[0];
                            var cadastralNumberColumn = excelColumnsListBox.items()[1];
                            excelColumnsListBox.enable(numberColumn, false);
                            excelColumnsListBox.enable(cadastralNumberColumn, false);
                            var cadastralNumberData = excelColumnsListBox.dataItem(cadastralNumberColumn);
                            var matchingListView = $("#listView").data('kendoListView');
                            matchingListView.dataSource.add({
                                IsKey: true,
                                IsReadOnly: true,
                                ColumnName: cadastralNumberData.Name,
                                ColumnId: cadastralNumberData.Id,
                                AttributeDescription: 'Кадастровый номер',
                                AttributeId: 20000200
                            });
                        }
                    }
                },
                error: function (e) {
                    $("#columnsListBox").data("kendoListBox").setDataSource([]);
                    resetData();
                    if (e.XMLHttpRequest.responseText) {
                        Common.ShowError(e.XMLHttpRequest.responseText);
                    } else {
                        Common.ShowError("Не удалось загрузить выбранный файл");
                    }
                },
                clear: function (e) {
                    $("#columnsListBox").data("kendoListBox").setDataSource([]);
                    resetData();
                }
			}).data('kendoUpload');
        });
    </script>
}