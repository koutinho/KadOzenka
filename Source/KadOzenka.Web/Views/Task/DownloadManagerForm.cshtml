@model KadOzenka.Web.Models.Task.DownloadManagerForm

@{
    if (ViewBag.isPartialView)
    {
        Layout = null;
    }
}

@{
    var formatData = new List<SelectListItem>
{
        new SelectListItem("Xlsx", "Xlsx"),
        new SelectListItem("Xls", "Xls"),
        new SelectListItem("Csv", "Csv"),
        new SelectListItem("Dbf", "Dbf"),
    };

    var rnd = new Random().Next();
}
<style>
	fieldset {
		border-radius: 2px;
		padding: 15px;
	}

	.k-checkbox-wrapper:not(.not-margin-15) {
		margin-top: -15px;
	}

	.inline-flex {
		display: inline-flex;
		margin-bottom: 5px;
	}

	#filtersListView_@rnd {
		border: none
	}

    .tree-border {
        border: rgb(206, 206, 210) solid 1px !important;
        border-radius: 5px;
    }
    .k-widget.k-listbox {
        width: 100%;
        height: 480px;
    }

    #buttons_@rnd {
        display: inline-grid;
        margin-top: 100px;
    }


    #buttons_@rnd .k-button {
        border-radius: 5px !important;
        padding: 10px;
        margin-left: 0 !important;
        margin-bottom: 10px;
    }
    #editName_@rnd {
        margin-top: 30px;
    }

    .zeroMargimBottom {
        margin-bottom: 0;
    }
</style>

@using (Html.BeginForm("DownloadForm", "Dashboard", FormMethod.Post, new { @id = $"form_{rnd}" }))
{
    @Html.HiddenFor(m => m.LayoutId)
    @Html.HiddenFor(m => m.RegisterViewId)
    @Html.HiddenFor(m => m.RegisterId)
    <div class="form-horizontal col-sm-12">
        <div class="form-group"></div>
        <div class="form-group">
            <div class="col-sm-2">
                @Html.CustomLabelFor("Наименование")
            </div>
            <div class="col-sm-10">
                @Html.Kendo().TextBox().Name($"{nameof(Model.Name)}_{rnd}").Value(Model.Name)
            </div>
        </div>
        <div class="form-group">
            <div class="col-sm-2">
                @Html.CustomLabelFor("Формат")
            </div>
            <div class="col-sm-10">
                @Html.Kendo().DropDownList().Name($"{nameof(Model.Type)}_{rnd}").BindTo(formatData).DataTextField("Text").DataValueField("Value").Value(Model.Type ?? "")
            </div>
        </div>

        <fieldset>
            <legend class="zeroMargimBottom">Колонки</legend>
            <div class="form-group">
                <div class="col-sm-6" style="padding-right: 0; max-width: 400px;">
                    <div>
                        <label class="control-label">Доступные атрибуты</label>
                    </div>
                    <input type="text" id="search_@rnd" class="k-textbox" placeholder="поиск" style="width: 100%" />
                    <div id="attributesTreeView_@rnd" class="tree-border" style="height: 450px"></div>
                </div>
                <div class="col-sm-1" style="text-align: center; padding: 0">
                    <div id="buttons_@rnd">
                        <button class="k-button k-button-icon" id="toUp_@rnd">
                            <span class="fas fa-caret-up"></span>
                        </button>
                        <button class="k-button k-button-icon" id="toDown_@rnd">
                            <span class="fas fa-caret-down"></span>
                        </button>
                        <button class="k-button k-button-icon" id="toSelect_@rnd">
                            <span class="fas fa-caret-right"></span>
                        </button>
                        <button class="k-button k-button-icon" id="toUnSelect_@rnd">
                            <span class="fas fa-caret-left"></span>
                        </button>
                        <button class="k-button k-button-icon" id="selectAll_@rnd">
                            <span class="fas fa-forward"></span>
                        </button>
                        <button class="k-button k-button-icon" id="unSelectAll_@rnd">
                            <span class="fas fa-backward"></span>
                        </button>
                        <button class="k-button k-button-icon" id="editName_@rnd">
                            <span class="fas fa-edit"></span>
                        </button>
                    </div>
                </div>
                <div class="col-sm-5" style="padding-left: 0; max-width: 400px;">
                    <div class="">
                        <label class="control-label">Выбранные атрибуты</label>
                    </div>
                    <div id="selectedAttributesListBox_@rnd"></div>
                </div>
            </div>
        </fieldset>
        <fieldset>
            <legend class="zeroMargimBottom">Фильтры</legend>
            <div class="form-group">
                <div class="col-sm-12">
                    <button class="k-button filters_@rnd" type="button">
                        Настройка фильтров
                    </button>
                </div>
            </div>
            <div class="form-group">
                <div class="col-sm-12">
                    <div style="max-height: 350px;overflow-y:scroll; padding-top: 15px">
                        <div class="inline-flex">
                            <span class="k-checkbox-wrapper not-margin-15">
                                <input type="checkbox" class="k-checkbox" />
                                <span class="k-checkbox-label checkbox-span" id="checkall_@rnd"></span>
                            </span>
                            <span class="checkbox">Все</span>
                        </div>
                        <div id="filtersListView_@rnd"></div>
                    </div>
                </div>
            </div>
        </fieldset>
        <div class="form-group"></div>
        <div class="form-group">
            <div class="col-sm-12">
                <button type="button" style="float: right" id="addDownload_@rnd" class="k-button">Сформировать выгрузку</button>
            </div>
        </div>
    </div>
}
<div id="windowFilter"></div>

<script type="text/x-kendo-tmpl" id="myTemplate">
    <div class="item" data-value="${Value}">
        <div class="inline-flex">
            <span class="k-checkbox-wrapper not-margin-15">
                <input type="checkbox" class="k-checkbox" />
                <span class="k-checkbox-label checkbox-span click-span_@rnd"></span>
            </span>
            <span class="checkbox">#:Text#</span>
        </div>

    </div>
</script>

<script id="editorNameTemplate_@rnd" type="text/html">
    <li class="changeName">
        <input type="text" class="k-textbox" value="" />
        <button type="button" class="k-button k-button-icon" id="renameAttribute_@rnd"><span class="fas fa-check"></span></button>
        <button type="button" class="k-button k-button-icon" id="cancelRename_@rnd"><span class="fas fa-times"></span></button>
    </li>
</script>

<script>


	var filters = @Html.Raw(Json.Serialize(Model.Filters)) || [];

	var dataSource_@rnd = new kendo.data.DataSource({
		transport: {
			read: {
				url: "@Url.Action("GetRegisterQryFilters","Dashboard", new { registerViewId = Model.RegisterViewId, registerId = Model.RegisterId})".replace(/&amp;/gi, "&"),
				dataType: "json"
			}
		}
	});

	var windowFilter = $('#windowFilter').kendoWindow({
		title: "Настройка фильтров",
		visible: false,
		resizable: false,
		iframe: true,
		appendTo: 'body',
		close: function () {
			if ($('.scrollable').length > 0) {
				$('html,body').animate({
					scrollTop: $('.scrollable').offset().top
				}, 'slow');
			}
			dataSource_@(rnd).read();
            filtersListView.refresh();
			$('#checkall_@rnd').parent().find('input').prop('checked', false);
		}
	}).data('kendoWindow');


	function filtersCheckboxEventBinding() {
		$('#checkall_@rnd').off('click');
		$('#checkall_@rnd').on('click',
			function(e) {
				if ($(this).parent().find('input').prop('checked')) {
					$(this).parent().find('input').prop('checked', false);
					$('.click-span_@rnd').parent().find('input').prop('checked', false);
				} else {
					$(this).parent().find('input').prop('checked', true);
					$('.click-span_@rnd').parent().find('input').prop('checked', true);
				}
			});
	}

    var attributesTreeView;
    var selectedAttributesListBox;
	var filtersListView;

    var isAttributesTreeViewLoaded;
	var isSelectedAttributesListBoxLoaded;
    $(function () {


		$('#addDownload_@rnd').on('click', function() {
			var form = $("#form_@rnd");
			kendo.ui.progress($('.scrollable'), true);
			var valid = form.setValidator();

			if (!valid.validate())    {
				var message = '<div style="text-align:center;">';
				valid.errors().forEach(function(item, i, arr) {
					message += item + '<br>';
				});
				message += '</div>';
				Common.UI.ShowDialog({
					content: message,
					icon: 'info',
					showCloseBtn: true
				});
				kendo.ui.progress($('.scrollable'), false);
				return;
			}

            var formObject = Common.Functions.FormToObject(form);
            formObject['Name'] = $('#@(nameof(Model.Name))_@rnd').val();
            formObject['Type'] = $('#@(nameof(Model.Type))_@rnd').data("kendoDropDownList").value();

            setOrdinalItems();
            var columnSettings = [];
            selectedAttributesListBox.dataSource.data().forEach(function(el) {
                columnSettings.push({ AttributeId: el.id, Ordinal: el.Ordinal, HeaderName: el.name });
            });

			var filters = [];
            var filtersListViewContainer = $('#filtersListView_@rnd');
            if (filtersListViewContainer) {
                $.map(filtersListViewContainer.find('input'),
					function(input) {
						if ($(input).prop('checked')) {
							filters.push($(input).parents('div.item').data('value'));
						}
					});
			}

			var data = {
                columnSettings,
				filters
			};
			Object.assign(data, data, formObject);


			$.post(form.attr('action'), data).done(function (response) {
				if (response.message) {
					Common.ShowMessage(response.message);
				}
			}).fail(function (xhr, message, error) {
				Common.ShowError(`Операция прервана. Обратитесь к администратору. Ошибка: ${error}`);
			}).always(function () {
				kendo.ui.progress($('.scrollable'), false);
			});
		});


		$('.filters_@rnd').on('click',
			function () {
				windowFilter.refresh("/RegistersView/CoreRegisterQry?RegisterViewId=@Model.RegisterViewId&FilterRegisterId=@Model.RegisterId");
				windowFilter.maximize();
				windowFilter.open();
			});


        filtersListView = $("#filtersListView_@rnd").kendoListView({
            dataSource: dataSource_@rnd,
			template: kendo.template($("#myTemplate").html()),
			selectable: true,

			dataBound: function(e) {
				filtersCheckboxEventBinding();
				if (filters.length > 0) {
					filters.forEach(function (item) {
						$('div.item[data-value="' + item + '"]').find('input').prop('checked', true);
					});
				}

				$('.click-span_@rnd').on('click', function (e) {
					e.preventDefault();

					if ($(this).parent().find('input').prop('checked')) {
						$(this).parent().find('input').prop('checked', false);
					} else {
						$(this).parent().find('input').prop('checked', true);
					}

				});
			}
        }).data('kendoListView');

		var treeDataSource = new kendo.data.HierarchicalDataSource({
			transport: {
				read: {
					url: '@Url.Action("GetTreeAttributesForSettingLayout", "CoreRegisterLayout")',
					data: { registerViewId: '@Model.RegisterViewId', showAllAttributes: "false" },
					contentType: 'application/json; charset=utf-8',
					dataType: 'json'
				}
			},
			schema: {
				model: {
					id: 'id',
					hasChildren: 'hasChildren',
					children: 'items'
				}
			}
		});
        attributesTreeView = $('#attributesTreeView_@rnd').kendoTreeView({
			dataSource: treeDataSource,
			dataTextField: 'name',
            loadOnDemand: false,
			checkboxes: {
				checkChildren: true
			},
			select: function (e) {
				if (e.node === undefined) return;

                var item = attributesTreeView.dataItem(e.node);

				if (item.hasChildren === true) {
                    attributesTreeView.collapse('.k-item[aria-expanded="true"]');
                    attributesTreeView.expand(e.node);
				}
                setTimeout(function () { attributesTreeView.select(null); });
			},
            dataBound: function () {
                $('#attributesTreeView_@rnd').kendoTooltip({
					filter: '[role="group"] > [role="treeitem"] .k-in',
					showAfter: 500,
					content: function (e) {
                        var treeItem = attributesTreeView.dataItem(e.target);
						var textFields = 'Тип&nbsp;данных';
                        var valueFiedls = treeItem.dataTypeName;

                        if (treeItem.referenceNam && treeItem.referenceNam.length > 0) {
							textFields += '<br>Справочник';
                            valueFiedls += '<br>' + treeItem.referenceNam;
						}
						if (treeItem.isPrimaryKey == true) {
							textFields += '<br>Главный&nbsp;ключ';
							valueFiedls += '<br>Да';
						}
						if (treeItem.foreignKey && treeItem.foreignKey.length > 0) {
							textFields += '<br>Внешник&nbsp;ключ&nbsp;к';
							valueFiedls += '<br>' + treeItem.foreignKey;
						}
						if (treeItem.descriptionAttribute && treeItem.descriptionAttribute.length > 0) {
							textFields += '<br>Описание';
							valueFiedls += '<br>' + treeItem.descriptionAttribute;
						}
						if (treeItem.isVirtual == true) {
							textFields += '<br>Виртуальная&nbsp;колонка';
							valueFiedls += '<br>Да';
						}
						if (treeItem.columnDbName && treeItem.columnDbName.length > 0) {
							textFields += '<br>Колонка&nbsp;таблицы';
							valueFiedls += '<br>' + treeItem.columnDbName;
						}

						var content =
							'<div style="text-align: left;">' +
								'<div style="font-weight: bold; padding: 2px 0px;">' + treeItem.name + ' (' + treeItem.id + ')</div>' +
								'<div style="display: flex; line-height: 1.6;">' +
								'<div style="padding-right: 10px;">' + textFields + '</div>' +
								'<div style="flex: 1;">' + valueFiedls + '</div>'  +
								'</div>' +
								'</div>';

						return content;
					}
				});

                isAttributesTreeViewLoaded = true;
                checkDubleData();
                attributesTreeView.expand(".k-item");
            }
		}).data('kendoTreeView');

        selectedAttributesListBox = $('#selectedAttributesListBox_@rnd').kendoListBox({
            width: '100%',
            height: '320px',
            dataTextField: "name",
            dataValueField: "id",
            draggable: true,
            dropSources: ['attributesTreeView_@rnd'],
            dataSource: {
                type: "json",
                transport: {
                    read: {
                        url: '@Url.Action("GetLayoutColumns", "CoreRegisterLayout")' + '?layoutId=@Model.LayoutId'
                    }
                }
            },
            dataBound: function (e) {
                isSelectedAttributesListBoxLoaded = true;
                checkDubleData();
            }
		}).data("kendoListBox");

		$('#search_@rnd').off('input');
        $('#search_@rnd').on('input', function (e) {
            var value = $(this)[0].value;

            attributesTreeView.dataSource.filter({
                field: 'name',
                operator: 'contains',
                value: value
            });

            if (value.length > 0) {
                attributesTreeView.select(null);
                attributesTreeView.expand('.k-item');
            } else {
                attributesTreeView.select(null);
                attributesTreeView.collapse('.k-item');
            }
		});

		$("#buttons_@rnd").kendoButtonGroup();

        $('#editName_@rnd').off('click');
        $('#editName_@rnd').on('click', function (e) {
            e.preventDefault();
            if (selectedAttributesListBox.select().length > 0) {
                selectedAttributesListBox.select().addClass('changed');
                selectedAttributesListBox.select().hide();
                selectedAttributesListBox.select().after($('#editorNameTemplate_@rnd').html());
                selectedAttributesListBox.wrapper.find('li.changeName input').val(selectedAttributesListBox.select().text());
                subscribeToRenameButtons();
                selectedAttributesListBox.select(null);
            }
		});


        $('#toSelect_@rnd').off('click');
        $('#toSelect_@rnd').on('click', function (e) {
            e.preventDefault();
            var attributes = [];
            getCheckedNodes(attributesTreeView.dataSource.view(), attributes);
            var data = attributesTreeView.dataSource.data();

            $('#attributesTreeView_@rnd .k-checkbox').prop('indeterminate', false);
            $('#attributesTreeView_@rnd li.k-item').prop('aria-checked', false);

            attributes.forEach(function (el) {
                var rec = Object.assign({}, el);

                delete rec['uid'];
                if (!rec.hasChildren) {
                    selectedAttributesListBox.dataSource.add(rec);
                }
                removeItemAll(data, el.name);
            });
		});


        $('#toUnSelect_@rnd').off('click');
        $('#toUnSelect_@rnd').on('click', function (e) {
            e.preventDefault();
            var el = selectedAttributesListBox.select();
            var item = selectedAttributesListBox.dataItem(el);
            if (item) {
                var rec = Object.assign({}, item);
                selectedAttributesListBox.dataSource.remove(item);

                rec['checked'] = false;
                rec['hasChildren'] = false;
                rec['name'] = rec['AttributeName'] || rec['name'];
                var parentNode = findOrCreateParentNode(rec.parentElement);
                attributesTreeView.append(rec, parentNode);
            }
		});


        $('#selectAll_@rnd').off('click');
        $('#selectAll_@rnd').on('click', function (e) {
            e.preventDefault();
            kendo.ui.progress($('.scrollable'), true);
            setTimeout(() => {
                $.each($('#attributesTreeView_@rnd .k-item'),
                    function (i, el) {
                        var uid = $(el).data('uid');
                        var element = attributesTreeView.findByUid(uid);
                        attributesTreeView.dataItem(element).set("checked", true);
                    });

                var attributes = [];
                getCheckedNodes(attributesTreeView.dataSource.view(), attributes);

                attributes.forEach(function (el) {
                    var rec = Object.assign({}, el);
                    delete rec['uid'];
                    if (!rec.hasChildren) {
                        selectedAttributesListBox.dataSource.add(rec);
                    }
                });
                var dSource = new kendo.data.HierarchicalDataSource({
                    data: []
                });
                attributesTreeView.setDataSource(dSource);
                kendo.ui.progress($('.scrollable'), false);
            }, 0);

		});


        $('#unSelectAll_@rnd').off('click');
        $('#unSelectAll_@rnd').on('click', function (e) {
            e.preventDefault();
            kendo.ui.progress($('.scrollable'), true);
            setTimeout(() => {
                var dataItems = selectedAttributesListBox.dataItems() || [];

                dataItems.forEach(function (el) {
                    var rec = Object.assign({}, el);
                    selectedAttributesListBox.dataSource.remove(el);

                    rec['checked'] = false;
                    rec['hasChildren'] = false;
                    rec['name'] = rec['AttributeName'] || rec['name'];
                    delete rec['uid'];
                    var parentNode = findOrCreateParentNode(rec.parentElement);
                    attributesTreeView.append(rec, parentNode);
                });

                kendo.ui.progress($('.scrollable'), false);
            }, 0);
        });


        $('#toUp_@rnd').off('click');
        $('#toUp_@rnd').on('click', function (e) {
            e.preventDefault();
            if (selectedAttributesListBox.select().length > 0) {
                if (selectedAttributesListBox.select().first().index() > 0) {
                    var item = selectedAttributesListBox.select().first();
                    selectedAttributesListBox.reorder(item, item.index() - 1);
                } else {
                    selectedAttributesListBox.select(null);
                }
            }
        });

        $('#toDown_@rnd').off('click');
        $('#toDown_@rnd').on('click', function (e) {
            e.preventDefault();
            if (selectedAttributesListBox.select().length > 0) {
                if (selectedAttributesListBox.select().first().index() < selectedAttributesListBox.items().length - 1) {
                    var item = selectedAttributesListBox.select().first();
                    selectedAttributesListBox.reorder(item, item.index() + 1);
                } else {
                    selectedAttributesListBox.select(null);
                }
            }
        });
	});

    function getCheckedNodes(nodes, checkedNodes) {
        for (var i = 0; i < nodes.length; i++) {
            if (nodes[i].checked) {
                checkedNodes.push(nodes[i]);
            }

            if (nodes[i].hasChildren) {
                getCheckedNodes(nodes[i].children.view(), checkedNodes);
            }
        }
    }


    function checkDubleData() {
        if (isAttributesTreeViewLoaded && isSelectedAttributesListBoxLoaded) {
            selectedAttributesListBox.dataSource.data().forEach(function(item) {
                removeItemAll(attributesTreeView.dataSource.data(), item.AttributeName);
            });
        }
	}


    function removeItemAll(arr, value) {
        var i = 0;
        while (i < arr.length) {
            if (arr[i].items && arr[i].items.length > 0) {
                arr[i].items = removeItemAll(arr[i].items, value);
            }
            if (arr[i].name === value) {
                arr.splice(i, 1);
            } else {
                ++i;
            }
        }
        return arr;
	}

    function subscribeToRenameButtons() {

        selectedAttributesListBox.wrapper.find('#renameAttribute_@rnd').on('click',
            function (e) {
                e.preventDefault();
                var el = selectedAttributesListBox.wrapper.find('.changed');
                if (el) {
                    var dataItem = selectedAttributesListBox.dataSource.getByUid(el.data('uid'));
                    dataItem.name = selectedAttributesListBox.wrapper.find('li.changeName input').val();
                    el.text(dataItem.name);
                    selectedAttributesListBox.wrapper.find('li.changeName').remove();
                    el.removeClass('changed');
                    el.show();
                }
            });
        selectedAttributesListBox.wrapper.find('#cancelRename_@rnd').on('click',
            function (e) {
                e.preventDefault();
                var el = selectedAttributesListBox.wrapper.find('.changed');
                if (el) {
                    selectedAttributesListBox.wrapper.find('li.changeName').remove();
                    el.removeClass('changed');
                    el.show();
                }
            });

        selectedAttributesListBox.wrapper.find('li.changeName input').on('keydown', function (e) {
            e.stopPropagation();
        });

	}


    function findOrCreateParentNode(parentNode) {
        var node,
            nodeObj = attributesTreeView.dataItems().find(item => item.hasChildren === true && item.id.toString() === parentNode.id.toString());

        if (nodeObj) {
            node = attributesTreeView.findByUid(nodeObj.uid);
        }
        if (!node) {
            node = attributesTreeView.append(parentNode);
        }
        return node;
	}


    function setOrdinalItems() {
        var liList = $('#selectedAttributesListBox_@rnd').parents('.k-listbox').find('li') || [];

        $.each(liList, function (i, el) {
            var uid = $(el).data('uid');
            var item = selectedAttributesListBox.dataSource.getByUid(uid);
            item['Ordinal'] = i;
        });
    }
</script>
