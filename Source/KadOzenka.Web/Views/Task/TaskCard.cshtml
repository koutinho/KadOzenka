@using KadOzenka.Web.Models.DataImport
@using ObjectModel.Directory
@using Platform.Web.Models.CoreAttachment
@model KadOzenka.Web.Models.Task.TaskEditModel

@using (Html.BeginForm("TaskCard", "Task", FormMethod.Post))
{
    @Html.HiddenFor(m => m.Id)
    <ul id="ls_panelbar" class="panelbar">
        <li id="SectionMainData" data-expand>
            <span>Основные данные</span>
            <div class="form-horizontal col-sm-12" style="padding: 1%">
                <div class="form-group">
                    <div class="col-sm-2">
                        @Html.CustomLabelFor(m => m.CreationDate)
                    </div>
                    <div class="col-sm-4">
                        @Html.KendoDatePickerFor(m => m.CreationDate, format: "dd.MM.yyyy hh:mm:ss", isReadonly: false)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-sm-2">
                        @Html.CustomLabelFor(m => m.EstimationDate)
                    </div>
                    <div class="col-sm-4">
                        @Html.KendoDatePickerFor(m => m.EstimationDate, format: "dd.MM.yyyy", isReadonly: false)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-sm-2">
                        @Html.CustomLabelFor(m => m.IncomingDocumentRegNumber)
                    </div>
                    <div class="col-sm-4">
                        @Html.KendoTextBoxFor(m => m.IncomingDocumentRegNumber, isReadonly: false)
                    </div>
                    <div class="col-sm-2">
                        @Html.CustomLabelFor(m => m.IncomingDocumentDate)
                    </div>
                    <div class="col-sm-4">
                        @Html.KendoDatePickerFor(m => m.IncomingDocumentDate)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-sm-2">
                        @Html.CustomLabelFor(m => m.IncomingDocumentApproveDate)
                    </div>
                    <div class="col-sm-4">
                        @Html.KendoDatePickerFor(m => m.IncomingDocumentApproveDate, isReadonly: false)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-sm-2">
                        @Html.CustomLabelFor(m => m.IncomingDocumentDescription)
                    </div>
                    <div class="col-sm-10">
                        @Html.TextAreaFor(x => x.IncomingDocumentDescription, new { @class = "k-textbox", style = "resize: none;", rows = 5, cols = 30 })
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-sm-2">
                        @Html.CustomLabelFor(m => m.NoteType)
                    </div>
                    <div class="col-sm-4">
                        @Html.KendoEnumDropDownListFor(m => m.NoteType, isReadonly: false, withoutNull: true)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-sm-2">
                        @Html.CustomLabelFor(m => m.TourId)
                    </div>
                    <div class="col-sm-4">
                        @(Html.Kendo().DropDownListFor(m => m.TourId)
                                      .DataTextField("Text")
                                      .DataValueField("Value")
                                      .DataSource(data => data.Read("GetRatingTours", "Task"))
                        )
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-sm-2">
                        @Html.CustomLabelFor(m => m.StatusCode)
                    </div>
                    <div class="col-sm-4">
                        @Html.KendoEnumDropDownListFor(m => m.StatusCode, isReadonly: false, withoutNull: true)
                    </div>
                </div>
                <div class="form-group">
                </div>
                <div class="form-group">
                    <div class="col-sm-2">
                        @Html.CustomLabel("Импортированных объектов", false, "totalImportObjectsLabel")
                    </div>
                    <div class="col-sm-10">
                        @(Html.Kendo().ProgressBar()
                              .Name("totalImportObjectsProgressBar")
                              .Type(ProgressBarType.Value)
                              .Min(0)
                              .Max(Model.PossibleTotalCountOfObjects ?? 0)
                              .Value(Model.CommonNumberOfImportedObjects ?? 0))
                    </div>
                </div>
                <div class="form-group">
                </div>
                <div class="form-group">
                    <div class="col-sm-12">
                        <button style="float: right" class="k-button" id="save" type="button">Сохранить</button>
                    </div>
                </div>
            </div>
        </li>
        
        <li id="SectionDataComparing" data-expand>
            <span>Сравнение данных</span>
            <div class="form-horizontal col-sm-12" style="padding: 1%">
                <div id="dataComparingSection">
                    @if (Model.TaskDataComparingModel == null)
                    {
                        <span style='color: red;'>Не удалось получить данные о сравнении. @(!string.IsNullOrEmpty(Model.TaskDataComparingError) ? Model.TaskDataComparingError : "Проверьте корректность введенных данных в задании на оценку.")</span>
                    }
                    else
                    {
                        @await Html.PartialAsync("~/Views/Task/Partials/PartialTaskCardDataComparing.cshtml",
                            Model.TaskDataComparingModel)
                    }
                </div>
            </div>
        </li>

        <li id="SectionAttachment" data-expand>
            <span>Образы</span>
            <div class="form-group col-sm-12">
                <div>
                    @await Html.PartialAsync("~/Views/CoreAttachment/AttachPartialGrid.cshtml",
                        new AttachmentPartialModel {ObjectId = (int) Model.Id, RegisterId = Model.RegisterId})
                </div>
            </div>
        </li>

        <li id="SectionXMLFiles" data-expand>
            <span id="filesBlockLabel">Файлы</span>
            <div class="form-group col-sm-12">
                <div class="form-horizontal col-sm-12">
                    <input name="files" id="files" type="file" aria-label="files" />
                </div>
            </div>
            <div class="form-group col-sm-12">
                <div style="padding: 1%;">
                    @(Html.Kendo().Grid<DataImporterLayoutDto>()
                                                  .Name("Grid")
                                                  .Columns(columns =>
                                                  {
                                                      columns.Bound(p => p.Id)
                                                          .ClientTemplate("<div style='text-align:center'> <a href='" +
                                                                          Url.Action("DownloadImportDataFile", "DataImport", new { importId = "#= Id #" }, null) +
                                                                          "' class='k-icon k-i-download'></a> </div>")
                                                          .Title("Файл").Width(80);
                                                      columns.Bound(p => p.DateCreated).Format("{0:dd.MM.yyyy hh:mm:ss}");
                                                      columns.Bound(p => p.UserName);
                                                      columns.Bound(p => p.DataFileName);
                                                      columns.Template("<div class='progress'></div>").Title("Загрузка объектов");
                                                      columns.Bound(p => p.NumberOfImportedObjects).Hidden();
                                                      columns.Bound(p => p.TotalNumberOfObjects).Hidden();
                                                  })
                                                  .Navigatable()
                                                  .Pageable()
                                                  .Sortable()
                                                  .Events(ev => ev.DataBound("dataBound"))
                                                  .Scrollable(s => s.Height("auto"))
                                                  .DataSource(s =>
                                                      s.Ajax().Read(read => read.Action("GetXmlDocuments", "Task", new { taskId = Model.Id }).Type(HttpVerbs.Get)).PageSize(5)
                                                  )
                    )
                </div>
            </div>
        </li>
    </ul>
}



@section styles {
    <link rel="stylesheet" href="~/css/jquery.fancybox.min.css" />
    <style>
        #ls_panelbar {
            width: 99% !important;
        }

        .hidden {
            display: none;
        }

        .progress {
            width: 97%;
            margin-bottom: 0;
        }

        .k-progressbar .k-state-selected {
            background-color: rgb(137, 215, 215);
            border-color: rgb(82, 163, 163);
        }

        .k-progressbar .k-complete {
            background-color: rgb(137, 215, 215);
            border-color: rgb(82, 163, 163);
        }

        .k-progressbar .k-progress-status-wrap {
            text-align: center;
        }

        .totalImportObjectsLabel {
            font-weight: bold !important;
        }

        #totalImportObjectsProgressBar {
            font-weight: bold !important;
            font-size: medium;
            width: 100%;
            /*min-height: 2.5em;*/
        }

            #totalImportObjectsProgressBar .k-progress-status {
                /*vertical-align: sub;*/
            }
    </style>
}

@section scripts {
    <script src="~/js/jquery.fancybox.min.js"></script>
    <script src="~/js/custom-validation.js"></script>
    <script type="text/javascript">
        $(document).ready(function() {
            var panelbar = $('#ls_panelbar').kendoPanelBar().data('kendoPanelBar');
            panelbar.expand('li[data-expand]');
            $("#navigation-menu a").mPageScroll2id({
                highlightSelector: "#navigation-menu a"
            });

            var files = $('#files').kendoUpload({
                multiple: true,
                localization: {
                    select: 'Выбрать файлы'
                },
                validation: {
                    allowedExtensions: ['.xml', '.zip', '.rar']
                },
                async: {
                    autoUpload: true,
                    saveUrl: '@Url.Action("ImportGknFromTask", "GknDataImport")'
                },
                upload: function (e) {
                    e.data = { taskId: '@Model.Id' }
                },
                success: function (e) {
                    if (e.operation === "upload") {
                        Common.ShowMessage("Загрузка успешно добавлена в очередь, по результатам загрузки будет отправлено сообщение");
                    }
                },
                error: function (e) {
                    if (e.XMLHttpRequest.responseText) {
                        Common.ShowError(e.XMLHttpRequest.responseText);
                    } else {
                        Common.ShowError("При загрузке выбранного файла возникла ошибка (подробно в журнале ошибок)");
                    }
                }
            }).data('kendoUpload');

            $('#save').on('click',
                function () {
                    kendo.ui.progress($('body'), true);
                    var form = $('form');
                    var formObject = Common.Functions.FormToObject(form);

                    $.post(form.attr('action'), formObject).done(function (response) {
                        if (response.Errors) {
                            var errors = getErrors(response.Errors);
                            Common.ShowError(errors);
                            return;
                        }

                        if (response.Success) {
                            Common.ShowMessage(response.Success);
                        }
                    }).fail(function (response, textStatus, errorThrown) {
                        Common.ShowError(response.responseText);
                    }).always(function () {
                        kendo.ui.progress($('body'), false);
                    });
                });
        });



        function dataBound(e) {
            var grid = this;
            grid.tbody.find(".progress").each(function(e) {
                var row = $(this).closest("tr");
                var model = grid.dataItem(row);
                if (model.TotalNumberOfObjects) {
                    $(this).kendoProgressBar({
                        type: "value",
                        showStatus: true,
                        min: 0,
                        max: model.TotalNumberOfObjects,
                        change: function (e) {
                            var status = e.value + "/" + e.sender.options.max;
                            this.progressStatus.text(status);
                            this.progressWrapper.css({
                                "text-align": "center"
                            });
                        }
                    });
                    $(this).data("kendoProgressBar").value(model.NumberOfImportedObjects ? model.NumberOfImportedObjects : 0);
                } else {
                    $(this).addClass('hidden');
                }
            });
        }
    </script>
}