@using System.Collections
@using KadOzenka.Dal.Enum
@using KadOzenka.Dal.GbuObject.Dto
@using KadOzenka.Web.Controllers
@using KadOzenka.Web.Helpers
@using KadOzenka.Web.Models.GbuObject
@using KadOzenka.Web.Models.Task
@using ObjectModel.Directory
@using ObjectModel.Directory.Common
@model KadOzenka.Web.Models.Task.ExportAttributesModel

@using (Html.BeginForm("TransferAttributes", "Task", FormMethod.Post))
{
    <div class="form-horizontal col-sm-12" style="margin-top: 10px; padding: 2%">
        @Html.HiddenFor(x => x.CreateAttributes)

        <div class="form-group">
            <div class="col-sm-2">
                @Html.CustomLabel("Тур оценки")
            </div>
            <div class="col-sm-4">
                @(Html.Kendo().DropDownListFor(x => x.RatingTour)
                    .DataTextField("Text")
                    .DataValueField("Value"))
            </div>
        </div>

        <div class="form-group">
            <div class="col-sm-2">
                @Html.CustomLabelFor(x => x.TaskFilter)
            </div>
            <div class="col-sm-10">
                @(Html.Kendo().MultiSelectFor(m => m.TaskFilter)
                    .DataTextField("Text")
                    .DataValueField("Value")
                    .Filter(FilterType.Contains))
            </div>
        </div>
        
        <div class="form-group">
            <div class="col-sm-2">
                @Html.CustomLabelFor(x => x.ObjectChangeStatus)
            </div>
            <div class="col-sm-10">
                @(Html.Kendo().MultiSelectFor(m => m.ObjectChangeStatus)
                    .BindTo(KadOzenka.Web.Helpers.EnumExtensions.GetSelectList(typeof(ObjectChangeStatus)))
                    .Filter(FilterType.Contains))
            </div>
        </div>

        <div class="form-group">
            <div class="col-sm-9 col-sm-offset-2">
                <div class="radio-inline">
                    @(Html.Kendo().CheckBoxFor(x => x.IsZu)
                        .Label(ObjectTypeExtended.Zu.GetEnumDescription()))
                </div>
                <div class="radio-inline">
                    @(Html.Kendo().CheckBoxFor(x => x.IsOks)
                        .Label(ObjectTypeExtended.Oks.GetEnumDescription()))
                </div>
            </div>
        </div>
        
        <div class="form-group" id="additionalFiltersForOks" style="display: none; margin-left: 6%;">
            <div class="col-sm-9 col-sm-offset-2">
                <div class="radio-inline">
                    @(Html.Kendo().CheckBoxFor(x => x.OksAdditionalFilters.IsBuildings)
                        .Label(PropertyTypes.Building.GetEnumDescription()))
                </div>
                <div class="radio-inline">
                    @(Html.Kendo().CheckBoxFor(x => x.OksAdditionalFilters.IsPlacements)
                        .Label(PropertyTypes.Pllacement.GetEnumDescription())
                        .HtmlAttributes(new
                        {
                            onchange = "showAdditionalFiltersForPlacements();"
                        }))
                </div>
                <div class="radio-inline">
                    @(Html.Kendo().CheckBoxFor(x => x.OksAdditionalFilters.IsUncompletedBuildings)
                        .Label(PropertyTypes.UncompletedBuilding.GetEnumDescription()))
                </div>
                <div class="radio-inline">
                    @(Html.Kendo().CheckBoxFor(x => x.OksAdditionalFilters.IsConstructions)
                        .Label(PropertyTypes.Construction.GetEnumDescription()))
                </div>
            </div>
            <div class="col-sm-9 col-sm-offset-3" id="additionalFiltersForPlacement" style="display: none; margin-top: 1%;">
                <div class="radio-inline">
                    @(Html.Kendo().CheckBoxFor(x => x.OksAdditionalFilters.IsLivePlacement)
                        .Label(PlacementPurpose.Live.GetEnumDescription()))
                </div>
                <div class="radio-inline">
                    @(Html.Kendo().CheckBoxFor(x => x.OksAdditionalFilters.IsNotLivePlacement)
                        .Label(PlacementPurpose.NotLive.GetEnumDescription()))
                </div>
            </div>
        </div>

        <div>
            <div class="form-group attributes-list">
                <table id="attributesList" class="col-sm-10 col-sm-offset-2">
                    <thead>
                        <tr>
                            <th>@Html.Label("Ценообразующие факторы")</th>
                            <th>@Html.Label("Характеристики объектов")</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>@Html.KendoDropDownListTreeWithButton(m => m.IdAttributeKO1, (IEnumerable<DropDownTreeItemModel>)ViewData["KoAttributes"])</td>
                            <td>@Html.KendoDropDownListTreeWithButton(m => m.IdAttributeGBU1, (IEnumerable<DropDownTreeItemModel>)ViewData["TreeAttributes"])</td>
                        </tr>
                        <tr>
                            <td>@Html.KendoDropDownListTreeWithButton(m => m.IdAttributeKO2, (IEnumerable<DropDownTreeItemModel>)ViewData["KoAttributes"])</td>
                            <td>@Html.KendoDropDownListTreeWithButton(m => m.IdAttributeGBU2, (IEnumerable<DropDownTreeItemModel>)ViewData["TreeAttributes"])</td>
                        </tr>
                        <tr>
                            <td>@Html.KendoDropDownListTreeWithButton(m => m.IdAttributeKO3, (IEnumerable<DropDownTreeItemModel>)ViewData["KoAttributes"])</td>
                            <td>@Html.KendoDropDownListTreeWithButton(m => m.IdAttributeGBU3, (IEnumerable<DropDownTreeItemModel>)ViewData["TreeAttributes"])</td>
                        </tr>
                        <tr>
                            <td>@Html.KendoDropDownListTreeWithButton(m => m.IdAttributeKO4, (IEnumerable<DropDownTreeItemModel>)ViewData["KoAttributes"])</td>
                            <td>@Html.KendoDropDownListTreeWithButton(m => m.IdAttributeGBU4, (IEnumerable<DropDownTreeItemModel>)ViewData["TreeAttributes"])</td>
                        </tr>
                        <tr>
                            <td>@Html.KendoDropDownListTreeWithButton(m => m.IdAttributeKO5, (IEnumerable<DropDownTreeItemModel>)ViewData["KoAttributes"])</td>
                            <td>@Html.KendoDropDownListTreeWithButton(m => m.IdAttributeGBU5, (IEnumerable<DropDownTreeItemModel>)ViewData["TreeAttributes"])</td>
                        </tr>
                        <tr>
                            <td>@Html.KendoDropDownListTreeWithButton(m => m.IdAttributeKO6, (IEnumerable<DropDownTreeItemModel>)ViewData["KoAttributes"])</td>
                            <td>@Html.KendoDropDownListTreeWithButton(m => m.IdAttributeGBU6, (IEnumerable<DropDownTreeItemModel>)ViewData["TreeAttributes"])</td>
                        </tr>
                        <tr>
                            <td>@Html.KendoDropDownListTreeWithButton(m => m.IdAttributeKO7, (IEnumerable<DropDownTreeItemModel>)ViewData["KoAttributes"])</td>
                            <td>@Html.KendoDropDownListTreeWithButton(m => m.IdAttributeGBU7, (IEnumerable<DropDownTreeItemModel>)ViewData["TreeAttributes"])</td>
                        </tr>
                        <tr>
                            <td>@Html.KendoDropDownListTreeWithButton(m => m.IdAttributeKO8, (IEnumerable<DropDownTreeItemModel>)ViewData["KoAttributes"])</td>
                            <td>@Html.KendoDropDownListTreeWithButton(m => m.IdAttributeGBU8, (IEnumerable<DropDownTreeItemModel>)ViewData["TreeAttributes"])</td>
                        </tr>
                        <tr>
                            <td>@Html.KendoDropDownListTreeWithButton(m => m.IdAttributeKO9, (IEnumerable<DropDownTreeItemModel>)ViewData["KoAttributes"])</td>
                            <td>@Html.KendoDropDownListTreeWithButton(m => m.IdAttributeGBU9, (IEnumerable<DropDownTreeItemModel>)ViewData["TreeAttributes"])</td>
                        </tr>
                        <tr>
                            <td>@Html.KendoDropDownListTreeWithButton(m => m.IdAttributeKO10, (IEnumerable<DropDownTreeItemModel>)ViewData["KoAttributes"])</td>
                            <td>@Html.KendoDropDownListTreeWithButton(m => m.IdAttributeGBU10, (IEnumerable<DropDownTreeItemModel>)ViewData["TreeAttributes"])</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
        
        <div class="form-group">
                <div class="col-sm-2 col-sm-offset-2">
                    <a href="#" class="k-button-icon k-button" id="addRow"><span class='fas fa-plus-circle'></span></a>
                </div>
            </div>

        <div class="form-group">
            <div class="col-sm-7 col-sm-offset-2">
                @(await Html.PartialAsync("/Views/Shared/PartialTemplateStorage.cshtml", new TemplateStorageViewModel
            {
                GetTemplatesActionName = nameof(TemplateController.GetTemplatesForTransferAttributes),
                Parameters = "isCreateMode=" + Model.CreateAttributes,
                SaveTemplateActionName = Model.MethodToSaveTemplate
            }))
            </div>
            <div class="col-sm-2 col-sm-offset-1">
                @(Html.Kendo().Button()
                    .Name("execute")
                    .Content("Выполнить").HtmlAttributes(new { @type = "button" }))
            </div>
        </div>
    </div>
}

<script type="text/x-kendo-template" id="templateRow">
    <tr class="wrapper-#: rowNumber #" style="display: none">

    </tr>
    </script>

<style>
    .attributes-list {
        padding-right: 2%;
    }
    table {
        border-collapse: separate;
        border: solid 4px #9ea8b9;
        border-radius: 10px;
    }
    tr { border: none; }
    th, td {
        margin: 10px;
        padding: 10px;
        border-right: solid 2px #9ea8b9; 
        border-left: solid 2px #9ea8b9;
    }
    table td:first-child,table th:first-child {
        border-left: none;
    }

    table td:last-child,table th:last-child {
        border-right: none;
    }
     
</style>


<script src="~/js/custom-validation.js"></script>
<script>
    var rowNumber = 1;

    function addNewRow(localRowNumber, idAttributeKo, idAttributeGbu) {
        var objectType = getObjectType();
        if (objectType === -1)
            return;
        kendo.ui.progress($('body'), true);
        var data = [{ rowNumber: localRowNumber }];
        var templateContent = $("#templateRow").html();
        var template = kendo.template(templateContent);
        var result = kendo.render(template, data);
        $("#attributesList tbody").append(result);
        var classWrapper = ".wrapper-" + localRowNumber;
        var idTour = $('#RatingTour').data('kendoDropDownList').value();
        var url = "@Url.Action("GetRowExport", "Task")";
        $(classWrapper).load(url, { rowNumber: localRowNumber, tourId: idTour, objectType: objectType, create: '@Model.CreateAttributes' },
            function(response) {
                $(classWrapper).show(500);
                if (idAttributeKo || idAttributeGbu) {
                    var attributeKoElement = '@nameof(PartialExportAttributesRowModel.IdAttributeKO)';
                    var attributeGbuElement = '@nameof(PartialExportAttributesRowModel.IdAttributeGbu)';
                    fillLevelFromTemplate(attributeKoElement, "kendoDropDownTree", localRowNumber, idAttributeKo);
                    fillLevelFromTemplate(attributeGbuElement, "kendoDropDownTree", localRowNumber, idAttributeGbu);
                }
                kendo.ui.progress($('body'), false);
                addSelectionHandlersForDropDowns();
            });
    }

    async function addNewRows(startRowNumber, rowCount, rowValues) {
        if (rowCount === 0)
            return;
        var objectType = getObjectType();
        if (objectType === -1)
            return;

        var idTour = $('#RatingTour').data('kendoDropDownList').value();
        await $.post("@Url.Action("GetRowExports", "Task")",
            { startRowNumber: startRowNumber, rowCount: rowCount, rowValues: rowValues, tourId: idTour, objectType: objectType},
            function(data) {
                $("#attributesList tbody").append(data);
                $("html, body").animate({ scrollTop: $(document).height() }, "slow");
                addSelectionHandlersForDropDowns();
            });
    }

    function fillLevelFromTemplate(elementName, elementType, localRowNumber, value) {
        var dropDownTree = $("#" + elementName + "_" + localRowNumber).data(elementType);
        if (dropDownTree) {
            dropDownTree.value(value || '');
            dropDownTree.trigger('change');
        }
    }

    function getDataSource() {
        return $.find('[class^=IdAttributeG]').concat($.find('tr[class^=wrapper-] input[class*=IdAttributeG]')).map(d => $(d).data('kendoDropDownTree'));
    }

    function getSelectedValues() {
        return getDataSource().map(d => d.value());
    }

    function getAllUidsToDisable(arrValues) {
        var allNodes = getDataSource().map((d) => flattenDataSource(d)).flat();
        var filter = allNodes.filter((e) => { return arrValues.includes(e.value); });
        return filter.map((i) => { return i.uid; });
    }

    function flattenDataSource(d) {
        return d.dataSource.data().map((v) => { return v.items; }).map((l1) => { return l1.map((l2) => { return l2; }); }).flat();
    }

    function blockAlreadySelectedNodes(arr) {
        var uidsToBlock = getAllUidsToDisable(arr);
        var nodes = getDataSource().map((d) => uidsToBlock.map((s) => d.treeview.findByUid(s))).flat();
        nodes.forEach(n => n.addClass('k-state-disabled'));
    }

    function clearTreeStates() {
        getDataSource().forEach((d) => d.tree.find('.k-item').removeClass('k-state-disabled'));
    }

    function updateSelected(e) {
        var dataItem = e.sender.dataItem(e.node);
        var itemValue = Number(dataItem.value);
        if (isNaN(itemValue) || itemValue <= 0 ) {
            e.preventDefault();
            return;
        }
        clearTreeStates();
        var changedEntries = flattenDataSource($(e.node.closest('.k-treeview')).data().kendoTreeView).filter(v=>v.selected).map(v=>v.value);
        var arr = getSelectedValues();
        if (arr.includes(dataItem.value)) {
            e.preventDefault();
        }
        var filtered = arr.filter(v=>!changedEntries.includes(v));
        filtered.push(dataItem.value);
        blockAlreadySelectedNodes(filtered);
    };

    function updateStates() {
        clearTreeStates();
        var arr = getSelectedValues();
        blockAlreadySelectedNodes(arr);
    }

    function addSelectionHandlersForDropDowns() {
        getDataSource().forEach(function (d) {
                d.treeview.unbind('select', e => updateSelected(e));
                d.treeview.bind('select', e => updateSelected(e));
            }
        );
        updateStates();
        var clearButtons = $.find('[class^=clear-button-IdAttributeG]').concat($.find('tr[class^=wrapper-] td:nth-of-type(2) [class^=clear-button-]'));
        clearButtons.forEach(b => b.onclick = function () { updateStates(); });
        getDataSource().forEach(d => d.bind("onFiltered", function () { updateStates(); }));
    }

    $(document).ready(function() {
        addSelectionHandlersForDropDowns();
        $('#addRow').on('click', function() {
            addNewRow(rowNumber);
            rowNumber++;
        });
        $('[name="RatingTour"]')
            .kendoDropDownList({
                dataTextField: 'Text',
                dataValueField: 'Value',
                filter: "contains",
                dataSource:
                {
                    transport: {
                        read: {
                            url: '@Url.Action("GetRatingTours", "Tour")',
                            dataType: 'json'
                        }
                    }
                }
            });

        $('[name="RatingTour"]').data('kendoDropDownList').bind('dataBound', initTasksList);
        $('[name="RatingTour"]').data('kendoDropDownList').bind('dataBound', initKoAttributes);
        $('[name="RatingTour"]').data('kendoDropDownList').bind('change', initTasksList);
        $('[name="RatingTour"]').data('kendoDropDownList').bind('change', initKoAttributes);
        $('#@nameof(Model.IsZu)').on('change', initKoAttributes);
        $('#@nameof(Model.IsZu)').on('change', setVisibilityForAdditionalFiltersForOks);
        $('#@nameof(Model.IsOks)').on('change', initKoAttributes);
        $('#@nameof(Model.IsOks)').on('change', setVisibilityForAdditionalFiltersForOks);
        $('#execute').on('click', transferAttributes);

        templateStorage.init(@((int) DataFormStorege.TransferAttributesWithoutCreate), null, addCustomLevelsToForm, fillForm);

        setVisibilityForAdditionalFiltersForOks();
    });

    async function initTasksList(event, successCallback) {
        var tourId = $('#@nameof(Model.RatingTour)').val();
        var dataSource = new kendo.data.DataSource({
            transport: {
                read: {
                    url: '@Url.Action("GetTasksByTour", "Task")',
                    data: { tourId: tourId },
                    dataType: 'json'
                }
            }
        });

        await dataSource.fetch(function() {
            var tasksMultiSelect = $("#@nameof(Model.TaskFilter)").data("kendoMultiSelect");
            tasksMultiSelect.setDataSource(dataSource);
            if (successCallback)
                successCallback();
        });
    }


    function getObjectType() {
        var isZu =  $('#@nameof(Model.IsZu)').prop("checked");
        var isOks = $('#@nameof(Model.IsOks)').prop("checked");
        if (!isZu && !isOks) {
            Common.ShowError("Не выбран тип");
            return -1;
        }
        if (isZu && isOks)
            return '@ObjectTypeExtended.Both';
        if (isOks)
            return '@ObjectTypeExtended.Oks';

        return '@ObjectTypeExtended.Zu';
    }

    async function initKoAttributes(event, successCallback) {
        var objectType = getObjectType();
        var tourId = $('#RatingTour').val();
        var koAttributesSource = objectType === -1
            ? null
            : new kendo.data.HierarchicalDataSource({
            transport: {
                read: {
                    url: '@Url.Action("GetKoAttributes", "Task")',
                    data: { tourId: tourId, objectType: objectType },
                    dataType: 'json'
                }
            }
            });
        if (koAttributesSource) {
            //загружаем атрибуты для каждого дроп-дауна только один раз
            await koAttributesSource.fetch(function() {
                var data = koAttributesSource.data();
                initDropDownListForKoAttributes(data);
                if (successCallback)
                    successCallback();
            });
        } else {
            initDropDownListForKoAttributes(null);
            if (successCallback)
                successCallback();
        }
    }
    function initDropDownListForKoAttributes(data) {
        $('[name^="IdAttributeKO"]').each(function () {
            $(this).kendoDropDownTree({
                filter: "contains",
                dataSource: extractTree(data),
                dataTextField: 'Text',
                dataValueField: 'Value',
                select: function(e) {
                    let dataItem = e.sender.dataItem(e.node);
                    if (dataItem.hasChildren) {
                        e.preventDefault();
                    }
                }
            });
        });
    }

    function extractTree(response) {
        return response.map(function(parentNodes) {
            return {
                Value: parentNodes.Value,
                Text: parentNodes.Text,
                items: parentNodes.Items.map(function(childNodes) {
                    return {
                        Value: childNodes.Value,
                        Text: childNodes.Text
                    }
                })
            }
        });
    }

    function addCustomLevelsToForm(formObject) {
        if (!formObject) {
            return formObject;
        }
        var exportAttribute = [];
        var formObjectKeys = Object.keys(formObject);
        for (var i = 1; i < rowNumber; i++) {
            var nameKo = formObjectKeys.find(key => key.includes('IdAttributeKO_' + i));
            var nameGbu = formObjectKeys.find(key => key.includes('IdAttributeGbu_' + i));
            exportAttribute.push({
                IdAttributeGbu: formObject[nameGbu],
                IdAttributeKO: formObject[nameKo]
            });
            delete formObject[nameGbu];
            delete formObject[nameKo];
        }
        return Object.assign({}, formObject, {ExportAttribute: exportAttribute});
    }


    function transferAttributes() {
        var objectType = getObjectType();
        if (objectType === -1)
            return;
        var form = $('form');
        var formObject = Common.Functions.FormToObject(form);
        formObject['TaskFilter'] = $("#TaskFilter").data('kendoMultiSelect').value();
        formObject = addCustomLevelsToForm(formObject);
        kendo.ui.progress($('body'), true);
        $.ajax({
            type: form.attr('method'),
            url: form.attr('action'),
            data: formObject,
            success: function (response) {
                if (response.Errors) {
                    var errors = getErrors(response.Errors);
                    Common.ShowError(errors);
                    return;
                } else {
                    Common.ShowMessage('Операция успешно добавлена в очередь фоновых процессов');
                }
            },
            error: function(response) {
                Common.ShowError(response.responseText);
            },
            complete: function() {
                kendo.ui.progress($('body'), false);
            }
        });
    }


    async function fillForm(data) {
        $('#@(nameof(Model.TaskFilter))').data("kendoMultiSelect").value([]);
        $('#@(nameof(Model.ObjectChangeStatus))').data("kendoMultiSelect").value([]);
        clearCustomLevels();
        rowNumber = 1;
        var taskValues = [];
        var koAttributes = {};
        var additionalCustomLevels = [];
        data.forEach(function (val) {
            var elementName = Object.keys(val)[0];
            var elementValue = val[elementName];
            if (elementName === '@(nameof(Model.RatingTour))') {
                var tourDropDownList = $('#@(nameof(Model.RatingTour))').data("kendoDropDownList");
                tourDropDownList.value(elementValue || '');
            }

            if (elementName.includes('@(nameof(Model.TaskFilter))')) {
                taskValues.push([elementValue]);
            }

            if (elementName.includes('@(nameof(Model.ObjectChangeStatus))')) {
                var element = $('#@(nameof(Model.ObjectChangeStatus))').data("kendoMultiSelect");
                var currentValue = element.value();
                currentValue.push([elementValue]);
                element.value(currentValue);
            }

            if (elementName === '@(nameof(Model.IsOks))') {
                $('#@(nameof(Model.IsOks))').prop("checked", elementValue);
            }
            if (elementName === '@(nameof(Model.IsZu))') {
                $('#@(nameof(Model.IsZu))').prop("checked", elementValue);
            }

            if (elementName.startsWith('@(nameof(Model.OksAdditionalFilters))')) {
                $('#' + elementName).prop("checked", elementValue);
                $('#' + elementName).trigger('change');
            }

            if (elementName.startsWith('IdAttributeGBU')) {
                var kendoDropDownTree = $('#' + elementName).data('kendoDropDownTree');
                if (kendoDropDownTree) {
                    kendoDropDownTree.value(elementValue || '');
                    kendoDropDownTree.trigger('change');
                    kendoDropDownTree.filterInput.val('');
                    kendoDropDownTree.trigger('filtering', [true]);
                }
            }

            if (elementName.startsWith('IdAttributeKO')) {
                koAttributes[elementName] = elementValue;
            }

            if (elementName.startsWith('@(nameof(Model.ExportAttribute))')) {
                var additionalCustomLevel = elementValue;
                additionalCustomLevels.push(additionalCustomLevel);
                rowNumber++;
            }
        });

        await Promise.all([
            initTasksList(null, () => $('#@(nameof(Model.TaskFilter))').data("kendoMultiSelect").value(taskValues)),
            initKoAttributes(null, () => {
                for (var elementName in koAttributes) {
                    var elementValue = koAttributes[elementName];
                    var kendoDropDownTree = $('#' + elementName).data('kendoDropDownTree');
                    if (kendoDropDownTree) {
                        kendoDropDownTree.value(elementValue || '');
                        kendoDropDownTree.trigger('change');
                    }
                }
            }),
            addNewRows(1, rowNumber - 1, additionalCustomLevels)
        ]);
        updateStates();
    }


    function clearCustomLevels() {
        var existedCustomLevels = $("tr[class^='wrapper-']");
        existedCustomLevels.each(function () {
            this.remove();
        });
    }


    function setVisibilityForAdditionalFiltersForOks() {
        var isOks = $('#@nameof(Model.IsOks)').prop("checked");
        if (isOks) {
            $("#additionalFiltersForOks").show();
        } else {
            $("#additionalFiltersForOks").hide();
        }
    }


    function showAdditionalFiltersForPlacements() {
        var placementElementId = getElementId('@nameof(Model.OksAdditionalFilters.IsPlacements)');
        var isPlacements = $('#' + placementElementId).prop("checked");
        if (isPlacements) {
            $("#additionalFiltersForPlacement").show();
        } else {
            $("#additionalFiltersForPlacement").hide();
        }
    }


    function getElementId(propertyName) {
        return '@nameof(Model.OksAdditionalFilters)' + '_' + propertyName;
    }

</script>