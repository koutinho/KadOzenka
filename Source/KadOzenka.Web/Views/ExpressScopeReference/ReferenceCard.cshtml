@model KadOzenka.Web.Models.ExpressScoreReference.ReferenceViewModel

@using (Html.BeginForm("ReferenceCard", "ExpressScopeReference", FormMethod.Post))
{
@Html.HiddenFor(m => m.Id)
<div class="form-horizontal col-sm-12">
    <div class="form-group"></div>
    <div class="form-group">
        <div class="col-sm-2">
            @Html.CustomLabelFor(m => m.Name)
        </div>
        <div class="col-sm-10">
            @Html.KendoTextBoxFor(m => m.Name, isReadonly: false)
        </div>
    </div>
	<div class="form-group">
		<div class="col-sm-2">
			@Html.CustomLabelFor(m => m.ValueType)
		</div>
		<div class="col-sm-10">
			@Html.KendoEnumDropDownListFor(m => m.ValueType, isReadonly: !Model.ValueTypeCanBeChanged, withoutNull: true)
		</div>
	</div>
	<div class="form-group">
		<div class="col-sm-2">
			@Html.CustomLabelFor("Интервальный справочник")
		</div>
		<div class="col-sm-10">
			@Html.Kendo().CheckBoxFor(m => m.UseInterval).Enable(Model.ValueTypeCanBeChanged)
		</div>
	</div>
    <div class="form-group">
        <div class="col-sm-12">
            <button disabled="@(!Model.IsEdit)" style="float: right" class="k-button" id="save" type="button">Сохранить</button>
        </div>
    </div>
</div>
}

@if (Model.Id != -1 && Model.ShowItems)
{
<div style="height: auto;">
    <div id="reference-items-ajax-loader" class="ajax-data-loading" data-request-type="GET" data-url="@Url.Content("~/RegistersView/EsReferenceItems?Transition=1&61000200=" + @Model.Id)"
         data-param-ReferenceId="@Model.Id" data-param-Pageable="true" data-param-Scrollable="true"
         data-param-partialview="true" data-loader="true"  style="height: 100%;"></div>
</div>
}

<style>
    #sidePanel-610  {
        min-height: 440px;
    }
    .contentPanel { 
        height: auto;
    }
</style>

<script src="~/js/custom-validation.js"></script>
<script type="text/javascript">
    var grid;
    $(document).ready(function () {
        var observer = new MutationObserver(function (mutationsList, observer) {
            for (let mutation of mutationsList) {
                for (let node of mutation.addedNodes) {
                    if (!(node instanceof HTMLElement)) continue;

                    if (node.matches('div[class="contentPanel"]')) {
                        grid = $("#Grid-610").data("kendoGrid");
                        grid.bind("dataBound", dataBound);
                        console.log("its work");
                    }
                    for (let elem of node.querySelectorAll('div[class="contentPanel"]')) {
                        grid = $("#Grid-610").data("kendoGrid");
                        grid.bind("dataBound", dataBound);
                    }
                }
            }
        });
        observer.observe(document.getElementsByTagName('body')[0], { childList: true, subtree: true });

        $('#save').on('click',
            function () {
                kendo.ui.progress($('body'), true);
                var form = $('form');
                var formObject = Common.Functions.FormToObject(form);

                $.post(form.attr('action'), formObject).done(function (response) {
                    if (response.Errors) {
                        var errors = getErrors(response.Errors);
                        Common.ShowError(errors);
                        return;
                    }

                    if (response.Success && response.Id) {
                        $('#@Html.IdFor(m => m.Id)').val(response.Id);
                        Common.ShowMessage(response.Success);
                    }
                }).fail(function(response, textStatus, errorThrown) {
	                Common.ShowError(response.responseText);
                }).always(function() {
	                kendo.ui.progress($('body'), false);
                });
            });

        var kDropDownList = $('#@(nameof(Model.ValueType))').data('kendoDropDownList');
        (function (control) {
            if (control) {
	            control.bind('cascade',
		            function(e) {
			            if (this.value() === "4") {
				            disableAndUncheckIntervalCheckbox();
				            return;
			            }
			            $('#@(nameof(Model.UseInterval))').prop('disabled', false);
		            });
	            var stringValue = "4";
				control.value() === stringValue && disableAndUncheckIntervalCheckbox();
            }
        }(kDropDownList));
    });

    function dataBound(e) {
        var itemCount = e.sender.dataSource.total();
        if (itemCount == 0) {
            $('#@(nameof(Model.ValueType))').data('kendoDropDownList').enable(true);
			$('#@(nameof(Model.UseInterval))').prop('disabled', false);
        } else {
            $('#@(nameof(Model.ValueType))').data('kendoDropDownList').readonly();
			$('#@(nameof(Model.UseInterval))').prop('disabled', true);
        }
    }

    function disableAndUncheckIntervalCheckbox() {
	    $('#@(nameof(Model.UseInterval))').prop('disabled', true);
	    $('#@(nameof(Model.UseInterval))').prop('checked', false);
    }

</script>