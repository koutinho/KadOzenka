@using KadOzenka.Web.Helpers
@using KadOzenka.Web.Models.GbuObject
@using KadOzenka.Web.Models.Task
@using ObjectModel.Directory
@using KadOzenka.Dal.DataImport.DataImporterGknNew.Attributes
@using KadOzenka.Web.Models.DataImportByTemplate
@model KadOzenka.Web.Models.Task.TaskCreationModel

<div id="toolbar"></div>

@Html.RenderHelpButton()

<div>
    <ul id="ls_panelbar" class="panelbar">
        <li id="MainData" data-expand>
            <span>Основные данные</span>
            <div>
                <div class="form-horizontal col-sm-12" style="margin-top: 10px;">
                    <div class="form-group">
                        <div class="col-sm-2">
                            @Html.LabelFor(x => x.DocumentType)
                        </div>
                        <div class="col-sm-10">
                            @(Html.Kendo().RadioButtonFor(x => x.DocumentType)
                                .Label(DocumentType.Xml.GetEnumDescription())
                                .Value((int)DocumentType.Xml)
                                .Checked(true))
                            @(Html.Kendo().RadioButtonFor(x => x.DocumentType)
                                .Label(DocumentType.Excel.GetEnumDescription())
                                .Value((int)DocumentType.Excel)
                                .HtmlAttributes(new { style = "padding-left:1%;" }))
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-sm-2">
                            @Html.CustomLabelFor(x => x.TourYear)
                        </div>
                        <div class="col-sm-10">
                            <input id="Tour" name="Tour" editmode="true"/>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-2">
                            @Html.CustomLabelFor(m => m.NoteType)
                        </div>
                        <div class="col-sm-10">
                            @Html.KendoEnumDropDownListFor(x => x.NoteType, itemIds: new List<long>
                            {
                                (long)KoNoteType.Day,
                                (long)KoNoteType.Petition,
                                (long)KoNoteType.Year,
                                (long)KoNoteType.Initial
                            }, isReadonly: false, withoutNull: true)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-2">
                            @Html.CustomLabelFor(m => m.EstimationDate)
                        </div>
                        <div class="col-sm-10">
                            @Html.KendoDatePickerFor(m => m.EstimationDate, format: "dd.MM.yyyy", isReadonly: false)
                        </div>
                    </div>
                    <div id="partialDocument" class="form-group">
                        <div class="col-sm-12">
                            @(await Html.PartialAsync("~/Views/GbuObject/Partials/PartialDocument.cshtml", new PartialDocumentViewModel()))
                        </div>
                    </div>
                </div>
            </div>
        </li>
        <li id="XmlFiles" style="display: none;" data-expand>
            <span id="filesBlockLabel">XML-файлы</span>
            <div>
                <form id="fileForm" class="form-horizontal col-sm-12">
                    <input name="xmlFiles" id="xmlFiles" type="file" aria-label="files" accept=".xml, .xlsx, .zip, .rar" />
                </form>
            </div>
        </li>
        <li id="excelFiles" style="display: none;" data-expand>
            <span>Excel-файлы</span>
            <div id="excelFilesMappingBlock" style="padding: 2%;">
                <ul id="upload_panelbar" class="panelBar" style="margin-top: 10px;">
                    @(await Html.PartialAsync("~/Views/DataImportByTemplate/Partials/DataImportMain.cshtml"))
                </ul>
            </div>
        </li>
        <li id="ImageFiles" data-expand>
            <span id="imagesBlockLabel">Файлы образов</span>
            <div>
                <form id="imageForm" class="form-horizontal col-sm-12">
                        <input name="images" id="images" type="file" aria-label="files" />
                </form>
            </div>
        </li>
    </ul>
</div>


@section styles {
    <link rel="stylesheet" href="~/css/jquery.fancybox.min.css" />
    <link rel="stylesheet" href="~/css/data-import-by-template.css" />
    <style>
        #ls_panelbar {
            width: 95%;
        }
        #filter {
            width: 100%;
        }
    </style>
}



<script src="~/js/custom-validation.js"></script>
<script src="~/js/jquery.fancybox.min.js"></script>
<script src="~/js/data-import-by-template.js"></script>
<script type="text/x-kendo-tmpl" id="template">
		<div class="matchItem k-widget">
			<span>
					<span>#:ColumnName#</span>
					<span>-</span>
					<span>#:AttributeDescription#</span>
					<span #=IsReadOnly ? 'style="display: none"' : '' #>
                        <a class="k-button k-delete-button deleteButton" href="\\#">
                            <span class="k-icon k-i-close"></span>
                        </a>
                </span>
			</span>
		</div>
</script>


<script>
    var dataSource = new kendo.data.DataSource({
        data: [ ]
    });


    $(document).ready(function() {
        var panelbar = $('#ls_panelbar').kendoPanelBar().data('kendoPanelBar');
        panelbar.expand('li[data-expand]');
        $('[name="@nameof(Model.DocumentType)"]').on('change', setFileBlocksVisibility);
        setFileBlocksVisibility();

        var generalAllowedFilesExtensions = ['.xml', '.zip', '.rar'];
        var allowedFilesExtensionsForPetition = ['.xlsx', '.zip', '.rar'];

        var toolbar = $("#toolbar").kendoToolBar({
            items: [
                {
                    type: 'button',
                    id: 'check',
                    text: 'Сохранить',
                    icon: 'save',
                    click: function () {
                        var message = [];
                        var upload = $("#xmlFiles").data("kendoUpload");
                        var files = upload.getFiles();
                        $.each(files, (function (index, value) {
                            if (isPetition()) {
                                if ($.inArray(value.extension, allowedFilesExtensionsForPetition) === -1)
                                    message += 'Загружены файлы недопустимого формата (разрешенные форматы для обращения: .xlsx, .zip, .rar)<br>';
                            } else {
                                if ($.inArray(value.extension, generalAllowedFilesExtensions) === -1)
                                    message += 'Загружены файлы недопустимого формата (разрешенные форматы: .xml, .zip, .rar)<br>';
                            }
                        }));

                        if ($('[name="EstimationDate"]').data().kendoDatePicker.value() == null) {
                            message += 'Необходимо заполнить дату изменения сведения (дату оценки)<br>';
                        }
                        if ($('[name="NoteType"]').val() == 0) {
                            message += 'Необходимо заполнить тип статьи<br>';
                        }
                        if (message.length != 0) {
                            Common.ShowError(message);
                            return;
                        }

                        var formData = new FormData($('#fileForm').get(0));
                        var imageFormData = new FormData($('#imageForm').get(0));
                        var images = imageFormData.getAll('images');
                        images.forEach(x=>formData.append('images',x));
                        formData.set('TourYear', $('[name="Tour"]').val());
                        formData.set('NoteType', $('[name="NoteType"]').val());
                        var estdate = $('[name="EstimationDate"]').data().kendoDatePicker.value();
                        if (estdate != null) {
                            formData.set('EstimationDate', estdate.toDateString());
                        }
                        var documentObject = Common.Functions.FormToObject($('#partialDocument'));
                        formData.append("@nameof(TaskCreationModel.Document).@nameof(PartialDocumentViewModel.ModelPrefix)", documentObject.ModelPrefix);
                        formData.append("@nameof(TaskCreationModel.Document).@nameof(PartialDocumentViewModel.IdDocument)", documentObject.IdDocument);
                        formData.append("@nameof(TaskCreationModel.Document).@nameof(PartialDocumentViewModel.NewDocumentRegNumber)", documentObject.NewDocumentRegNumber);
                        formData.append("@nameof(TaskCreationModel.Document).@nameof(PartialDocumentViewModel.NewDocumentName)", documentObject.NewDocumentName);
                        formData.append("@nameof(TaskCreationModel.Document).@nameof(PartialDocumentViewModel.NewDocumentDate)", documentObject.NewDocumentDate);
                        formData.append("@nameof(TaskCreationModel.Document).@nameof(PartialDocumentViewModel.NewDocumentApproveDate)", documentObject.NewDocumentApproveDate);
                        formData.append("@nameof(TaskCreationModel.Document).@nameof(PartialDocumentViewModel.NewDocumentChangeDate)", documentObject.NewDocumentChangeDate);
                        formData.append("@nameof(TaskCreationModel.Document).@nameof(PartialDocumentViewModel.IsNewDocument)", documentObject.IsNewDocument);
                        kendo.ui.progress($('body'), true);
                        $.ajax({
                            type: 'POST',
                            data: formData,
                            processData: false,
                            contentType: false,
                            success: function (e) {
                                if (e.Errors) {
                                    var errors = getErrors(e.Errors);
                                    Common.ShowError(errors);
                                    return;
                                } else {
                                    Common.ShowMessage(e.Msg);
                                    setTimeout(function () {
                                        Common.UI.CloseWindow('MainMenuWindow', window.parent);
                                    }, 1000);
                                }
                            },
                            error: function (e) {
                                var msg = e.responseText ? e.responseText : 'Ошибка загрузки. Обратитесь к администратору.'
                                Common.ShowError(msg);
                            },
                            complete: function () {
                                kendo.ui.progress($('body'), false);
                            }
                        });
                    }
                }
            ]
        });

        $('[name="Tour"]')
            .kendoDropDownList({
                dataTextField: 'Text',
                dataValueField: 'Value',
                dataSource:
                {
                    transport: {
                        read: {
                            url: '@Url.Action("GetRatingTours", "Tour")',
                            dataType: 'json'
                        }
                    }
                }
            });

        var images = $('#images').kendoUpload({
            multiple: true,
            localization: {
                select: 'Выбрать файлы'
            },
            error: function (e) {
                if (e.XMLHttpRequest.responseText) {
                    Common.ShowError(e.XMLHttpRequest.responseText);
                } else {
                    Common.ShowError("При загрузке выбранного файла возникла ошибка (подробно в журнале ошибок)");
                }
            }
        }).data('kendoUpload');

        var files = $('#xmlFiles').kendoUpload({
            multiple: true,
            localization: {
                select: 'Выбрать файлы'
            },
            error: function (e) {
                if (e.XMLHttpRequest.responseText) {
                    Common.ShowError(e.XMLHttpRequest.responseText);
                } else {
                    Common.ShowError("При загрузке выбранного файла возникла ошибка (подробно в журнале ошибок)");
                }
            }
        }).data('kendoUpload');

        $('[name="NoteType"]').data('kendoDropDownList').bind('dataBound', updateFilesBlock);
        $('[name="NoteType"]').data('kendoDropDownList').bind('change', updateFilesBlock);



        //Блок для маппинга Excel файла
        $('#upload_panelbar')
            .kendoPanelBar()
            .data('kendoPanelBar')
            .expand('li[data-expand]');
        initFilter();
        initMatchBtn(false);
        $("#downloadBlock").hide();
        $("#goToJournalBtn").hide();

        initComparisonBlock();
        initColumnsFromExcelBlock();
        initAttributesTree();
        downloadAttributes();
        initFilesBlockInMapping();
    });



    function updateFilesBlock() {
        if (isPetition()) {
            $("#filesBlockLabel").text("XLSX-файлы");
        } else {
            $("#filesBlockLabel").text("XML-файлы");
        }
    }

    function isPetition() {
        var noteType = $('[name="NoteType"]').val();
        var petitionNoteType = '@KoNoteType.Petition.GetEnumCode()';
        return noteType === petitionNoteType;
    }


    function setFileBlocksVisibility() {
        var documentType = $('input[name="@nameof(Model.DocumentType)"]:checked').val();
        if (documentType === '@((int) DocumentType.Xml)') {
            $('#excelFiles').hide();
            $('#XmlFiles').show();
        } else {
            $('#excelFiles').show();
            $('#XmlFiles').hide();
        }
    }


    function downloadAttributes() {
        $.ajax({
            type: 'GET',
            url: '@Url.Action("BuildAttributesTreeForTaskDocument", "DataImportByTemplate")',
            success: function(data) {
                if (data) {
                    $("#treeview").data('kendoTreeView').setDataSource(getAttributesDataSource(data));
                }
            },
            error: function(response) {
                Common.ShowError(response.responseText);
            }
        });
    }


    function initFilesBlockInMapping() {
        $('#files').kendoUpload({
            multiple: false,
            localization: {
                select: 'Загрузить Файл',
                clearSelectedFiles: 'Очистить'
            },
            async: {
                autoUpload: true,
                saveUrl: '@Url.Action("ParseFileColumns", "DataImportByTemplate")'
            },
            validation: {
                allowedExtensions: ['.xls', '.xlsx']
            },
            success: function(e) {
                if (e.operation === "upload") {
                    var columnNames = e.response.ColumnsNames;
                    var excelColumnsListBox = $("#columnsListBox").data("kendoListBox");
                    excelColumnsListBox.setDataSource(columnNames);
                    resetData();
                }
            },
            error: function(e) {
                $("#columnsListBox").data("kendoListBox").setDataSource([]);
                resetData();
                if (e.XMLHttpRequest.responseText) {
                    Common.ShowError(e.XMLHttpRequest.responseText);
                } else {
                    Common.ShowError("Не удалось загрузить выбранный файл");
                }
            },
            clear: function(e) {
                $("#columnsListBox").data("kendoListBox").setDataSource([]);
                resetData();
            }
        }).data('kendoUpload');
    }




        //TODO delete
    function initLoadButton() {
        $("#loadButton").kendoButton({
            enable: true,
            click: function(e) {
                kendo.ui.progress($('#importForm'), true);
                $("#loadButton").data('kendoButton').enable(false);
                var listView = $("#listView").data('kendoListView');
                var data = listView.dataSource.data();
                var columns = $.map(data,
                    function(item) {
                        return {
                            ColumnName: item.ColumnName,
                            AttributeId: item.AttributeId,
                            IsKey: item.IsKey
                        };
                    });

                var file = $('#files').data('kendoUpload').getFiles()[0];
                var isBackgroundDownload = $('#backgroundDownloadCheckbox').is(":checked");
                var documentObject = Common.Functions.FormToObject($('#partialDocument'));

                if (!isForMarketObjects && documentObject.IsNewDocument == "False" && !documentObject.IdDocument) {
                    kendo.ui.progress($('#importForm'), false);
                    $("#loadButton").data('kendoButton').enable(true);
                    Common.ShowError("Поле Документ обязательно для заполнения");
                    return;
                }

                var formData = new FormData();
                @*formData.append("MainRegisterId", @((long)ViewBag.MainRegisterId));*@
                formData.append("File", file.rawFile);
                formData.append("RegisterViewId", registerViewId);
                formData.append("IsBackgroundDownload", isBackgroundDownload);
                formData.append("@nameof(ImportGbuObjectModel.Document).@nameof(PartialDocumentViewModel.ModelPrefix)", documentObject.ModelPrefix);
                formData.append("@nameof(ImportGbuObjectModel.Document).@nameof(PartialDocumentViewModel.IdDocument)", documentObject.IdDocument);
                formData.append("@nameof(ImportGbuObjectModel.Document).@nameof(PartialDocumentViewModel.NewDocumentRegNumber)", documentObject.NewDocumentRegNumber);
                formData.append("@nameof(ImportGbuObjectModel.Document).@nameof(PartialDocumentViewModel.NewDocumentName)", documentObject.NewDocumentName);
                formData.append("@nameof(ImportGbuObjectModel.Document).@nameof(PartialDocumentViewModel.NewDocumentDate)", documentObject.NewDocumentDate);
                formData.append("@nameof(ImportGbuObjectModel.Document).@nameof(PartialDocumentViewModel.NewDocumentApproveDate)", documentObject.NewDocumentApproveDate);
                formData.append("@nameof(ImportGbuObjectModel.Document).@nameof(PartialDocumentViewModel.NewDocumentChangeDate)", documentObject.NewDocumentChangeDate);
                formData.append("@nameof(ImportGbuObjectModel.Document).@nameof(PartialDocumentViewModel.IsNewDocument)", documentObject.IsNewDocument);
                for (var i = 0; i !== columns.length; i++) {
                    formData.append("columns[" + i + "].ColumnName", columns[i].ColumnName);
                    formData.append("columns[" + i + "].AttributeId", columns[i].AttributeId);
                    formData.append("columns[" + i + "].IsKey", columns[i].IsKey);
                }
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("ImportDataFromExcel", "DataImportByTemplate")',
                    data: formData,
                    contentType: false,
                    processData: false,
                    success: function(data) {
                        if (data.Success) {
                            Common.ShowMessage(data.Message);
                        } else {
                            Common.ShowError(data.Message);
                        }
                        if (data.ImportDataLogId) {
                            var hrefForJournal = "/RegistersView/DataImporter?Transition=1&80100100=" + data.ImportDataLogId;
                            var goToJournalBtn = $("#goToJournalBtn");
                            goToJournalBtn.removeClass('k-state-disabled');
                            goToJournalBtn.attr('href', hrefForJournal);
                        }
                        if (data.ResultFileName) {
                            window.location = '@Url.Action("DownloadExcelResultFile", "DataImportByTemplate")' +
                                "?resultFileName=" +
                                data.ResultFileName;
                        }
                    },
                    error: function(response) {
                        Common.ShowError(response.responseText);
                    },
                    complete: function(data) {
                        kendo.ui.progress($('#importForm'), false);
                        $("#loadButton").data('kendoButton').enable(true);
                    }
                });
            }
        });
    }
</script>