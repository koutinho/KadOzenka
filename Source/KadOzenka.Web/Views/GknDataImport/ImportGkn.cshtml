@using KadOzenka.Web.Models.GbuObject
@using KadOzenka.Web.Models.Task
@using ObjectModel.Directory
@model KadOzenka.Web.Models.Task.TaskModel

<div id="toolbar"></div>

<div class="form-group">
    <div class="col-sm-12">
        <a style="float: right" href="/Help/Help?CurrentLocation=ImportGkn" target="_blank">
            <span style="font-size: 20px;" class="k-icon k-i-question"></span>
        </a>
    </div>
</div>

<div>
    <ul id="ls_panelbar" class="panelbar">
        <li id="MainData" data-expand>
            <span>Основные данные</span>
            <div>
                <div class="form-horizontal col-sm-12" style="margin-top:10px;">
                    <div class="form-group">
                        <div class="col-sm-2">
                            @Html.CustomLabelFor(x => x.TourYear)
                        </div>
                        <div class="col-sm-10">
                            <input id="Tour" name="Tour" editmode="true" />
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-2">
                            @Html.CustomLabelFor(m => m.NoteType)
                        </div>
                        <div class="col-sm-10">
                            @Html.KendoEnumDropDownListFor(x => x.NoteType, itemIds: new List<long>
                            {
                                (long)KoNoteType.Day,
                                (long)KoNoteType.Petition,
                                (long)KoNoteType.Year,
                                (long)KoNoteType.Initial
                            }, isReadonly: false, withoutNull: true)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-2">
                            @Html.CustomLabelFor(m => m.EstimationDate)
                        </div>
                        <div class="col-sm-10">
                            @Html.KendoDatePickerFor(m => m.EstimationDate, format: "dd.MM.yyyy", isReadonly: false)
                        </div>
                    </div>
                    <div id="partialDocument" class="form-group">
                        <div class="col-sm-12">
                            @(await Html.PartialAsync("~/Views/GbuObject/Partials/PartialDocument.cshtml", new PartialDocumentViewModel()))
                        </div>
                    </div>
                </div>
            </div>
        </li>
        <li id="XmlFiles" data-expand>
            <span id="filesBlockLabel">XML-файлы</span>
            <div>
                <form id="fileForm" class="form-horizontal col-sm-12">
                    <input name="files" id="files" type="file" aria-label="files" accept=".xml, .xlsx, .zip, .rar" />
                </form>
            </div>
        </li>
        <li id="ImageFiles" data-expand>
            <span id="imagesBlockLabel">Файлы образов</span>
            <div>
                <form id="imageForm" class="form-horizontal col-sm-12">
                        <input name="images" id="images" type="file" aria-label="files" />
                </form>
            </div>
        </li>
    </ul>
</div>


@section styles {
    <style>
        #ls_panelbar {
            width: 95%;
        }
    </style>
}



<script src="~/js/custom-validation.js"></script>
<script>
    $(document).ready(function () {
        var panelbar = $('#ls_panelbar').kendoPanelBar().data('kendoPanelBar');
        panelbar.expand('li[data-expand]');

        var generalAllowedFilesExtensions = ['.xml', '.zip', '.rar'];
        var allowedFilesExtensionsForPetition = ['.xlsx', '.zip', '.rar'];

        var toolbar = $("#toolbar").kendoToolBar({
            items: [
                {
                    type: 'button',
                    id: 'check',
                    text: 'Сохранить',
                    icon: 'save',
                    click: function () {
                        var message = [];
                        var upload = $("#files").data("kendoUpload");
                        var files = upload.getFiles();
                        $.each(files, (function (index, value) {
                            if (isPetition()) {
                                if ($.inArray(value.extension, allowedFilesExtensionsForPetition) === -1)
                                    message += 'Загружены файлы недопустимого формата (разрешенные форматы для обращения: .xlsx, .zip, .rar)<br>';
                            } else {
                                if ($.inArray(value.extension, generalAllowedFilesExtensions) === -1)
                                    message += 'Загружены файлы недопустимого формата (разрешенные форматы: .xml, .zip, .rar)<br>';
                            }
                        }));

                        if ($('[name="EstimationDate"]').data().kendoDatePicker.value() == null) {
                            message += 'Необходимо заполнить дату изменения сведения (дату оценки)<br>';
                        }
                        if ($('[name="NoteType"]').val() == 0) {
                            message += 'Необходимо заполнить тип статьи<br>';
                        }
                        if (message.length != 0) {
                            Common.ShowError(message);
                            return;
                        }

                        var formData = new FormData($('#fileForm').get(0));
                        var imageFormData = new FormData($('#imageForm').get(0));
                        var images = imageFormData.getAll('images');
                        images.forEach(x=>formData.append('images',x));
                        formData.set('TourYear', $('[name="Tour"]').val());
                        formData.set('NoteType', $('[name="NoteType"]').val());
                        var estdate = $('[name="EstimationDate"]').data().kendoDatePicker.value();
                        if (estdate != null) {
                            formData.set('EstimationDate', estdate.toDateString());
                        }
                        var documentObject = Common.Functions.FormToObject($('#partialDocument'));
                        formData.append("@nameof(TaskModel.Document).@nameof(PartialDocumentViewModel.ModelPrefix)", documentObject.ModelPrefix);
                        formData.append("@nameof(TaskModel.Document).@nameof(PartialDocumentViewModel.IdDocument)", documentObject.IdDocument);
                        formData.append("@nameof(TaskModel.Document).@nameof(PartialDocumentViewModel.NewDocumentRegNumber)", documentObject.NewDocumentRegNumber);
                        formData.append("@nameof(TaskModel.Document).@nameof(PartialDocumentViewModel.NewDocumentName)", documentObject.NewDocumentName);
                        formData.append("@nameof(TaskModel.Document).@nameof(PartialDocumentViewModel.NewDocumentDate)", documentObject.NewDocumentDate);
                        formData.append("@nameof(TaskModel.Document).@nameof(PartialDocumentViewModel.NewDocumentApproveDate)", documentObject.NewDocumentApproveDate);
                        formData.append("@nameof(TaskModel.Document).@nameof(PartialDocumentViewModel.NewDocumentChangeDate)", documentObject.NewDocumentChangeDate);
                        formData.append("@nameof(TaskModel.Document).@nameof(PartialDocumentViewModel.IsNewDocument)", documentObject.IsNewDocument);
                        kendo.ui.progress($('body'), true);
                        $.ajax({
                            type: 'POST',
                            data: formData,
                            processData: false,
                            contentType: false,
                            success: function (e) {
                                if (e.Errors) {
                                    var errors = getErrors(e.Errors);
                                    Common.ShowError(errors);
                                    return;
                                } else {
                                    Common.ShowMessage(e.Msg);
                                    setTimeout(function () {
                                        Common.UI.CloseWindow('MainMenuWindow', window.parent);
                                    }, 1000);
                                }
                            },
                            error: function (e) {
                                var msg = e.responseText ? e.responseText : 'Ошибка загрузки. Обратитесь к администратору.'
                                Common.ShowError(msg);
                            },
                            complete: function () {
                                kendo.ui.progress($('body'), false);
                            }
                        });
                    }
                }
            ]
        });

        $('[name="Tour"]')
            .kendoDropDownList({
                dataTextField: 'Text',
                dataValueField: 'Value',
                dataSource:
                {
                    transport: {
                        read: {
                            url: '@Url.Action("GetRatingTours", "Tour")',
                            dataType: 'json'
                        }
                    }
                }
            });

        var images = $('#images').kendoUpload({
            multiple: true,
            localization: {
                select: 'Выбрать файлы'
            },
            error: function (e) {
                if (e.XMLHttpRequest.responseText) {
                    Common.ShowError(e.XMLHttpRequest.responseText);
                } else {
                    Common.ShowError("При загрузке выбранного файла возникла ошибка (подробно в журнале ошибок)");
                }
            }
        }).data('kendoUpload');

        var files = $('#files').kendoUpload({
            multiple: true,
            localization: {
                select: 'Выбрать файлы'
            },
            error: function (e) {
                if (e.XMLHttpRequest.responseText) {
                    Common.ShowError(e.XMLHttpRequest.responseText);
                } else {
                    Common.ShowError("При загрузке выбранного файла возникла ошибка (подробно в журнале ошибок)");
                }
            }
        }).data('kendoUpload');

        $('[name="NoteType"]').data('kendoDropDownList').bind('dataBound', updateFilesBlock);
        $('[name="NoteType"]').data('kendoDropDownList').bind('change', updateFilesBlock);
    });


    function updateFilesBlock() {
        if (isPetition()) {
            $("#filesBlockLabel").text("XLSX-файлы");
        } else {
            $("#filesBlockLabel").text("XML-файлы");
        }
    }

    function isPetition() {
        var noteType = $('[name="NoteType"]').val();
        var petitionNoteType = '@KoNoteType.Petition.GetEnumCode()';
        return noteType === petitionNoteType;
    }
</script>