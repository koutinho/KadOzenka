@using KadOzenka.Dal.Oks
@using KadOzenka.Dal.ConfigurationManagers
<form class="objectsByZonesWidget">
    <div class="form-horizontal col-sm-12">
        <div class="form-group">
            <div class="col-sm-offset-10 col-sm-2">
            </div>
        </div>
        <div class="form-group">
            <div class="col-sm-12" style="text-align: center">
                <label class="title-label">Загруженные объекты</label>
                <span class="icon-excel export-button" title="Выгрузка в Excel"></span>
            </div>
        </div>
        <div class="form-group">
            <div class="col-sm-5">
                <div class="row">
                    <div class="col-sm-12">
                        <div class="oksMainChart"></div>
                    </div>
                    <div class="form-group"></div>
                    <div class="col-sm-3">
                        <label class="control-label">Подгруппа</label>
                    </div>
                    <div class="col-sm-9">
                        <input class="oksChildGroupDropdownList" style="width: 100%;" />
                    </div>
                    <div class="form-group"></div>
                    <div class="col-sm-12">
                        <div class="oksSubChart"></div>
                    </div>
                </div>
            </div>
            <div class="col-sm-2"></div>
            <div class="col-sm-5">
                <div class="row">
                    <div class="col-sm-12">
                        <div class="zuMainChart"></div>
                    </div>
                    <div class="form-group"></div>
                    <div class="col-sm-3">
                        <label class="control-label">Подгруппа</label>
                    </div>
                    <div class="col-sm-9">
                        <input class="zuChildGroupDropdownList" style="width: 100%;" />
                    </div>
                    <div class="form-group"></div>
                    <div class="col-sm-12">
                        <div class="zuSubChart"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</form>

<style>
    .export-button {
        float: right;
        display: inline-block;
        width: 35px;
        height: 35px;
        font-size: 35px;
        position: relative;
    }

    .export-button:hover {
        cursor: pointer
    }

    .title-label {
        font-size: large;
        font-weight: bold !important;
    }

    .objectsByZonesWidget {
        background-color: white
    }

</style>



<script src="~/js/custom-validation.js" charset="utf-8"></script>
<script type="text/javascript">
    var oksParentGroupsData = null;
    var zuParentGroupsData = null;
    var oksChildGroupDropdownList;
    var zuChildGroupDropdownList;
    var oksMainChart;
    var zuMainChart;
    var oksSubChart;
    var zuSubChart;
    var actualDate;

    $(document).ready(function() {
        oksChildGroupDropdownList = createCustomDropdownList($('.oksChildGroupDropdownList'), oksParentGroupsData, onOksMainGroupChanged);
        zuChildGroupDropdownList = createCustomDropdownList($('.zuChildGroupDropdownList'), zuParentGroupsData, onZuMainGroupChanged);
        oksMainChart = createCustomChart($('.oksMainChart'), "Объекты ОКС по группам");
        zuMainChart = createCustomChart($('.zuMainChart'), "Объекты ЗУ по группам");
        oksSubChart = createCustomChart($('.oksSubChart'), "");
        zuSubChart = createCustomChart($('.zuSubChart'), "");
        $('.export-button').bind('click', onExportClicked);

        loadData();
    });

    function createCustomDropdownList(element, dataSource, changeEventHandler) {
        return element
            .kendoDropDownList({
                dataTextField: 'GroupName',
                dataValueField: 'GroupId',
                dataSource: dataSource,
                change: changeEventHandler
            }).data('kendoDropDownList');
    }

    function createCustomChart(element, titleText) {
        return element.kendoChart({
            title: {
                position: "top",
                text: titleText
            },
            legend: {
                visible: false
            },
            dataSource: {
                data: null
            },
            series: [
                {
                    type: "pie",
                    field: "ObjectCount",
                    categoryField: "GroupName"
                }
            ],
            seriesColors: [
                @Html.Raw(ConfigurationManager.Core.SystemCommon.DashboardChartSeriesColors.IsNotEmpty() ? ConfigurationManager.Core.SystemCommon.DashboardChartSeriesColors : "\"#1c73a8\", \"#27a0ec\", \"#87d5f5\", \"#fdbb37\", \"#fd8c39\", \"#5ab35f\"")
            ],
            tooltip: {
                visible: true,
                template: "${ category } - ${ value }"
            },
            render: fixChartTitle
        }).data('kendoChart');
    }

    function updateCustomChart(chart, titleText, dataSource) {
        chart.setOptions({
            title: {
                position: "top",
                text: titleText
            },
            dataSource: {
                data: dataSource
            },
            render: fixChartTitle
        });
    }

    function fixChartTitle(e) {
        var chart = e.sender;
        var titleText = chart.options.title.text;
        if (titleText && titleText.length > 0) {
            var width = chart._plotArea.box.width();
            var symbolWidth = 10;
            var maxSymbolsPerLine = width / symbolWidth;

            var arr = titleText.split(" ");
            var newTitle = "";
            var currentLineSymbolsCount = 0;
            for (var i = 0; i < arr.length - 1; i++) {
                if (currentLineSymbolsCount + arr[i].length + 1 + arr[i + 1].length > maxSymbolsPerLine) {
                    newTitle += arr[i].trim() + "\n";
                    currentLineSymbolsCount = 0;
                } else {
                    newTitle += arr[i].trim() + " ";
                    currentLineSymbolsCount += arr[i].length + 1;
                }
            }
            newTitle += arr[arr.length - 1].trim();
            chart.options.title.text = newTitle;
        }

        chart._events.render = null;
        chart.refresh();
    }

    function onExportClicked() {
        kendo.ui.progress($('.objectsByZonesWidget'), true);
        fetch('/ManagementDecisionSupport/ExportGroupsChartDataToExcel')
            .then(resp => {
                    return resp.blob();
                })
            .then(blob => {
                kendo.ui.progress($('.objectsByZonesWidget'), false);
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.style.display = 'none';
                a.href = url;
                a.download = `Выгрузка загруженных объектов по группам (Дата актуальности: ${kendo.toString(kendo.parseDate(actualDate), "dd.MM.yyyy")}).xlsx`;
                document.body.appendChild(a);
                a.click();
                window.URL.revokeObjectURL(url);
            })
            .catch(() => { kendo.ui.progress($('.objectsByZonesWidget'), false); });
    }

    function loadData() {
        kendo.ui.progress($('.objectsByZonesWidget'), true);
        $.get('/ManagementDecisionSupport/GetGroupsChartData').done(function(response) {
            if (response.Errors) {
                var errors = getErrors(response.Errors);
                Common.ShowError(errors);
                return;
            }
            actualDate = response.actualDate;
            oksParentGroupsData = response.data.filter(x => x.ObjectType == @((int) ObjectType.Oks)).sort(compareGroups);
            zuParentGroupsData = response.data.filter(x => x.ObjectType == @((int) ObjectType.ZU)).sort(compareGroups);
            updateCustomChart(oksMainChart, "Объекты ОКС по группам", oksParentGroupsData);
            updateCustomChart(zuMainChart, "Объекты ЗУ по группам", zuParentGroupsData);

            oksChildGroupDropdownList.dataSource.data(oksParentGroupsData);
            oksChildGroupDropdownList.refresh();
            if (oksParentGroupsData && oksParentGroupsData.length > 0) {
                oksChildGroupDropdownList.value(oksParentGroupsData[0].GroupId);
                updateCustomChart(oksSubChart, oksParentGroupsData[0].GroupName, oksParentGroupsData[0].ChildChartGroupDtoList.sort(compareGroups));
            } else {
                updateCustomChart(oksSubChart, "", null);
            }

            zuChildGroupDropdownList.dataSource.data(zuParentGroupsData);
            zuChildGroupDropdownList.refresh();
            if (zuParentGroupsData && zuParentGroupsData.length > 0) {
                zuChildGroupDropdownList.value(zuParentGroupsData[0].GroupId);
                updateCustomChart(zuSubChart, zuParentGroupsData[0].GroupName, zuParentGroupsData[0].ChildChartGroupDtoList.sort(compareGroups));
            } else {
                updateCustomChart(zuSubChart, "", null);
            }
        }).fail(function(response, textStatus, errorThrown) {
            Common.ShowError(response.responseText);
        }).always(function() {
            kendo.ui.progress($('.objectsByZonesWidget'), false);
        });
    }

    function onOksMainGroupChanged() {
        if (oksParentGroupsData && oksParentGroupsData.length > 0) {
            var data = oksParentGroupsData.find(element => element.GroupId == this.value());
            oksChildGroupDropdownList.value(data.GroupId);
            updateCustomChart(oksSubChart, data.GroupName, data.ChildChartGroupDtoList.sort(compareGroups));
        } else {
            updateCustomChart(oksSubChart, "", null);
        }
    }

    function onZuMainGroupChanged() {
        if (zuParentGroupsData && zuParentGroupsData.length > 0) {
            var data = zuParentGroupsData.find(element => element.GroupId == this.value());
            zuChildGroupDropdownList.value(data.GroupId);
            updateCustomChart(zuSubChart, data.GroupName, data.ChildChartGroupDtoList.sort(compareGroups));
        } else {
            updateCustomChart(zuSubChart, "", null);
        }
    }

    function compareGroups(a, b) {
        return b.ObjectCount - a.ObjectCount;
    }
</script>
