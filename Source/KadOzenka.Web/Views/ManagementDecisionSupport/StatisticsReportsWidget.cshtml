@using Flurl.Util
@using KadOzenka.Dal.ManagementDecisionSupport.Enums

<form class="statisticsReportsWidget">
    <div class="form-horizontal col-sm-12">

        <div class="statistics-block">
            <div class="row statistics-title-row">
                <div class="col-sm-4">
                    <div>
                        <div class="col-sm-2">
                            <label class="statistics-control-label">С </label>
                        </div>
                        <div class="col-sm-10">
                            <input id="periodStart">
                        </div>
                    </div>
                </div>
                <div class="col-sm-4">
                    <div>
                        <div class="col-sm-2">
                            <label class="statistics-control-label">По </label>
                        </div>
                        <div class="col-sm-10">
                            <input id="periodEnd">
                        </div>
                    </div>
                </div>
                <div class="col-sm-4 statistics-tittle-buttons-container">
                    <a id="searchStatisticsReportsButton" class="k-button" >
                        <span class="k-icon icon-search_small"></span> Поиск
                    </a>
                    <a id="exportStatisticsReportsButton" class="k-button">
                        <span class="k-icon icon-excel"></span> Выгрузить в Excel
                    </a>
                </div>
            </div>
        </div>

        <div class="statistics-block">
            <div id="statisticsTabstrip">
                <ul>
                    <li id="importedObjectsTab">Загруженные объекты</li>
                    <li id="exportedObjectsTab">Выгруженные объекты</li>
                    <li id="zoneStatisticsTab">Статистика по зонам</li>
                    <li id="factorStatisticsTab">Статистика по ценообразующим факторам</li>
                    <li id="groupStatisticsTab">Статистика по группам</li>
                </ul>
                <div class="statistic-tab-content">
                    <div id="importedObjectsGrid" class="statistics-grid register-grid"></div>
                </div>
                <div class="statistic-tab-content">
                    <div id="exportedObjectsGrid" class="statistics-grid register-grid"></div>
                </div>
                <div class="statistic-tab-content">
                    <div id="zoneStatisticsGrid" class="statistics-grid register-grid"></div>
                </div>
                <div class="statistic-tab-content">
                    <div id="factorStatisticsGrid" class="statistics-grid register-grid"></div>
                </div>
                <div class="statistic-tab-content">
                    <div id="groupStatisticsGrid" class="statistics-grid register-grid"></div>
                </div>
            </div>
        </div>
    </div>
</form>

<style>
    .statistics-block {
        box-sizing: border-box;
        padding: 0 0 0 0;
    }

    .statistics-control-label {
        font-weight: bold !important;
        margin-top: 6px;
    }

    .statistics-title-row {
        margin-bottom: 5px;
    }

    .statistics-tittle-buttons-container {
        text-align: right;
    }

    .statistics-grid {
        height: 100%;
        flex: 1;
        box-sizing: border-box;
        max-width: 100%;
        min-height: 600px;
    }

    .k-filtercell > .k-operator-hidden {
        padding-right: 0;
    }

    .k-filtercell>span>.k-button {
        display: none;
    }

    .k-icon.icon-search_small, .k-icon.icon-excel {
        font-size: 24px !important;
    }
</style>



<script src="~/js/custom-validation.js" charset="utf-8"></script>
<script type="text/javascript">
    const GridIdList = {
        ImportedObjectsGrid: "importedObjectsGrid",
        ExportedObjectsGrid: "exportedObjectsGrid",
        ZoneStatisticsGrid: "zoneStatisticsGrid",
        FactorStatisticsGrid: "factorStatisticsGrid",
        GroupStatisticsGrid: "groupStatisticsGrid"
    };
    Object.freeze(GridIdList);

    var periodStartPicker, periodEndPicker;
    var statisticsTabstrip;
    var currentGrid;
    var uniqueSessionKey;

    $(document).ready(function () {
        kendo.ui.progress($('.statisticsReportsWidget'), true);
        $.ajax({
            url: '@Html.Raw(Url.Action("GetSessionKey", "ManagementDecisionSupport"))',
            success: function (response) {
                uniqueSessionKey = response;

                var now = new Date();
                periodStartPicker = createDatePicker($('#periodStart'), now);
                periodEndPicker = createDatePicker($('#periodEnd'), now);

                statisticsTabstrip = $('#statisticsTabstrip').kendoTabStrip({
                    activate: onActivateTab,
                    navigatable: false,
                    scrollable: false,
                    animation: false
                }).data('kendoTabStrip');

                $('#searchStatisticsReportsButton').click(refreshCurrentGrid);
                $('#exportStatisticsReportsButton').click(onExportClickedStatisticsReport);

                createGrids();
                statisticsTabstrip.activateTab($("#importedObjectsTab"));
            },
            error: function (response, textStatus, errorThrown) {
                Common.ShowError(response.responseText);
            },
            complete: function () {
                kendo.ui.progress($('.statisticsReportsWidget'), false);
            }
        });

    });

    function createDatePicker(element, value) {
        return element.kendoDatePicker({
            culture: "ru-RU",
            format: "dd.MM.yyyy",
            parseFormats: ["ddMMyyyy", "ddMMyy", "dd.MM.yyyy", "dd.MM.yy", "dd/MM/yyyy", "dd/MM/yy"],
            value: value
        }).data('kendoDatePicker');
    }

    function createGrids() {
        createImportedObjectsGrid();
        createExportedObjectsGrid();
        createZoneStatisticsGrid();
        createFactorStatisticsGrid();
        createGroupStatisticsGrid();
    }

    function createImportedObjectsGrid() {
        var url = '@Html.Raw(Url.Action("GetImportedObjectsData", "ManagementDecisionSupport"))';
        var dataSourceFields = {
            ID: { type: "number" },
            CadastralNumber: { type: "string" },
            PropertyType: { type: "string" },
            Square: { type: "number" },
            TaskCreationDate: {
                type: "date"
            }
        };
        var columns = getGeneralColumns();
        var excelName = getGridExcelName(GridIdList.ImportedObjectsGrid);

        createGrid($('#' + GridIdList.ImportedObjectsGrid), url, dataSourceFields, columns, excelName);
    }

    function createExportedObjectsGrid() {
        var url = '@Html.Raw(Url.Action("GetExportedObjectsData", "ManagementDecisionSupport"))';
        var dataSourceFields = {
            ID: { type: "number" },
            CadastralNumber: { type: "string" },
            PropertyType: { type: "string" },
            Square: { type: "number" },
            TaskCreationDate: { type: "date" },
            Status: { type: "string" }
        };
        var columns = getGeneralColumns();
        columns.push({
            title: "Статус",
            field: "Status",
            template: "#= (Status && Status.length > 0) ? Status : '-' #",
            filterable: {
                cell: {
                    showOperators: false,
                    operator: "contains",
                    minLength: 999,
                    template: function(args) {
                        args.element.addClass("k-textbox");
                    }
                }
            }
        });
        var excelName = getGridExcelName(GridIdList.ExportedObjectsGrid);

        createGrid($('#' + GridIdList.ExportedObjectsGrid), url, dataSourceFields, columns, excelName);
    }

    function createZoneStatisticsGrid() {
        var url = '@Html.Raw(Url.Action("GetZoneStatisticsData", "ManagementDecisionSupport"))';
        var dataSourceFields = {
            ID: { type: "number" },
            CadastralNumber: { type: "string" },
            PropertyType: { type: "string" },
            Square: { type: "number" },
            TaskCreationDate: { type: "date" },
            Zone: { type: "string" }
        };
        var columns = getGeneralColumns();
        columns.push({
            title: "Зона",
            field: "Zone",
            template: "#= (Zone && Zone.length > 0) ? Zone : '-' #",
            filterable: {
                cell: {
                    showOperators: false,
                    operator: "contains",
                    template: function (args) {
                        var zoneTypeDataSource = new kendo.data.DataSource({
                            transport: {
                                read: {
                                    url: '@Html.Raw(Url.Action("GetZoneTypes", "ManagementDecisionSupport"))',
                                    dataType: "json"
                                }
                            }
                        });
                        args.element.kendoDropDownList({
                            dataSource: zoneTypeDataSource,
                            filter: "contains",
                            optionLabel: " ",
                            dataTextField: "Zone",
                            dataValueField: "Zone",
                            valuePrimitive: true
                        });
                    }
                }
            }
        });
        var excelName = getGridExcelName(GridIdList.ZoneStatisticsGrid);

        createGrid($('#' + GridIdList.ZoneStatisticsGrid), url, dataSourceFields, columns, excelName);
    }

    function createFactorStatisticsGrid() {
        var url = '@Html.Raw(Url.Action("GetFactorStatisticsData", "ManagementDecisionSupport"))';
        var dataSourceFields = {
            ID: { type: "number" },
            CadastralNumber: { type: "string" },
            PropertyType: { type: "string" },
            Square: { type: "number" },
            TaskCreationDate: { type: "date" },
            ChangedFactors: { type: "string" }
        };
        var columns = getGeneralColumns();
        columns.push({
            title: "Измененные факторы",
            field: "ChangedFactors",
            template: "#= (ChangedFactors && ChangedFactors.length > 0) ? ChangedFactors : '-' #",
            filterable: {
            cell: {
                showOperators: false,
                operator: "contains",
                    minLength: 999,
                template: function(args) {
                    args.element.addClass("k-textbox");
                }
            }
            }
        });
        var excelName = getGridExcelName(GridIdList.FactorStatisticsGrid);

        createGrid($('#' + GridIdList.FactorStatisticsGrid), url, dataSourceFields, columns, excelName);
    }

    function createGroupStatisticsGrid() {
        var url = '@Html.Raw(Url.Action("GetGroupStatisticsData", "ManagementDecisionSupport"))';
        var dataSourceFields = {
            ID: { type: "number" },
            CadastralNumber: { type: "string" },
            PropertyType: { type: "string" },
            Square: { type: "number" },
            TaskCreationDate: { type: "date" },
            Group: { type: "string" },
            SubGroup: { type: "string" }
        };
        var columns = getGeneralColumns();
        columns.push({
            title: "Группа",
            field: "Group",
            template: "#= (Group && Group.length > 0) ? Group : '-' #",
            filterable: {
                cell: {
                    showOperators: false,
                    operator: "contains",
                    minLength: 999,
                    template: function(args) {
                        args.element.addClass("k-textbox");
                    }
                }
            }
        });
        columns.push({
            title: "Подгруппа",
            field: "SubGroup",
            template: "#= (SubGroup && SubGroup.length > 0) ? SubGroup : '-' #",
            filterable: {
                cell: {
                    showOperators: false,
                    operator: "contains",
                    minLength: 999,
                    template: function(args) {
                        args.element.addClass("k-textbox");
                    }
                }
            }
        });
        var excelName = getGridExcelName(GridIdList.GroupStatisticsGrid);

        createGrid($('#' + GridIdList.GroupStatisticsGrid), url, dataSourceFields, columns, excelName);
    }

    function getGeneralColumns() {
        return [
            {
                title: "Кадастровый номер",
                field: "CadastralNumber",
                template: getUnitCardLinkTemplate,
                filterable: {
                    cell: {
                        showOperators: false,
                        operator: "contains",
                        minLength: 999,
                        template: function(args) {
                            args.element.addClass("k-textbox");
                        }
                    }
                }
            },
            {
                title: "Вид объекта недвижимости",
                field: "PropertyType",
                filterable: {
                    cell: {
                        showOperators: false,
                        operator: "eq",
                        template: function (args) {
                            var propertyTypeDataSource = new kendo.data.DataSource({
                                transport: {
                                    read: {
                                        url: '@Html.Raw(Url.Action("GetUnitPropertyTypes", "ManagementDecisionSupport"))',
                                        dataType: "json"
                                    }
                                }
                            });
                            args.element.kendoDropDownList({
                                dataSource: propertyTypeDataSource,
                                optionLabel: " ",
                                dataTextField: "Text",
                                dataValueField: "Text",
                                valuePrimitive: true
                            });
                        }
                    }
                }
            },
            {
                title: "Площадь",
                field: "Square",
                template: "#= (Square == null) ? '-' : kendo.toString(Square,'n4') #",
                filterable: {
                    cell: {
                        showOperators: false,
                        operator: "eq",
                        template: function (args) {
                            args.element.kendoNumericTextBox({
                                format: "n4",
                                spinners: false
                            });
                        }
                    }
                }
            },
            {
                title: "Дата создания задания на оценку",
                field: 'TaskCreationDate',
                template: '#= kendo.toString(TaskCreationDate, "dd.MM.yyyy") #',
                filterable: {
                    cell: {
                        showOperators: false,
                        operator: "eq",
                        template: function (args) {
                            args.element.kendoDatePicker({
                                format: "dd.MM.yyyy"
                            });
                        }
                    }
                }
            }
        ];
    }

    function getUnitCardLinkTemplate(row) {
        var cadastralNumberView = row.CadastralNumber && row.CadastralNumber.length > 0
            ? row.CadastralNumber
            : "-";
        var unitCardUrl = `/Unit/ObjectCard?unitId=${row.ID}`;
        return `<a target="_blank" href="${unitCardUrl}">${cadastralNumberView}</a>`;
    }

    function createGrid(element, dataUrl, dataFields, columns, excelName) {
        element.kendoGrid({
            dataSource: {
                type: "webapi",
                transport: {
                    read: {
                        url: dataUrl,
                        contentType: 'application/json; charset=utf-8',
                        dataType: 'json',
                        data: getGridParams,
                    },
                },
                error: function (e) {
                    if (e.xhr && e.xhr.responseText) {
                        Common.ShowError(e.xhr.responseText);
                    } else {
                        Common.ShowError();
                    }
                },
                serverPaging: true,
                serverSorting: true,
                serverFiltering: true,
                serverAggregates: true,
                schema: {
                    model: {
                        fields: dataFields
                    },
                    parse: parseGridDataResponse
                },
                requestStart: function (e) {
                    disableWidgetActions();
                },
                requestEnd: function (e) {
                    enableWidgetActions();
                }
            },
            noRecords: {
                template: "<div style='padding: 6px 0 6px 0;'>Не найдена ни одна запись</div>"
            },
            columns: columns,
            sortable: true,
            autoBind: false,
            scrollable: true,
            filterable: { mode: 'row' },
            pageable: {
                alwaysVisible: false,
                pageSize: 30
            },
            dataBinding: function (e) {
                if (e.action == "rebind") {
                    this.dateStart = periodStartPicker.value();
                    this.dateEnd = periodEndPicker.value();
                    this.element.find(".k-grid-content").scrollTop(0);
                }
            },
            dataBound: function (e) {
                var gridThis = this;

                function ifViewLoadContent(elem) {
                    if (!elem.hasClass("ImLoaded")) {
                        elem.addClass("ImLoaded");
                        var $totalRows = gridThis.element
                            .find('.k-pager-wrap.k-grid-pager .reader-mode-pager-info .grid-total-rows').text();
                        var $currentRows = gridThis.element
                            .find('.k-pager-wrap.k-grid-pager .reader-mode-pager-info .grid-current-rows').text();

                        if ($currentRows !== $totalRows) {
                            disableWidgetActions();
                            kendo.ui.progress(elem.closest('div.register-grid'), true);
                            var url = getGridAddData(currentGrid);
                            var parameterMap = gridThis.dataSource.transport.parameterMap;
                            var data = getGridExportParams(gridThis);
                            data.filters = parameterMap({ filter: gridThis.dataSource.filter() }).filter;
                            data.sorts = parameterMap({ sort: gridThis.dataSource.sort() }).sort;
                            data.currentCount = $currentRows;
                            data.totalCount = $totalRows;
                            $.ajax({
                                url: url,
                                cache: false,
                                data: data,
                                success: function (response) {
                                    if (response && response.length) {
                                        var data = parseGridDataResponse(response);
                                        gridThis.dataSource.data().push
                                            .apply(gridThis.dataSource.data(), data);
                                        gridThis.element
                                            .find(
                                                '.k-pager-wrap.k-grid-pager .reader-mode-pager-info .grid-current-rows')
                                            .text(gridThis.dataSource.data().length);
                                    }
                                },
                                error: function (response, textStatus, errorThrown) {
                                    Common.ShowError(response.responseText);
                                },
                                complete: function () {
                                    kendo.ui.progress($(`#${currentGrid}`).data('kendoGrid').element
                                        .find('table[role=grid] tbody tr:last').closest('div.register-grid'),
                                        false);
                                    enableWidgetActions();
                                }
                            });
                        }
                    }
                }

                var scrollbarWidth = kendo.support.scrollbar();
                var gridSelector = '#' + currentGrid;
                $(gridSelector + ' .k-grid-pager').find('a, ul').each(function (i) {
                    $(this).remove();
                });

                var gridEl = $(gridSelector);
                gridEl.children('.k-grid-content').on('scroll', function (e) {
                    if (e.target.scrollTop >= e.target.scrollHeight - e.target.offsetHeight - scrollbarWidth)
                        ifViewLoadContent(gridThis.element.find('table[role=grid] tbody tr:last'));
                });

                var $pager = gridThis.element.find('.k-pager-wrap.k-grid-pager');

                if ($pager.length) {
                    $pager.attr('style', 'position: sticky;bottom: 0;padding-top: 1em;padding-bottom: 1em;');
                    $pager.find('.k-pager-info.k-label').remove();

                    if ($pager.find('.reader-mode-pager-info').length == 0)
                        $pager.append('<span class="reader-mode-pager-info">Отображены записи&nbsp;<span class="grid-current-rows"></span>&nbsp;из&nbsp;<span class="grid-total-rows"></span>');

                    $pager.find('.grid-current-rows').text(gridThis.dataSource.data().length);
                    $pager.find('.grid-total-rows').html('<span class="small-loader"></span>');
                }

                disableWidgetActions();
                var url = getGridDataCount(currentGrid);
                var parameterMap = gridThis.dataSource.transport.parameterMap;
                var data = getGridExportParams(gridThis);
                data.filters = parameterMap({ filter: gridThis.dataSource.filter() }).filter;
                data.sorts = parameterMap({ sort: gridThis.dataSource.sort() }).sort;
                $.ajax({
                    url: url,
                    cache: false,
                    data: data,
                    success: function (response) {
                        var $val = response ? response : 0;
                        gridThis.element.find('.k-pager-wrap.k-grid-pager .grid-total-rows').text($val);
                    },
                    error: function (response, textStatus, errorThrown) {
                        Common.ShowError(response.responseText);
                    },
                    complete: function () {
                        enableWidgetActions();
                    }
                });
            }
        });

        element.data("kendoGrid").tbody.kendoTooltip({
            filter: "td",
            content: function (e) {
                return e.target.text();
            },
            position: "top",
            autoHide: true,
            showAfter: 500
        });
    }

    function parseGridDataResponse(response) {
        for (var i = 0; i < response.length; i++) {
            var datetime = kendo.parseDate(response[i].TaskCreationDate);
            var date = new Date(datetime.getFullYear(), datetime.getMonth(), datetime.getDate(), 0, 0, 0, 0);
            response[i].TaskCreationDate = date;
        }
        return response;
    }

    function disableWidgetActions() {
        statisticsTabstrip.enable(statisticsTabstrip.tabGroup.children(), false);
        statisticsTabstrip.enable(statisticsTabstrip.tabGroup.children().eq(statisticsTabstrip.select().index()), true);
        $('#searchStatisticsReportsButton').attr("disabled", "disabled");
        $('#exportStatisticsReportsButton').attr("disabled", "disabled");
        $('#searchStatisticsReportsButton').unbind();
        $('#exportStatisticsReportsButton').unbind();
    }


    function enableWidgetActions() {
        statisticsTabstrip.enable(statisticsTabstrip.tabGroup.children(), true);
        $('#searchStatisticsReportsButton').removeAttr('disabled');
        $('#exportStatisticsReportsButton').removeAttr('disabled');
        $('#searchStatisticsReportsButton').unbind().click(refreshCurrentGrid);
        $('#exportStatisticsReportsButton').unbind().click(onExportClickedStatisticsReport);
    }

    function getGridParams() {
        var dateStart = periodStartPicker.value();
        if (dateStart) {
            dateStart = dateStart.toUTCString();
        }
        var dateEnd = periodEndPicker.value();
        if (dateEnd) {
            dateEnd = dateEnd.toUTCString();
        }

        return { dateStart: dateStart, dateEnd: dateEnd, uniqueSessionKey: uniqueSessionKey };
    }

    function getGridExportParams(grid) {
        var dateStart = grid.dateStart;
        if (dateStart) {
            dateStart = dateStart.toUTCString();
        }
        var dateEnd = grid.dateEnd;
        if (dateEnd) {
            dateEnd = dateEnd.toUTCString();
        }

        return { dateStart: dateStart, dateEnd: dateEnd, uniqueSessionKey: uniqueSessionKey };
    }

    function onActivateTab(e) {
        currentGrid = e.contentElement.firstElementChild.id;
        refreshCurrentGrid();
    }

    function refreshCurrentGrid() {
        if (!periodStartPicker.value() || !periodEndPicker.value()) {
            Common.ShowError("Не задан период");
            return;
        }

        $('#' + currentGrid).data('kendoGrid').dataSource.read();
    }

    function getExcelFileName(excelFileName, grid) {
        var startDate = kendo.toString(kendo.parseDate(grid.dateStart), "dd.MM.yyyy");
        var endDate = kendo.toString(kendo.parseDate(grid.dateEnd), "dd.MM.yyyy");

        return excelFileName +
            `(Период с ${startDate} по ${endDate }).xlsx`;
    }

    function onExportClickedStatisticsReport() {
        var grid = $('#' + currentGrid).data("kendoGrid");
        var $totalRows = grid.element.find('.k-pager-wrap.k-grid-pager .reader-mode-pager-info .grid-total-rows').text();
        if (!$totalRows) {
            Common.ShowError("Дождитесь загрузки общего количества данных");
            return;
        }

        if ($totalRows > 1000) {
            Common.UI.ShowConfirm({
                title: 'Внимание!',
                content:
                    'Объем выгружаемых данных слишком большой. Запустить формирование выгрузки в фоновом режиме?',
                onSuccess: function (e) {
                    kendo.ui.progress($('.statisticsReportsWidget'), true);
                    var url = getGridExportUrl(currentGrid);
                    var parameterMap = grid.dataSource.transport.parameterMap;
                    var data = getGridExportParams(grid);
                    data.filters = parameterMap({ filter: grid.dataSource.filter() }).filter;
                    data.sorts = parameterMap({ sort: grid.dataSource.sort() }).sort;
                    data.backgroundExport = true;
                    $.ajax({
                        url: url,
                        cache: false,
                        data: data,
                        success: function (result) {
                            Common.UI.ShowDialog({
                                content: 'Выгрузка успешно запущена',
                                height: 130,
                                icon: 'info',
                                showCloseBtn: true
                            });
                        },
                        error: function (response, textStatus, errorThrown) {
                            Common.ShowError(response.responseText);
                        },
                        complete: function () {
                            kendo.ui.progress($('.statisticsReportsWidget'), false);
                        }
                    });
                }
            });
        } else {
            kendo.ui.progress($('.statisticsReportsWidget'), true);
            var url = getGridExportUrl(currentGrid);
            var excelName = getGridExcelName(currentGrid);
            var parameterMap = grid.dataSource.transport.parameterMap;
            var data = getGridExportParams(grid);
            data.filters = parameterMap({ filter: grid.dataSource.filter() }).filter;
            data.sorts = parameterMap({ sort: grid.dataSource.sort() }).sort;

            $.ajax({
                url: url,
                cache: false,
                data: data,
                xhrFields: {
                    responseType: 'blob'
                },
                success: function (blob) {
                    const url = window.URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.style.display = 'none';
                    a.href = url;
                    a.download = getExcelFileName(excelName, grid);
                    document.body.appendChild(a);
                    a.click();
                    window.URL.revokeObjectURL(url);
                },
                error: function (response, textStatus, errorThrown) {
                    Common.ShowError(response.responseText);
                },
                complete: function () {
                    kendo.ui.progress($('.statisticsReportsWidget'), false);
                }});
        }
    }

    function getGridExportUrl(gridId) {
        switch (gridId) {
            case GridIdList.ImportedObjectsGrid:
                return '@Html.Raw(Url.Action("ExportImportedObjects", "ManagementDecisionSupport"))';
            case GridIdList.ExportedObjectsGrid:
                return '@Html.Raw(Url.Action("ExportExportedObjects", "ManagementDecisionSupport"))';
            case GridIdList.ZoneStatisticsGrid:
                return '@Html.Raw(Url.Action("ExportZoneStatistics", "ManagementDecisionSupport"))';
            case GridIdList.FactorStatisticsGrid:
                return '@Html.Raw(Url.Action("ExportFactorStatistics", "ManagementDecisionSupport"))';
            case GridIdList.GroupStatisticsGrid:
                return '@Html.Raw(Url.Action("ExportGroupStatistics", "ManagementDecisionSupport"))';
        }
    }

    function getGridDataCount(gridId) {
        switch (gridId) {
            case GridIdList.ImportedObjectsGrid:
                return '@Html.Raw(Url.Action("GetImportedObjectsDataCount", "ManagementDecisionSupport"))';
            case GridIdList.ExportedObjectsGrid:
                return '@Html.Raw(Url.Action("GetExportedObjectsDataCount", "ManagementDecisionSupport"))';
            case GridIdList.ZoneStatisticsGrid:
                return '@Html.Raw(Url.Action("GetZoneStatisticsDataCount", "ManagementDecisionSupport"))';
            case GridIdList.FactorStatisticsGrid:
                return '@Html.Raw(Url.Action("GetFactorStatisticsDataCount", "ManagementDecisionSupport"))';
            case GridIdList.GroupStatisticsGrid:
                return '@Html.Raw(Url.Action("GetGroupStatisticsDataCount", "ManagementDecisionSupport"))';
        }
    }

    function getGridAddData(gridId) {
        switch (gridId) {
            case GridIdList.ImportedObjectsGrid:
                return '@Html.Raw(Url.Action("GetAddImportedObjectsData", "ManagementDecisionSupport"))';
            case GridIdList.ExportedObjectsGrid:
                return '@Html.Raw(Url.Action("GetAddExportedObjectsData", "ManagementDecisionSupport"))';
            case GridIdList.ZoneStatisticsGrid:
                return '@Html.Raw(Url.Action("GetAddZoneStatisticsData", "ManagementDecisionSupport"))';
            case GridIdList.FactorStatisticsGrid:
                return '@Html.Raw(Url.Action("GetAddFactorStatisticsData", "ManagementDecisionSupport"))';
            case GridIdList.GroupStatisticsGrid:
                return '@Html.Raw(Url.Action("GetAddGroupStatisticsData", "ManagementDecisionSupport"))';
        }
    }

    function getGridExcelName(gridId) {
        switch (gridId) {
            case GridIdList.ImportedObjectsGrid:
                    return "@Html.Raw(StatisticsReportExportType.ImportedObjects.GetEnumDescription())";
            case GridIdList.ExportedObjectsGrid:
                    return "@Html.Raw(StatisticsReportExportType.ExportedObjects.GetEnumDescription())";
            case GridIdList.ZoneStatisticsGrid:
                    return "@Html.Raw(StatisticsReportExportType.ZoneStatistics.GetEnumDescription())";
            case GridIdList.FactorStatisticsGrid:
                    return "@Html.Raw(StatisticsReportExportType.FactorStatistics.GetEnumDescription())";
            case GridIdList.GroupStatisticsGrid:
                    return "@Html.Raw(StatisticsReportExportType.GroupStatistics.GetEnumDescription())";
        }
    }
</script>
