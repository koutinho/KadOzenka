@using KadOzenka.Web.Models.Modeling
<form id="importForm">
    <ul id="upload_panelbar" class="panelBar" style="margin-top: 10px;">
        <li id="sectionUploading" data-expand>
            <span>Формирование загрузки</span>
            <div>
                <div class="form-horizontal col-sm-12">
                    <div class="form-group"></div>
                    <div class="form-group">
                        <input name="files" id="files" type="file" aria-label="files" accept=".xls,.xlsx"/>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-5">
                            <div class="row" style="padding-bottom: 1%">
                                <label class="control-label">Колонки в файле Excel:</label>
                            </div>
                            <div class="row paramsContainer">
                                <select id="excelColumnsListBox"></select>
                            </div>
                        </div>
                        <div class="col-sm-2">
                            <div class="row">
                                <span>&nbsp;</span>
                            </div>
                            <div class="row matchButtonContainer">
                                <button id="matchButton" type="button"></button>
                            </div>
                        </div>
                        <div class="col-sm-5">
                            <div class="row" style="padding-bottom: 1%">
                                <label class="control-label">Факторы модели:</label>
                            </div>
                            <div class="row filterParamsContainer">
                                <span class="filterInput">
                                    <input class="k-textbox" id="filter" autocomplete="off" placeholder="Поиск"/>
                                </span>
                                <div class="filterAttrParamsContainer">
                                    <div id="treeview"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <div>
                            <span>
                                <button id="loadButton" type="button">Загрузить</button>
                                <input id="backgroundDownloadCheckbox" type="checkbox"/>
                                <label for="backgroundDownloadCheckbox">Фоновая Загрузка</label>
                            </span>
                        </div>
                    </div>
                    <div class="form-group">
                        <a class="k-button k-state-disabled" id="goToJournalBtn" href="" target="_blank"><span>Перейти в журнал</span></a>
                    </div>
                </div>
            </div>
        </li>
        <li id="sectionMatching" data-expand>
            <span>Сопоставление</span>
            <div>
                <div class="form-horizontal col-sm-12">
                    <div class="form-group"></div>
                    <div class="form-group">
                        <div class="col-sm-12 paramsContainer matchParamsContainer">
                            <div id="matchedParameters"></div>
                        </div>
                    </div>
                </div>
            </div>
        </li>
    </ul>
</form>



<link rel="stylesheet" href="~/css/jquery.fancybox.min.css" />
	<style>
		.my-custom-icon-class:before {
			content: "\21D4";
			font-weight: bold;
			font: icon;
			font-size: large;
		}

		.paramsContainer {
			overflow: auto;
			width: 100%;
			height: 255px;
			border-color: #ceced2;
			border-radius: 6px;
			border-style: solid;
			border-width: 1px;
		}

		.matchParamsContainer {
            min-height: 204px !important;
		}

		.filterParamsContainer {
			width: 100%;
			height: 255px;
			border-color: #ceced2;
			border-radius: 6px;
			border-style: solid;
			border-width: 1px;
			overflow: hidden;
		}

		.filterInput {
			height: 10%;
		}

		.filterAttrParamsContainer {
			width: inherit;
			height: calc(0.9*240px);
			overflow: auto;
		}

		.paramsContainer .k-listbox {
			border: none;
			width: 100%;
			height: 100%
		}

        #matchedParameters {
            border: none;
            width: 100%;
            height: 100%
        }

		.matchItem {
			margin-top: 0.4em;
			border: #ceced2;
		}

		.matchItem > div {
			white-space: nowrap;
		}

		.paramsContainer .k-listbox .k-item {
			border: none;
		}

		.paramsContainer .k-listbox .k-item.k-state-selected {
			color: #6699FF;
			background-color: white;
			border: none;
		}

		.matchButtonContainer {
			height: 255px;
			display: flex;
			align-items: center;
			justify-content: center;
		}

		.form-horizontal .form-group {
			margin-right: 0;
			margin-left: 0;
		}

		#backgroundDownloadCheckbox {
			-webkit-appearance: checkbox !important;
		}

		.deleteButton {
			background-color: rgba(1, 0, 0, 0);
		}

		div.k-treeview {
			overflow: unset !important;
		}

		#importForm {
			height: 100%;
		}

		.panelBar {
			height: 99%;
		}

		#sectionMatching > .k-content {
			border-width: 0;
            height: 100%;
		}
	</style>




<script src="~/js/jquery.fancybox.min.js"></script>
<script type="text/x-kendo-tmpl" id="template">
		<div class="matchItem k-widget">
			<div>
				<span>
					<span>
                        <input type="checkbox" #=IsKey ? checked='checked' : '' # data-bind="checked: IsKey" disabled='disabled'/>
                    </span>
					<span>#:ColumnName#</span>
					<span>-</span>
					<span>#:AttributeDescription#</span>
					<span #=IsReadOnly ? 'style="display: none"' : '' #>
                        <a class="k-button k-delete-button deleteButton" href="\\#">
                            <span class="k-icon k-i-close"></span>
                        </a>
                    </span>
				</span>
			</div>
		</div>
</script>
    
    
<script>
    var dataCountForBackgroundLoading = 10000;
    var dataSource = new kendo.data.DataSource({
        data: []
    });


    $(document).ready(function() {
        $("#filter").on("input", filterAttributes);
        $("#filter").keydown(function (e) {
            //return or enter key
            if (e.keyCode == 13) {
                e.preventDefault();
                return false;
            }
        });

        $("#matchButton").kendoButton({
            iconClass: "my-custom-icon-class",
            enable: false,
            click: copyElementToMatchingSection
        });

        $("#loadButton").kendoButton({
            enable: false,
            click: saveChanges
        });

        $("#matchedParameters").kendoListView({
            dataSource: dataSource,
            template: kendo.template($("#template").html()),
            remove: removeMatchedParameters,
            dataBound: function () {
                $("#loadButton").data('kendoButton').enable(dataSource.data().length !== 0);
            }
        }).data("kendoListView");

        $("#excelColumnsListBox").kendoListBox({
            draggable: false,
            selectable: "single",
            dataValueField: "Id",
            dataTextField: "Name",
            change: findAttributesBySelectedColumnName
        });

        initAttributesTree();

        $('#upload_panelbar')
            .kendoPanelBar()
            .data('kendoPanelBar')
            .expand('li[data-expand]');

        $('#files').kendoUpload({
            multiple: false,
            localization: {
                select: 'Загрузить Файл',
                clearSelectedFiles: 'Очистить',
                //invalidMaxFileSize: "Максимальный размер файла - 4 МБ"
            },
            async: {
                autoUpload: false,
                saveUrl: '@Url.Action("ParseFileColumns", "DataImportByTemplate")'
            },
            select: showConfirmationAboutFileStructure,
            validation: {
                allowedExtensions: ['.xls', '.xlsx'],
                //maxFileSize: 4194304
            },
            success: onFileUpload,
            error: function(e) {
                $("#excelColumnsListBox").data("kendoListBox").setDataSource([]);
                resetData();
                if (e.XMLHttpRequest.responseText) {
                    Common.ShowError(e.XMLHttpRequest.responseText);
                } else {
                    Common.ShowError("Не удалось загрузить выбранный файл");
                }
            },
            clear: function(e) {
                $("#excelColumnsListBox").data("kendoListBox").setDataSource([]);
                resetData();
            }
        }).data('kendoUpload');
    });

    






    function selectAssist(treeData, searchText) {
        var select = { uid: null, filterText: null };
        // Полное совпадение
        var exactMatch = treeData.filter(i => i.text.toLowerCase() === searchText.toLowerCase());
        if (exactMatch.length === 1) {
            select.uid = exactMatch[0].uid;
            select.filterText = searchText;
            return select;
        }
        var wordArray = searchText.toLowerCase().split(' ');
        // Поиск по первым двум словам
        if (wordArray.length > 1) {
            var twoWordFilter = wordArray[0] + ' ' + wordArray[1];
            var twoWordMatch = treeData.filter(i => i.text.toLowerCase().includes(twoWordFilter));
            if (twoWordMatch.length === 1) {
                select.uid = twoWordMatch[0].uid;
                select.filterText = twoWordFilter;
                return select;
            }
            if (twoWordMatch.length > 1) {
                select.filterText = twoWordFilter;
                return select;
            }
        }
        // Поиск по первому слову
        var firstWordFilter = wordArray[0];
        var firstWordMatch =
            treeData.filter(i => i.text.toLowerCase().includes(firstWordFilter));
        if (firstWordMatch.length === 1) {
            select.uid = firstWordMatch[0].uid;
            select.filterText = firstWordFilter;
            return select;
        }
        if (firstWordMatch.length > 1) {
            select.filterText = firstWordFilter;
            return select;
        }
        return select;
    }



    function getAttributesDataSource(data) {
        var source = [];
        if (data && data.length) {
            var parantItems = data.filter(function(item) {
                return (item.ParentId == null);
            });
            if (parantItems.length) {
                for (var i = 0; i < parantItems.length; i++) {
                    var child = {};
                    child.text = parantItems[i].Description;
                    var childItems = data.filter(function(item) {
                        return item.ParentId === parantItems[i].AttributeId;
                    });
                    if (childItems) {
                        child.items = $.map(childItems,
                            function(item) {
                                return {
                                    id: item.AttributeId,
                                    text: item.Description,
                                    parentId: item.ParentId
                                };
                            });
                    }
                    source.push(child);
                }
            }
        }
        return source;
    }


    function resetData() {
        $("#matchButton").data('kendoButton').enable(false);
        $('#filter').val('').trigger('input', [true]);
        dataSource.data([]);
        $("#loadButton").data('kendoButton').enable(false);
    }


    function filter(dataSource, query) {
        var hasVisibleChildren = false;
        var data = dataSource instanceof kendo.data.HierarchicalDataSource && dataSource.data();
        for (var i = 0; i < data.length; i++) {
            var item = data[i];
            var text = item.text.toLowerCase();
            var itemVisible = query === "" || text.indexOf(query) >= 0;
            var anyVisibleChildren = filter(item.children, query);
            hasVisibleChildren = hasVisibleChildren || anyVisibleChildren || itemVisible;
            item.hidden = (!item.hasChildren && !itemVisible) || (item.hasChildren && !anyVisibleChildren);
        }
        if (data) {
            dataSource.filter({ field: "hidden", operator: "neq", value: true });
        }
        return hasVisibleChildren;
    }


    function copyElementToMatchingSection(e) {
        var attributesTreeView = $("#treeview").data('kendoTreeView');
        var excelColumnsListBox = $("#excelColumnsListBox").data('kendoListBox');
        if (attributesTreeView && excelColumnsListBox) {
            var selectedAttribute = attributesTreeView.dataItem(attributesTreeView.select());
            var selectedFileColumn = excelColumnsListBox.dataItem(excelColumnsListBox.select());
            if (selectedAttribute && selectedFileColumn) {
                attributesTreeView.enable(attributesTreeView.select(), false);
                excelColumnsListBox.enable(excelColumnsListBox.select(), false);
                $("#matchButton").data('kendoButton').enable(false);
                var matchedParametersList = $("#matchedParameters").data('kendoListView');
                matchedParametersList.dataSource.add({
                    IsKey: false,
                    IsReadOnly: false,
                    ColumnName: selectedFileColumn.Name,
                    ColumnIndex: selectedFileColumn.Id,
                    ColumnId: selectedFileColumn.Id,
                    ColumnUid: selectedFileColumn.uid,
                    AttributeDescription: selectedAttribute.text,
                    AttributeId: selectedAttribute.id,
                    AttributeUid: selectedAttribute.uid
                });
                $("#loadButton").data('kendoButton').enable(true);
            }
        }
    }


    function saveChanges() {
        kendo.ui.progress($('#importForm'), true);
        $("#loadButton").data('kendoButton').enable(false);
        var matchedParameters = $("#matchedParameters").data('kendoListView');
        var data = matchedParameters.dataSource.data();
        var columns = $.map(data,
            function(item) {
                return {
                    ColumnIndex: item.ColumnIndex,
                    AttributeId: item.AttributeId
                };
            });

        var file = $('#files').data('kendoUpload').getFiles()[0];
        var isBackgroundDownload = $('#backgroundDownloadCheckbox').is(":checked");

        var formData = new FormData();
        formData.append('@nameof(ModelingObjectsUpdatingModel.File)', file.rawFile);
        formData.append('@nameof(ModelingObjectsUpdatingModel.IsBackgroundDownload)', isBackgroundDownload);
        for (var i = 0; i !== columns.length; i++) {
            formData.append("columns[" + i + "].ColumnIndex", columns[i].ColumnIndex);
            formData.append("columns[" + i + "].AttributeId", columns[i].AttributeId);
        }
        $.ajax({
            type: 'POST',
            url: '@Url.Action("UpdateModelObjects", "Modeling")',
            data: formData,
            contentType: false,
            processData: false,
            success: function(data) {
                if (data.Errors) {
                    var errors = getErrors(data.Errors);
                    Common.ShowError(errors);
                    return;
                } else {
                    if (data.importDataLogId) {
                        Common.ShowMessage("Процесс добавлен в очередь. Результат будет отправлен на почту.");
                        var goToJournalBtn = $("#goToJournalBtn");
                        goToJournalBtn.removeClass('k-state-disabled');
                        goToJournalBtn.attr('href', "/RegistersView/DataImporter?Transition=1&80100100=" + data.importDataLogId);
                    }
                    else if (data.fileName) {
                        Common.ShowMessage("Обновление завершено. Идет скачивание файла с результатом операции");
                        window.location = '@Url.Action("DownloadExcelFileFromSessionByName", "Modeling")' + "?fileName=" + data.fileName;
                    } else {
                        Common.ShowError("Неизвестная ошибка. Обратитесь к администратору.");
                    }
                }
            },
            error: function(response) {
                Common.ShowError(response.responseText);
            },
            complete: function(data) {
                kendo.ui.progress($('#importForm'), false);
                $("#loadButton").data('kendoButton').enable(true);
            }
        });
    }


    function onFileUpload(e) {
        if (e.operation === "upload") {
            var columnNames = e.response.ColumnsNames;
            var dataCount = e.response.DataCount;
            var excelColumnsListBox = $("#excelColumnsListBox").data("kendoListBox");
            excelColumnsListBox.setDataSource(columnNames);
            if (dataCount > dataCountForBackgroundLoading) {
                $("#backgroundDownloadCheckbox").prop('checked', true);
            } else {
                $("#backgroundDownloadCheckbox").prop('checked', false);
            }
            resetData();
            if (excelColumnsListBox.items() != null) {
                var idColumn = excelColumnsListBox.items()[0];
                excelColumnsListBox.enable(idColumn, false);
                var idData = excelColumnsListBox.dataItem(idColumn);
                var matchingListView = $("#matchedParameters").data('kendoListView');
                matchingListView.dataSource.add({
                    IsKey: true,
                    IsReadOnly: true,
                    ColumnName: idData.Name,
                    ColumnIndex: idData.Id,
                    AttributeDescription: 'ИД',
                    AttributeId: 70200100
                });
            }
        }
    }


    function findAttributesBySelectedColumnName(e) {
        var attributesTreeView = $("#treeview").data('kendoTreeView');
        if (attributesTreeView) {
            var selectedColumns = e.sender.select();
            var selectedColumnData = e.sender.dataItem(selectedColumns[0]);
            var attributesDataSource = attributesTreeView.dataSource;
            var attributesTreeData = attributesDataSource.data().map(i => i.items.map(j => j)).flat();
            attributesTreeView.select(null);
            $('#filter').val('').trigger('input');
            var select = selectAssist(attributesTreeData, selectedColumnData.Name);
            var node = (select.uid != null) ? attributesTreeView.findByUid(select.uid) : null;
            $('#filter').val(select.filterText).trigger('input');
            attributesTreeView.select(node);
            if (node != null)
                attributesTreeView.trigger('select', { node: node });
            var selectedAttribute = attributesTreeView.select();
            var data = attributesTreeView.dataItem(selectedAttribute);
            if (data) {
                $("#matchButton").data('kendoButton').enable(true);
            }
        }
    }


    function removeMatchedParameters(e) {
        var excelColumnsListBox = $("#excelColumnsListBox").data("kendoListBox");
        excelColumnsListBox.enable($(`.k-item[data-uid=${e.model.ColumnUid}]`), true);
        var attributesTreeView = $("#treeview").data("kendoTreeView");
        var attrElement = attributesTreeView.dataSource.get(e.model.AttributeId);
        attrElement.set("enabled", true);
    }


    function filterAttributes(event, enableAllTreeViewValues) {
        var query = this.value.toLowerCase();
        var attributesTreeView = $("#treeview").data("kendoTreeView");
        // Отключаем кнопку сопоставления после изменения результатов поиска и сбрасываем выделение
        $("#matchButton").data('kendoButton').enable(false);
        attributesTreeView.select(null);
        attributesTreeView.dataItem(null);
        var dataSource = attributesTreeView.dataSource;
        filter(dataSource, query);
        attributesTreeView.expand(".k-item");
        if (enableAllTreeViewValues)
            attributesTreeView.enable(true);
    }


    function setMatchButtonVisibility(e) {
        var item = this.dataItem(e.node);
        if (!item.parentId) {
            e.preventDefault();
            return;
        }
        var columnsFromExcel = $("#excelColumnsListBox").data('kendoListBox');
        if (columnsFromExcel) {
            var selectedColumn = columnsFromExcel.select();
            var selectedColumnData = columnsFromExcel.dataItem(selectedColumn);
            if (selectedColumnData) {
                $("#matchButton").data('kendoButton').enable(true);
            }
        }
    }

    function initAttributesTree() {
        var attributesTree = $("#treeview").kendoTreeView({
            loadOnDemand: false,
            autoScroll: true,
            select: setMatchButtonVisibility
        }).data('kendoTreeView');

        var modelAttributesSerialized = '@Json.Serialize(ViewBag.Attributes)';
        var data = JSON.parse(modelAttributesSerialized);
        attributesTree.setDataSource(getAttributesDataSource(data));
        attributesTree.expand(".k-item");
    }


    function showConfirmationAboutFileStructure(e) {
        var upload = e.sender;
        Common.UI.ShowConfirm({
            title: 'Подтверждение',
            content: 'Для корректной загрузки данных соблюдайте следующие требования к загружаемому файлу:' +
                '<br/> 1 столбец - ИД',
            captionYes: "Загрузить",
            captionNo: "Отменить",
            onSuccess: function() {
                upload.upload();
            },
            onFail: function() {
                upload.clearAllFiles();
                var window = $(this).closest('[data-role=window]').data('kendoWindow');
                window.close();
                window.destroy();
            }
        });
    }
</script>