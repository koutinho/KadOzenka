@using ObjectModel.Directory
@model KadOzenka.Web.Models.Modeling.AutomaticModelingModel

<!-- Модальное окно для загрузки Excel-файла -->
<div id="downloadFilesModalWnd" style="display: none; padding: 2%;">
    <div class="form-horizontal col-sm-12">
        <div class="form-group">
            <div class="col-sm-12">
                <input name="file" id="file" type="file" aria-label="files" accept=".xls,.xlsx" />
            </div>
        </div>
    </div>
</div>

<div class="form-horizontal" style="padding: 2%;">
    <div class="form-group">
        <div class="col-sm-2">
            @Html.CustomLabel("Модель")
        </div>
        <div class="col-sm-9">
            @(Html.Kendo().DropDownListFor(m => m.Name)
                .DataTextField("Name")
                .DataValueField("Name")
                .Enable(false))
        </div>
    </div>
    <div class="form-group">
        <div class="col-sm-2">
            @Html.CustomLabel("Группа")
        </div>
        <div class="col-sm-9">
            @(Html.Kendo().DropDownListFor(m => m.GroupName)
                .DataTextField("Name")
                .DataValueField("Name")
                .Enable(false))
        </div>
    </div>
    <div class="form-group">
        <div class="col-sm-2">
            @Html.CustomLabel("Тур")
        </div>
        <div class="col-sm-9">
            @(Html.Kendo().DropDownListFor(m => m.TourYear)
                .DataTextField("Name")
                .DataValueField("Name")
                .Enable(false))
        </div>
    </div>
    <div class="form-group">
        <div class="col-sm-2">
            @Html.CustomLabel("Тип")
        </div>
        <div class="col-sm-9">
            @(Html.Kendo().DropDownList()
                .Name("AlgorithmType")
                .DataTextField("Name")
                .DataValueField("Name")
                .Value(KoAlgoritmType.Exp.GetEnumDescription())
                .Enable(false))
        </div>
    </div>
    @*<div class="form-group" id="previousTourCoefficientsBlock" style="padding: 1% 0 2% 0">
        <div>Коэффициенты из предыдущего тура</div>
        <div id="gridWithPreviousTourCoefficients"></div>
    </div>*@
    <div class="form-group">
        <a class="k-button k-button-icon" id="uploadBtn" style="width:250px;">
            <span class="k-icon k-i-upload" style="padding-right: 30%"></span>
            Загрузить объекты
        </a>
    </div>
    <div class="form-group" style="padding: 1% 0 2% 0">
        @*<div>Объекты с рассчитанной МС</div>*@
        <div id="grid"></div>
    </div>
    @*<div class="form-group" style="padding: 1% 0 2% 0">
        <div>Объекты, у которых нельзя рассчитать МС</div>
        <div id="gridForObjectsWithErrors"></div>
    </div>*@
</div>



<style>
    #grid .k-grid-header .k-header {
        text-align: center;
    }

    #grid {
        text-align: center;
    }
</style>



<script id="GridToolbarTemplate" type="text/x-kendo-template">
    <div style="float: left">
        <a class="k-button k-button-icon" id="saveBtn-#: gridId #" style="width:120px;">
            <span class="k-icon k-i-save" style="padding-right: 30%"></span>
            Сохранить
        </a>
        <a class="k-button k-button-icon" id="exportBtn-#: gridId #" style="width:120px;">
            <span class="k-icon k-i-download" style="padding-right: 30%"></span>
            Выгрузить
        </a>
    </div>
</script>


<script src="~/js/common-modals.js"></script>
<script src="~/js/custom-validation.js"></script>
<script>
    var successfulObjectsGridId = "grid";
    var errorObjectsGridId = "gridForObjectsWithErrors";

    $(document).ready(function () {
        updateGrid();
        initFileUploader();
        //initFactorsGrid();

        $('#uploadBtn').on('click', uploadObjects);
    });



    //TODO код закомментирован по просьбе заказчиков, в дальнейшем он будет использоваться
    @*function initFactorsGrid() {
        $.ajax({
            url: '@Url.Action("GetCoefficientsForPreviousTour", "Modeling", new {modelId = Model.Id})',
            success: function (factors) {
                generateGridWithFactors(factors);
            },
            error: function (response) {
                Common.ShowError(response.responseText);
            }
        });
    }*@

    //function generateGridWithFactors(response) {
    //    var fieldPrefix = "Coefficient_";
    //    var columns = response.map(function (factor) {
    //        return { field: fieldPrefix + factor.FactorId, title: factor.Name};
    //    });
    //    var coefficients = new Object;
    //    $.each(response, function(index, factor) {
    //        var fieldName = fieldPrefix + factor.FactorId;
    //        coefficients[fieldName] = factor.Coefficient;
    //    });
    //    $("#gridWithPreviousTourCoefficients").kendoGrid({
    //         columns: columns,
    //         dataSource: {
    //             data: [coefficients]
    //         }
    //    });
    //}

    

    function updateGrid() {
        kendo.ui.progress($('body'), true);
        $.ajax({
            url: '@Url.Action("GetObjectsForModel", "Modeling", new {modelId = Model.Id})',
            success: function (result) {
                generateGrid(result.successfulModels, successfulObjectsGridId,
                    setIsExcludedCheckboxForSuccessfulObjects,
                    setIsForTrainingCheckboxForSuccessfulObjects, setIsForControlCheckboxForSuccessfulObjects,
                    selectAllObjectsForTrainingForSuccessfulObjects, selectAllObjectsForControlForSuccessfulObjects,
                    saveSuccessfulObjects, exportSuccessfulObjectsToExcel);
                //TODO код закомментирован по просьбе заказчиков, в дальнейшем он будет использоваться
                //generateGrid(result.errorModels, errorObjectsGridId,
                //    setIsExcludedCheckboxForErrorObjects,
                //    setIsForTrainingCheckboxForErrorObjects, setIsForControlCheckboxForErrorObjects,
                //    selectAllObjectsForTrainingForErrorObjects, selectAllObjectsForControlForErrorObjects,
                //    saveErrorObjects, exportErrorObjectsToExcel);
            },
            error: function (response) {
                Common.ShowError(response.responseText);
            },
            complete: function() {
                kendo.ui.progress($('body'), false);
            }
        });
    }


    function generateGrid(data, gridId, excludeFunc, trainingFunc, controlFunc, trainingAllFunc, controlAllFunc, saveFunc, exportFunc) {
        var dataSource = new kendo.data.DataSource({
            transport:{
                read:  function(options){
                    options.success(data);
                }
            },
            error: function (e) {
                Common.ShowError(e.xhr.responseText);
                kendo.ui.progress($('body'), false);
            },
			schema: {
				model: {
                    id: "Id",
                    EmptyField: "",
					fields: {
						Id: {editable: false, nullable: true},
						CadastralNumber: { editable: false },
                        Price: { type: "number", editable: false },
                        PriceFromModel: { type: "number", editable: false },
                        IsExcluded: { type: "boolean", editable: true },
                        IsForTraining: { type: "boolean", editable: true },
                        IsForControl: { type: "boolean", editable: true },
                        ModelingPrice: { type: "number", editable: false },
                        Percent: { type: "number", editable: false }
					}
                },
                data: function (response) {
                    kendo.ui.progress($('body'), false);
                    return response;
                }
            },
			pageSize: 15
        });
        var grid = $("#" + gridId).data("kendoGrid");
        if (grid) {
            $("#" + gridId).empty().kendoGrid();
        }
        $("#" + gridId).kendoGrid({
            toolbar: kendo.template($("#GridToolbarTemplate").html())({ gridId: gridId}),
            filterable: {
                extra: true,
                operators: {
                    string: {
                        startswith: "Начинается с",
                        eq: "Равно",
                        neq: "Не равно"
                    },
                    number: {
                        gte: "Больше",
                        lte: "Меньше"
                    }
                }
            },
            columns: generateColumns(gridId),
            dataSource: dataSource,
            pageable: true,
            sortable: true,
            resizable: true
        });

        $("#" + gridId + " .k-grid-content").on("change", "input.isExcluded", excludeFunc);
        $("#" + gridId + " .k-grid-content").on("change", "input.isForTraining", trainingFunc);
        $("#" + gridId + " .k-grid-content").on("change", "input.IsForControl", controlFunc);
        $("#headerCheckboxIsForTraining-" + gridId).on("click", trainingAllFunc);
        $("#headerCheckboxIsForControl-" + gridId).on("click", controlAllFunc);
        $('#saveBtn-' + gridId).on('click', saveFunc);
        $('#exportBtn-' + gridId).on('click', exportFunc);
    }


    function generateColumns(gridId) {
        var model = '@Json.Serialize(Model.Attributes)';
        var modelAttributes = JSON.parse(model);
        var additionalColumns = modelAttributes.map(function (attribute) {
            var field = "Coefficients == undefined || Coefficients.find(x => x.AttributeId === " + attribute.AttributeId + " && x.Value != null) == undefined " +
                "? EmptyField " +
                ": Coefficients.find(x => x.AttributeId === " + attribute.AttributeId + " && x.Value != null).Coefficient";
            return {
                title: attribute.AttributeName,
                field: field,
                filterable: false,
                sortable: false
            };
        });
        var baseColumnsBeforeMarks = [
            {
                title: "Исключен из расчета",
                field: "IsExcluded",
                template: '<input type="checkbox" #= IsExcluded ? \'checked="checked"\' : "" # class="chkbx, isExcluded" />',
                filterable: false,
                sortable: false
            },
            {
                title: "Кадастровый номер",
                field: "CadastralNumber",
                template: '<a href="/ObjectCard?ObjId=#=MarketObjectId#&RegisterViewId=MarketObjects&isVertical=true&useMasterPage=true" target="_blank">#=CadastralNumber#</a>',
                sortable: false,
                width: 200
            },
            {
                title: "Цена",
                field: "Price",
                template: '#: kendo.format("{0:c}", Price)#',
                filterable: true,
                sortable: true
            },
            {
                title: "Спрогнозированная цена",
                field: "PriceFromModel",
                template: '#: PriceFromModel == null ? "" : kendo.format("{0:c}", PriceFromModel) #',
                filterable: true,
                sortable: true
            }
        ];
        var selectAllForTrainingId = "headerCheckboxIsForTraining-" + gridId;
        var selectAllForControlId = "headerCheckboxIsForControl-" + gridId;
        var baseColumnsAfterMarks = [
            //{
            //    title: "МС",
            //    field: "ModelingPrice",
            //    template: '#: ModelingPrice == null ? "" : kendo.format("{0:c}", ModelingPrice) #',
            //    filterable: true,
            //    sortable: true
            //},
            //{
            //    title: "%",
            //    field: "Percent",
            //    template: '#: Percent == null ? "" : kendo.toString(Percent, "n2") #',
            //    filterable: true,
            //    sortable: true
            //},
            {
                title: "Признак выбора аналога в обучающую модель",
                field: "IsForTraining",
                headerTemplate: "<input type='checkbox' id='" + selectAllForTrainingId + "' class='k-checkbox header-checkbox'>" +
                    "<label class='k-checkbox-label' for='" + selectAllForTrainingId + "'>Признак выбора аналога в обучающую модель</label>",
                template: '<input type="checkbox" #= IsForTraining ? \'checked="checked"\' : "" # class="chkbx, isForTraining" />',
                filterable: false,
                sortable: false
            },
            {
                title: "Признак выбора аналога в контрольную модель",
                field: "IsForControl",
                headerTemplate: "<input type='checkbox' id='" + selectAllForControlId + "' class='k-checkbox header-checkbox'>" +
                    "<label class='k-checkbox-label' for='" + selectAllForControlId + "'>Признак выбора аналога в контрольную модель</label>",
                template: '<input type="checkbox" #= IsForControl ? \'checked="checked"\' : "" # class="chkbx, IsForControl" />',
                filterable: false,
                sortable: false
            }
        ];
        return baseColumnsBeforeMarks.concat(additionalColumns).concat(baseColumnsAfterMarks);
    }


    //Установка галочки "Исключить из расчета"
    function setIsExcludedCheckboxForSuccessfulObjects(e) {
        var dataItem = gerGridRow(e, successfulObjectsGridId);
        setIsExcludedCheckbox(dataItem, this);
    }
    //function setIsExcludedCheckboxForErrorObjects(e) {
    //    var dataItem = gerGridRow(e, errorObjectsGridId);
    //    setIsExcludedCheckbox(dataItem, this);
    //}
    function setIsExcludedCheckbox(dataItem, checkbox) {
        dataItem.IsExcluded = checkbox.checked;
        dataItem.IsDirty = true;
    }


    //Установка галочки для отнесения в Обучающую выборку
    function setIsForTrainingCheckboxForSuccessfulObjects(e) {
        var dataItem = gerGridRow(e, successfulObjectsGridId);
        setIsForTrainingCheckbox(dataItem, this);
    }
    //function setIsForTrainingCheckboxForErrorObjects(e) {
    //    var dataItem = gerGridRow(e, errorObjectsGridId);
    //    setIsForTrainingCheckbox(dataItem, this);
    //}
    function setIsForTrainingCheckbox(dataItem, checkbox) {
        var isChecked = checkbox.checked;
        if (dataItem.IsForControl && isChecked) {
            Common.ShowError("Объект относится к контрольной выборке, нельзя отнести его в обучающую выборку");
            dataItem.IsForTraining = false;
            checkbox.checked = false;
        }
        else {
            dataItem.IsForTraining = isChecked;
            dataItem.IsDirty = true;
        }
    }


    //Установка галочки для отнесения в Контрольную выборку
    function setIsForControlCheckboxForSuccessfulObjects(e) {
        var dataItem = gerGridRow(e, successfulObjectsGridId);
        setIsForControlCheckbox(dataItem, this);
    }
    //function setIsForControlCheckboxForErrorObjects(e) {
    //    var dataItem = gerGridRow(e, errorObjectsGridId);
    //    setIsForControlCheckbox(dataItem, this);
    //}
    function setIsForControlCheckbox(dataItem, checkbox) {
        var isChecked = checkbox.checked;
        if (dataItem.IsForTraining && isChecked) {
            Common.ShowError("Объект относится к обучающей выборке, нельзя отнести его в контрольную выборку");
            dataItem.IsForControl = false;
            checkbox.checked = false;
        }
        else {
            dataItem.IsForControl = isChecked;
            dataItem.IsDirty = true;
        }
    }


    function gerGridRow(e, gridId) {
        var grid = $("#" + gridId).data("kendoGrid");
        var dataItem = grid.dataItem($(e.target).closest("tr"));
        return dataItem;
    }


    //Установка галочки для отнесения ВСЕХ объектов в Обучающую выборку
    function selectAllObjectsForTrainingForSuccessfulObjects() {
        selectAllObjectsForTraining(successfulObjectsGridId);
    }
    //function selectAllObjectsForTrainingForErrorObjects() {
    //    selectAllObjectsForTraining(errorObjectsGridId);
    //}
    function selectAllObjectsForTraining(gridId) {
        var grid = $("#" + gridId).data("kendoGrid");
        var headerState = $("#headerCheckboxIsForTraining-" + gridId).prop("checked");
        var data = getObjectsFromGrid(gridId);
        for (var i = 0; i < data.length; i++) {
            if (data[i].IsForControl && headerState) {
                continue;
            }
            data[i].IsForTraining = headerState;
            setCheckboxState(grid, data[i]);
        }
        grid.refresh();
    }


    //Установка галочки для отнесения ВСЕХ объектов в Контрольную выборку
    function selectAllObjectsForControlForSuccessfulObjects() {
        selectAllObjectsForControl(successfulObjectsGridId);
    }
    //function selectAllObjectsForControlForErrorObjects() {
    //    selectAllObjectsForControl(errorObjectsGridId);
    //}
    function selectAllObjectsForControl(gridId) {
        var grid = $("#" + gridId).data("kendoGrid");
        var headerState = $("#headerCheckboxIsForControl-" + gridId).prop("checked");
        var data = getObjectsFromGrid(gridId);
        for (var i = 0; i < data.length; i++) {
            if (data[i].IsForTraining && headerState) {
                continue;
            }
            data[i].IsForControl = headerState;
            setCheckboxState(grid, data[i]);
        }
        grid.refresh();
    }

    function setCheckboxState(grid, dataItem) {
        dataItem.IsDirty = true;
        grid.tbody.find("tr[data-uid='" + dataItem.uid + "']")
            .find(".checkbox")
            .attr("checked", "checked");
    }


    //Сохранение объектов
    function saveSuccessfulObjects() {
        saveObjects(successfulObjectsGridId);
    }
    //function saveErrorObjects() {
    //    saveObjects(errorObjectsGridId);
    //}
    function saveObjects(gridId) {
        var dirtyObjects = [];
        var objects = getObjectsFromGrid(gridId);
        for (var i = 0; i < objects.length; i++) {
            if (objects[i].IsDirty) {
                var simpleObject = {
                    Id: objects[i].Id,
                    IsDirty: objects[i].IsDirty,
                    IsExcluded: objects[i].IsExcluded,
                    IsForTraining: objects[i].IsForTraining,
                    IsForControl: objects[i].IsForControl
                };
                dirtyObjects.push(simpleObject);
            }
        }
        kendo.ui.progress($('body'), true);
		$.ajax({
			type: 'POST',
			url: '@Url.Action("ChangeObjectsStatusInCalculation", "Modeling")',
            data: { objects: JSON.stringify({ objects: dirtyObjects }) },
			success: function (response) {
                Common.ShowMessage(response.Message);
            },
			error: function(response) {
				Common.ShowError(response.responseText);
			},
			complete: function() {
				kendo.ui.progress($('body'), false);
			}
		});
    }


    //Выгрузка объектов в Эксель
    function exportSuccessfulObjectsToExcel() {
        exportObjectsToExcel(successfulObjectsGridId);
    }
    //function exportErrorObjectsToExcel() {
    //    exportObjectsToExcel(errorObjectsGridId);
    //}
    function exportObjectsToExcel(gridId) {
        var modelId = '@Model.Id';
        var data = getObjectsFromGrid(gridId);
        var objectIds = data.map(function (attribute) {
            return attribute.Id;
        });
        kendo.ui.progress($('body'), true);
        $.ajax({
            type: 'POST',
            url: '@Url.Action("ExportModelObjectsToExcel", "Modeling")',
            data: { objectIdsStr: JSON.stringify({ 'objectIds': objectIds }), modelId: modelId},
            success: function (response) {
                var url =
                    '@Url.Action("DownloadModelObjectsFromExcel", "Modeling", new {modelName = Model.Name})&fileName=' +
                    response.FileName;
                window.location = url;
            },
            error: function(response) {
                Common.ShowError(response.responseText);
            },
            complete: function() {
                kendo.ui.progress($('body'), false);
            }
        });
    }


    //собираем данные так, как их видит юзер (с учетом фильтров и сортировки)
    function getObjectsFromGrid(gridId) {
        var dataSource = $("#" + gridId).data("kendoGrid").dataSource;
        var filteredDataSource = new kendo.data.DataSource({
            data: dataSource.data(),
            filter: dataSource.filter(),
            sort: dataSource.sort()
        });
        filteredDataSource.read();
        var data = filteredDataSource.view();
        return data;
    }


    function uploadObjects() {
        var upload = $("#file").data("kendoUpload");
        upload.clearAllFiles();
        upload.removeAllFiles();
        var modal = $("#downloadFilesModalWnd");
        ShowModal(modal, '50%', '20%', "Загрузка объектов модели");
    }


    function initFileUploader() {
        $('#file').kendoUpload({
            multiple: false,
            localization: {
                select: 'Загрузить Файл',
                clearSelectedFiles: 'Очистить'
            },
            async: {
                autoUpload: true,
                saveUrl: '@Url.Action("ImportModelObjectsFromExcel", "Modeling")'
            },
            validation: {
                allowedExtensions: ['.xls', '.xlsx']
            },
            success: function (data) {
                Common.ShowMessage(data.response.Message);
                var modal = $('#downloadFilesModalWnd');
                modal.data("kendoWindow").close();
            },
            error: function (e) {
                $('html').html(e.XMLHttpRequest.responseText);
            }
        }).data('kendoUpload');
    }

</script>

