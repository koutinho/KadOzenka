@using KadOzenka.Web.Helpers
@model KadOzenka.Web.Models.Modeling.AutomaticFactorModel

@using (Html.BeginForm("EditAutomaticModelFactor", "Modeling", FormMethod.Post, new {id = "updateFactorForm"}))
{
    @Html.HiddenFor(x => x.Id)
    @Html.HiddenFor(x => x.ModelId)
    @Html.HiddenFor(x => x.AlgorithmType)
    
<div class="form-horizontal col-sm-12" style="margin-top: 10px">
    <div class="form-group" style="padding-bottom: 1%;">
        <div class="col-sm-8 col-sm-offset-2">
            <span class="k-icon k-i-warning"></span>
            После сохранения будут сброшены результаты обучения модели
        </div>
    </div>
    @if (!Model.IsNewFactor)
    {
        <div class="form-group">
            <div class="col-sm-3">
                @Html.CustomLabelFor(x => x.AlgorithmType, NotSetRequired: true)
            </div>
            <div class="col-sm-9">
                @(Html.Kendo().DropDownListFor(m => m.AlgorithmTypeStr)
                    .DataTextField("Name")
                    .DataValueField("Name")
                    .Enable(false))
            </div>
        </div>
    }
    <div class="form-group">
        <div class="col-sm-3">
            @Html.CustomLabelFor(x => x.FactorId)
        </div>
        <div class="col-sm-9">
            @Html.KendoDropDownListTreeWithButton(m => m.FactorId, Model.Attributes, isReadonly: !Model.IsNewFactor)
        </div>
    </div>
    <div class="form-group">
        <div class="col-sm-3">
            @Html.CustomLabelFor(x => x.IsActive, NotSetRequired: true)
        </div>
        <div class="col-sm-9">
            @Html.KendoCheckBoxFor(x => x.IsActive, isReadonly: false)
        </div>
    </div>
    <div class="form-group">
        <div class="col-sm-3">
            @Html.CustomLabelFor(x => x.DictionaryName)
        </div>
        <div class="col-sm-9">
            @Html.HiddenFor(x => x.DictionaryId)
            @Html.KendoTextBoxFor(x => x.DictionaryName, isReadonly: false)
        </div>
    </div>
    <div class="form-group">
        <div class="col-sm-3">
            @Html.CustomLabel("Тип метки")
        </div>
        <div class="col-sm-9">
            @Html.KendoKoReferenceDropDownListFor(x => x.MarkType, 226,
                text: Model.MarkType.GetEnumDescription(), 
                value: ((long) Model.MarkType).ToString(),
                isReadonly: false, withOptionLabel: false)
        </div>
    </div>

    <div class="form-group">
        <div class="col-sm-2 col-sm-offset-8">
            <button class="btn btn-default btn-block" id="cancel">Отмена</button>
        </div>
        <div class="col-sm-2">
            <button class="btn btn-default btn-block" id="save">Сохранить</button>
        </div>
    </div>
</div>
}


<script>
    var marketObjectRegisterAttributeIds = [];


    $(document).ready(function() {
        $('#save').on('click', saveFactor);
        $('#cancel').on('click', closeWindow);
        
        @foreach (var d in Model.UnActiveAttributeIds)
        {
            @:marketObjectRegisterAttributeIds.push("@d");
        }

        var factorsTree = $('#@nameof(Model.FactorId)').data("kendoDropDownTree");
        factorsTree.bind("change", setActiveFlagState);
        setActiveFlagState();
    });



   

    function saveFactor(e) {
        e.preventDefault();
        kendo.ui.progress($('body'), true);
        var form = $('#updateFactorForm');
        var formObject = Common.Functions.FormToObject(form);
        formObject.FactorId = $('#@nameof(Model.FactorId)').data("kendoDropDownTree").value();
        $.ajax({
            type: form.attr('method'),
            url: form.attr('action'),
            data: formObject,
            success: function (response) {
                var timeout = 2000;
                if (response) {
                    timeout = 3500;
                    Common.ShowMessage("Данные сохранены. Процесс сбора данных для нового фактора поставлен в очередь.");
                } else {
                    Common.ShowMessage('Сохранение выполнено');
                }
                setTimeout(closeWindow, timeout);
            },
            error: function (response) {
                Common.ShowError(response.responseText);
            },
            complete: function() {
                kendo.ui.progress($('body'), false);
            }
        });
    }


    function setActiveFlagState() {
        var factorId = $('#@nameof(Model.FactorId)').data("kendoDropDownTree").value();
        if(!factorId)
            factorId = Number('@Model.FactorId');
        var isActiveElement = $('#@nameof(Model.IsActive)');
        if (marketObjectRegisterAttributeIds.includes(factorId)) {
            isActiveElement.prop("checked", false);
            isActiveElement.prop("disabled", true);
        } else {
            isActiveElement.prop("checked", true);
            isActiveElement.prop("disabled", false);
        }
    }


    function closeWindow() {
        Common.UI.CloseWindow('editFactorWindow', window.parent, true);
    }

</script>
