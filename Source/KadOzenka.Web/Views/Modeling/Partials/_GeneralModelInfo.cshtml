@model KadOzenka.Web.Models.Modeling.GeneralModelingModel

<div class="form-horizontal">
    <div class="form-group">
        <div class="col-sm-2">
            @Html.CustomLabelFor(x => x.Name)
        </div>
        <div class="col-sm-10">
            @Html.KendoTextBoxFor(x => x.Name, isReadonly: false)
        </div>
    </div>
    <div class="form-group">
        <div class="col-sm-2">
            @Html.CustomLabelFor(x => x.Description)
        </div>
        <div class="col-sm-10">
            @Html.KendoTextBoxFor(x => x.Description, isReadonly: false)
        </div>
    </div>
    <div class="form-group">
        <div class="col-sm-2">
            @Html.CustomLabelFor(x => x.Type)
        </div>
        <div class="col-sm-10">
            @Html.KendoEnumDropDownListFor(x => x.Type, isReadonly: false, withoutNull: true)
        </div>
    </div>
    <div class="form-group">
        <div class="col-sm-2">
            @Html.CustomLabelFor(x => x.AlgorithmTypeForCadastralPriceCalculation)
        </div>
        <div class="col-sm-10">
            @Html.KendoEnumDropDownListFor(x => x.AlgorithmTypeForCadastralPriceCalculation, isReadonly: false, withoutNull: true)
        </div>
    </div>
    <div class="form-group">
        <div class="col-sm-2">
            @Html.CustomLabelFor(x => x.TourId)
        </div>
        <div class="col-sm-10">
            @(Html.Kendo().DropDownListFor(m => m.TourId)
                .DataTextField("Text")
                .DataValueField("Value")
                .Filter(FilterType.Contains)
                .DataSource(source =>
                {
                    source.Read("GetRatingTours", "Tour");
                }))
        </div>
    </div>
    <div class="form-group">
        <div class="col-sm-2">
            @Html.CustomLabelFor(x => x.GroupId)
        </div>
        <div class="col-sm-10">
            @(Html.Kendo().DropDownListFor(m => m.GroupId)
                .DataTextField("Text")
                .DataValueField("Value")
                .Filter(FilterType.Contains)
                .DataSource(source =>
                {
                    source.Read(read => read.Action("GetGroups", "Modeling").Data("getParametersForGroup"));
                }))
        </div>
    </div>
</div>



<script src="~/js/custom-validation.js"></script>
<script>
    $(document).ready(function() {
        var groupDropDownList = $('#@nameof(Model.GroupId)').data("kendoDropDownList");
        groupDropDownList.bind("dataBound", setExistedGroup);

        var tourIdDropDownList = $('#@nameof(Model.TourId)').data("kendoDropDownList");
        tourIdDropDownList.bind("dataBound", reloadGroups);
        tourIdDropDownList.bind("change", reloadGroups);
    });


    function setExistedGroup() {
        var list = $('#@nameof(Model.GroupId)').data("kendoDropDownList");
        var groupId = '@Model.GroupId';
        list.value(groupId);
    }


    function reloadGroups() {
        var list = $('#@nameof(Model.GroupId)').data("kendoDropDownList");
        list.dataSource.filter("");
        list.dataSource.read();
    }

    function getParametersForGroup() {
        var selectedTour = $("#TourId").data("kendoDropDownList").value();
        return {
            tourId: selectedTour
        }
    }

    @*function initTours() {
        $('#@nameof(Model.TourId)').kendoDropDownList({
            dataTextField: 'Text',
            dataValueField: 'Value',
            filter: "contains",
            dataSource:
            {
                transport: {
                    read: {
                        url: '@Url.Action("GetRatingTours", "Tour")',
                        dataType: 'json'
                    }
                }
            },
            change: reloadGroups,
            dataBound: reloadGroups
        });
    }*@


    @*function reloadGroups() {
        var selectedTour = $("#TourId").data("kendoDropDownList").value();
        var initialTourId = '@Model.TourId';
        if (selectedTour === initialTourId) {
            return;
        }
        kendo.ui.progress($('body'), true);
        var dataSource = new kendo.data.DataSource({
            transport: {
                read: {
                    url: '@Url.Action("GetGroups", "Modeling")',
                    data: { tourId: selectedTour},
                    dataType: 'json'
                }
            }
        });
        var groups = $('#groups').data("kendoDropDownList");
        if (groups) {
            groups.setDataSource(dataSource);
            groups.value(-1);
        }
        else {
            $("#groups").kendoDropDownList({
                dataTextField: 'Text',
                dataValueField: 'Value',
                dataSource: dataSource,
                filter: "contains"
            });
        }
        kendo.ui.progress($('body'), false);
    }*@

</script>

