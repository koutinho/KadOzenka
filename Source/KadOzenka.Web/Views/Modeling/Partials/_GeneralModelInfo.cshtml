@using KadOzenka.Dal.GbuObject.Dto
@model KadOzenka.Web.Models.Modeling.GeneralModelingModel

<div class="form-horizontal">
    <div class="form-group" id="nameTextBoxBlock">
        <div class="col-sm-2">
            @Html.CustomLabelFor(x => x.Name)
        </div>
        <div class="col-sm-10">
            @Html.KendoTextBoxFor(x => x.Name, isReadonly: false)
        </div>
    </div>
    <div class="form-group">
        <div class="col-sm-2">
            @Html.CustomLabelFor(x => x.Description)
        </div>
        <div class="col-sm-10">
            @Html.Kendo().TextBoxFor(x => x.Description).Enable(!Model.IsFromTourCard)
        </div>
    </div>
    <div class="form-group">
        <div class="col-sm-2">
            @Html.CustomLabelFor(x => x.IsActive, NotSetRequired: true)
        </div>
        <div class="col-sm-10">
            @Html.Kendo().CheckBoxFor(x => x.IsActive).Label(string.Empty).Enable(false)
        </div>
    </div>
    <div class="form-group">
        <div class="col-sm-2">
            @Html.CustomLabelFor(x => x.Type)
        </div>
        <div class="col-sm-10">
            @Html.KendoEnumDropDownListFor(x => x.Type, isReadonly: !Model.IsCreationMode, withoutNull: true)
        </div>
    </div>
    <div class="form-group">
        <div class="col-sm-2">
            @Html.CustomLabelFor(x => x.AlgorithmTypeForCadastralPriceCalculation)
        </div>
        <div class="col-sm-10">
            @Html.KendoEnumDropDownListFor(x => x.AlgorithmTypeForCadastralPriceCalculation, isReadonly: Model.IsFromTourCard, withoutNull: true)
        </div>
    </div>
    <div class="form-group">
        <div class="col-sm-2">
            @Html.CustomLabelFor(x => x.TourId)
        </div>
        <div class="col-sm-10">
            @(Html.Kendo().DropDownListFor(m => m.TourId)
                .DataTextField("Text")
                .DataValueField("Value")
                .Filter(FilterType.Contains)
                .DataSource(source =>
                {
                    source.Read("GetRatingTours", "Tour");
                })
                .Enable(Model.IsCreationMode))
        </div>
    </div>
    <div class="form-group">
        <div class="col-sm-2">
            @Html.LabelFor(x => x.ObjectType)
        </div>
        <div class="col-sm-10">
            @(Html.Kendo().RadioButtonFor(x => x.ObjectType)
                .Label(ObjectTypeExtended.Oks.GetEnumDescription())
                .Value((int)ObjectTypeExtended.Oks)
                .Checked(Model.ObjectType == ObjectTypeExtended.Oks)
                .Enable(Model.IsCreationMode))
            @(Html.Kendo().RadioButtonFor(x => x.ObjectType)
                .Label(ObjectTypeExtended.Zu.GetEnumDescription())
                .Value((int)ObjectTypeExtended.Zu)
                .Checked(Model.ObjectType == ObjectTypeExtended.Zu)
                .HtmlAttributes(new { style = "padding-left:1%;" })
                .Enable(Model.IsCreationMode))
        </div>
    </div>
    <div class="form-group">
        <div class="col-sm-2">
            @Html.CustomLabelFor(x => x.GroupId)
        </div>
        <div class="col-sm-10">
            <div id="groups"></div>
        </div>
    </div>
</div>



<script src="~/js/custom-validation.js"></script>
<script>
    var isCreationMode = '@Model.IsCreationMode' === "True";
    var isFromTourCard = '@Model.IsFromTourCard' === "True";

    $(document).ready(function () {
        $('#@nameof(Model.Type)').data("kendoDropDownList").enable(isCreationMode);
        $('#@nameof(Model.AlgorithmTypeForCadastralPriceCalculation)').data("kendoDropDownList").enable(!isFromTourCard);
        if (isFromTourCard) {
            $('#nameTextBoxBlock').hide();
        } else {
            $('#nameTextBoxBlock').show();
        }

        var tourIdDropDownList = $('#@nameof(Model.TourId)').data("kendoDropDownList");
        tourIdDropDownList.bind("dataBound", reloadGroups);
        tourIdDropDownList.bind("change", reloadGroups);

        $('[name="@nameof(Model.ObjectType)"]').on('change', reloadGroups);
    });








    function reloadGroups() {
        var selectedTour = $('#@nameof(Model.TourId)').data("kendoDropDownList").value();
        var objectType = $('input[name="@nameof(Model.ObjectType)"]:checked').val();
        kendo.ui.progress($('body'), true);
        var dataSource = new kendo.data.DataSource({
            transport: {
                read: {
                    url: '@Url.Action("GetGroups", "Modeling")',
                    data: { tourId: selectedTour, objectType: objectType},
                    dataType: 'json'
                }
            }
        });
        var groups = $('#groups').data("kendoDropDownList");
        if (groups) {
            groups.setDataSource(dataSource);
            groups.value(-1);
        }
        else {
            groups = $("#groups").kendoDropDownList({
                dataTextField: 'Text',
                dataValueField: 'Value',
                dataSource: dataSource,
                filter: "contains"
            }).data("kendoDropDownList");
        }
        var groupId = '@Model.GroupId';
        groups.value(groupId);
        groups.enable(isCreationMode);
        kendo.ui.progress($('body'), false);
    }

</script>

