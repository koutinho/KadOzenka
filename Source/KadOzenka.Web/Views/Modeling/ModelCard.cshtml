@using KadOzenka.Dal.Oks
@model KadOzenka.Web.Models.Modeling.ModelingModel

<!-- Модальное окно для добавления КО аттрибута -->
<div id="attributeAdditionModal" style="display: none; padding: 2%;">
	<div class="form-horizontal col-sm-12">
		<div class="form-group">
			<div class="col-sm-12">
				<div id="attribute"></div>
			</div>
		</div>
	</div>
</div>

<!-- Модальное окно для добавления справочника -->
<div id="dictionaryAdditionModal" style="display: none;  padding: 2%;">
	<div class="form-horizontal col-sm-12">
		<div class="form-group">
			<div class="col-sm-12">
				<div id="dictionary"></div>
			</div>
		</div>
	</div>
</div>

@using (Html.BeginForm("Calculate", "Modeling", FormMethod.Post, new { id = "calculateModelForm" }))
{
	@Html.HiddenFor(x => x.Id)
	<div style="padding: 2%">
		<div id="mainToolbar"></div>
		<div class="form-horizontal col-sm-12" style="margin-top: 10px">
			<div class="form-group">
				<div class="col-sm-2">
					@Html.CustomLabelFor(x => x.Name)
				</div>
				<div class="col-sm-9">
					@Html.KendoTextBoxFor(x => x.Name, isReadonly: false)
				</div>
			</div>
			<div class="form-group">
				<div class="col-sm-2">
					@Html.CustomLabelFor(x => x.PropertyMarketSegment)
				</div>
				<div class="col-sm-9">
					@Html.KendoEnumDropDownListFor(x => x.PropertyMarketSegment, isReadonly: false, withoutNull: true)
				</div>
			</div>
			<div class="form-group">
				<div class="col-sm-2">
					@Html.CustomLabelFor(x => x.TourId)
				</div>
				<div class="col-sm-9">
					@(Html.Kendo().DropDownListFor(m => m.TourId)
								.DataTextField("Text")
								.DataValueField("Value")
								.Filter(FilterType.Contains)
								.DataSource(source =>
								{
									source.Read("GetRatingTours", "Tour");
								})
							.Events(e =>
							{
								e.Change("onTourChange");
							}))
				</div>
			</div>
			<div class="form-group">
				<div class="col-sm-2">
					@Html.LabelFor(x => x.ObjectType)
				</div>
				<div class="col-sm-9">
					@Html.Kendo().RadioButtonFor(x => x.ObjectType).Label(ObjectType.Oks.GetEnumDescription()).Value((int)ObjectType.Oks)
					@Html.Kendo().RadioButtonFor(x => x.ObjectType).Label(ObjectType.ZU.GetEnumDescription()).Value((int)ObjectType.ZU).Checked(true).HtmlAttributes(new { style = "padding-left:1%;" })
				</div>
			</div>
			<div class="form-group">
				<div style="padding-top: 2%;">
					<div id="attributesToolbar"></div>
				</div>
				<div style="display: flex;">
					<div style="align-items: stretch">
						<div id="grid"></div>
					</div>
				</div>
			</div>
		</div>
	</div>
}


<script src="~/js/common-modals.js"></script>
<script>
	$(document).ready(function () {

		$('#mainToolbar').kendoToolBar({
			items: [
				{
					type: 'button',
					enable: false,
				    text: '',
				    attributes: { title: "Сохранить" },
				    icon: 'save',
				    click: calculate
			    }
		    ]
	    });
	    $('#attributesToolbar').kendoToolBar({
		    items: [
			    {
				    type: 'button',
				    text: '',
				    attributes: { title: "Добавить" },
				    icon: 'add',
				    click: addAttribute
			    },
			    {
				    type: 'button',
				    id: 'deleteAttributeBtn',
				    className: "k-state-disabled",
				    text: '',
				    attributes: { title: "Удалить" },
				    icon: 'delete',
				    click: deleteAttribute
			    }
		    ]
	    });
	    $('#deleteAttributeBtn').addClass('k-state-disabled');
	    $(".k-toolbar [title]").kendoTooltip({
		    position: "top"
	    });

	    $('#grid').kendoGrid({
			dataSource: {
				transport: {
					read: {
						url: '@Url.Action("GetModelAttributes", "Modeling", new { modelId = Model.Id })',
						contentType: 'application/json; charset=utf-8',
						dataType: 'json'
					}
				},
				schema: {
				    model: {
					    id: "AttributeId",
						fields: {
							AttributeId: { type: "number" },
							DictionaryId: { type: "number" },
							AttributeName: { type: "string" },
							IsNormalized: { type: "boolean" },
						    DictionaryName: { type: "string" }
					    }
				    }
				},
				pageSize: 10
			},
		    columns: [
			    {
				    field: 'AttributeId',
				    hidden: true
				},
			    {
				    field: 'DictionaryId',
				    hidden: true
			    },
			    {
				    field: 'AttributeName',
				    title: 'Аттрибут'
			    },
			    {
					field: 'IsNormalized',
				    title: 'Нормализация',
				    template:
					    '<input type="checkbox" #= IsNormalized ? \'checked="checked"\' : "" # class="chkbx" />'
			    },
			    {
				    field: 'DictionaryName',
				    title: 'Справочник'
			    }
		    ],
		    change: changeToolBarButtonsClass,
		    width: '100%',
		    scrollable: true,
		    selectable: true
	    });

		$("#grid .k-grid-content").on("change", "input.chkbx", onNormalizationChecked);
	});



	function onTourChange() {
		var selectedTour = $("#TourId").data("kendoDropDownList").value();
		var initialValue = '@Model.TourId';
		if (selectedTour !== initialValue) {
			Common.UI.ShowConfirm({
				title: 'Изменение тура',
				content: 'При изменении тура факторы будут сброшены. Вы уверены, что хотите сменить тур?',
				onSuccess: function () {
					$("#grid").data("kendoGrid").dataSource.data([]);
				},
				onFail: function() {
					$("#TourId").data("kendoDropDownList").value(initialValue);
					var window = $(this).closest('[data-role=window]').data('kendoWindow');
					window.close();
					window.destroy();
				}
			});
		}
	}


	//TODO
	function calculate() {
		validateForm();
		var attributes = getAttributesFromGrid();
		var form = $('#calculateModelForm');
		var formObject = Common.Functions.FormToObject(form);
		formObject['Attributes'] = attributes;
		kendo.ui.progress($('body'), true);
		$.ajax({
			type: 'POST',
			url: form.attr('action'),
			data: formObject,
			success: function(response) {
				//Common.ShowMessage(response.Message);
			},
			error: function(response) {
				Common.ShowError(response.responseText);
			},
			complete: function() {
				kendo.ui.progress($('body'), false);
			}
		});
	}


	function validateForm() {
		var messages = [];
		var segment = $("#PropertyMarketSegment").data("kendoDropDownList").value();
		if (!segment || segment == 0)
			messages.push("Не выбран Сегмент");
		var tour = $("#TourId").data("kendoDropDownList").value();
		if (!tour || tour == 0)
			messages.push("Не выбран Тур");
		var rows = $("#grid").data("kendoGrid").dataSource.data();
		for (var i = 0; i < rows.length; i++) {
			if (rows[i].IsNormalized) {
				if (rows[i].DictionaryId == undefined || rows[i].DictionaryId === 0) {
					messages.push("Не выбран словарь для аттрибута в стороке №" + (i + 1));
				}
			}
		}
		if (messages.length) {
			Common.ShowError(messages.join("<br/>"));
		}
	}


	function getAttributesFromGrid() {
		var rows = $("#grid").data("kendoGrid").dataSource.data();
		var attributeIds = [];
		rows.forEach(function (row) {
			attributeIds.push({ AttributeId: row.AttributeId, DictionaryId: row.DictionaryId });
		});
		return attributeIds;
	}


	function addAttribute() {
		var modal = $("#attributeAdditionModal");
		ShowModal(modal, '50%', '20%', "Добавление аттрибута");
		initAttributes();
	}


	function deleteAttribute() {
		var grid = $("#grid").data("kendoGrid");
		var row = grid.select();
		if (row.length > 0) {
			grid.removeRow(row);
		}
	}


	function initAttributes() {
		var tourId = $('#TourId').val();
		var objectType = $('input[name="ObjectType"]:checked').val();
		var alreadySelectedAttributeIds = getAttributesFromGrid().map(function(x) {
			return x.AttributeId;
		});
		var dataSource = new kendo.data.DataSource({
			transport: {
				read: {
					url: '@Url.Action("GetKoAttributes", "Task")',
					data: { tourId: tourId, objectType: objectType, exceptedAttributes: alreadySelectedAttributeIds},
					dataType: 'json',
					traditional: true
				}
			}
		});
		var attribute = $('#attribute').data("kendoDropDownList");
		if (attribute) {
			attribute.setDataSource(dataSource);
			attribute.value(-1);
		}
		else {
			$("#attribute").kendoDropDownList({
				dataTextField: 'Text',
				dataValueField: 'Value',
				optionLabel: " ",
				dataSource: dataSource,
				change: addAttributeToGrid,
				filter: "contains"
			});
		}
	}

	function addAttributeToGrid() {
		var modal = $('#attributeAdditionModal');
		modal.data("kendoWindow").close();
		var list = $('#attribute').data("kendoDropDownList");
		var attributeId = list.value();
		var attributeName = list.text();
		$('#grid').data("kendoGrid").dataSource.add({ AttributeId: attributeId, AttributeName: attributeName, IsNormalized: false });
		changeToolBarButtonsClass();
	}


	var currentAttributeId;
	function onNormalizationChecked(e) {
		var grid = $("#grid").data("kendoGrid");
		var dataItem = grid.dataItem($(e.target).closest("tr"));
		dataItem.IsNormalized = this.checked;
		currentAttributeId = dataItem.AttributeId;
		if (dataItem.IsNormalized) {
			var modal = $("#dictionaryAdditionModal");
			ShowModal(modal, '50%', '20%', "Добавление справочника");
			initDictionaries();
		} else {
			UpdateDictionaryInfoInGridRow(null, null);
		}
	}


	function initDictionaries() {
		var dataSource = new kendo.data.DataSource({
			transport: {
				read: {
					url: '@Url.Action("GetDictionaries", "ExpressScore")',
					dataType: 'json'
				}
			}
		});
		var dictionary = $('#dictionary').data("kendoDropDownList");
		if (dictionary) {
			dictionary.setDataSource(dataSource);
			dictionary.value(-1);
		}
		else {
			$("#dictionary").kendoDropDownList({
				dataTextField: 'Text',
				dataValueField: 'Value',
				optionLabel: " ",
				dataSource: dataSource,
				change: addDictionaryToGrid,
				filter: "contains"
			});
		}
	}

	function addDictionaryToGrid() {
		var modal = $('#dictionaryAdditionModal');
		modal.data("kendoWindow").close();
		var list = $('#dictionary').data("kendoDropDownList");
		UpdateDictionaryInfoInGridRow(list.value(), list.text());
		changeToolBarButtonsClass();
	}

	function UpdateDictionaryInfoInGridRow(dictionaryId, dictionaryName)
	{
		var grid = $("#grid").data("kendoGrid");
		var dataItem = grid.dataSource.get(currentAttributeId);
		dataItem.DictionaryId = dictionaryId;
		dataItem.DictionaryName = dictionaryName;
		dataItem.dirty = true;
		$('#grid').data('kendoGrid').refresh();
	}


	function changeToolBarButtonsClass() {
		var row = getSelectedRowInGrid();
		if (row.length === 0) {
			$('#deleteAttributeBtn').addClass('k-state-disabled');
		}
		else {
			$('#deleteAttributeBtn').removeClass('k-state-disabled');
		}
	}


	function getSelectedRowInGrid() {
		var grid = $("#grid").data("kendoGrid");
		return grid.select();
	}

</script>