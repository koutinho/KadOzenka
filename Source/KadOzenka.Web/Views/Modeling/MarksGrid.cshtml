
<div id="marksGridBlock" class="form-horizontal col-sm-12">
    <div style="display: flex;">
        <div id="marksGrid"></div>
    </div>
</div>



<script>

    var isReadOnly = '@ViewBag.IsReadOnly' === "True";


    $(document).ready(function () {

        var marksGridDataSource = new kendo.data.DataSource({
            transport: {
                read: {
                    url: '@Url.Action("GetMarks", "Modeling")',
                    contentType: 'application/json; charset=utf-8',
                    data: { dictionaryId: '@ViewBag.DictionaryId' },
                    dataType: 'json'
                },
                create: {
                    url: '@Url.Action("CreateMark", "Modeling")',
                    data: { dictionaryId: '@ViewBag.DictionaryId' },
                    type: 'POST',
                    dataType: 'json'
                },
                update: {
                    url: '@Url.Action("UpdateMark", "Modeling")',
                    data: { dictionaryId: '@ViewBag.DictionaryId' },
                    type: 'POST',
                    dataType: 'json'
                }
            },
            requestStart: function(e) {
                if (e.type == "read") {
                    kendo.ui.progress($('#marksGridBlock'), true);
                }
            },
            requestEnd: function (e) {
                if (e.type == "read") {
                    kendo.ui.progress($('#marksGridBlock'), false);
                }
            },
            error: function (e) {
                Common.ShowError(e.xhr.responseText);
            },
            schema: {
                model: {
                    id: "Id",
                    fields: {
                        Id: { editable: false, nullable: true },
                        Value: { 
                            /*validation: {
                            valuefactorvalidation: function (input) {
                                if (input.is("[name='Value']") && input.val() == "") {
                                    input.attr("data-valuefactorvalidation-msg", "Значение фактора обязательно");
                                    return false;
                                }
                                return true;
                            } 
                            }*/
                            type: "string", nullable: false
                        },
                        Metka: { 
                            /*validation: {
                            metkafactorvalidation: function (input) {
                                if (input.is("[name='Metka']") && input.val() == "") {
                                    input.attr("data-metkafactorvalidation-msg", "Значение метки обязательно");
                                    return false;
                                }
                                return true;
                            }
                            }, */
                            type: "number", nullable: false
                        }
                    }
                }
            },
            change: function (e) {
                //если добавляем новое значение в грид, а к нему уже была применена фильтрация
                //чтобы отобразить новую пустую строчку, нужна дополнительная фильтрация
                if (e.action == "add") {
                    var filter = this.filter();
                    if (filter) {
                        var noValueFilter = { field: "ValueFactor", operator: "eq", value: "" };
                        var newFilter = {
                            logic: "or",
                            filters: [noValueFilter, filter]
                        };
                        this.filter(newFilter);
                    }
                }
            },
            pageSize: 10
        });


        $('#marksGrid').kendoGrid({
            dataSource: marksGridDataSource,
            columns: getGridColumns(),
            toolbar: isReadOnly ? [] : [{name: "create"}],
            scrollable: true,
            pageable: true,
            editable: "inline",
            filterable: {
                extra: false,
                operators: {
                    string: {
                        startswith: "Начинается с",
                        eq: "Равно",
                        neq: "Не равно"
                    },
                    number: {
                        eq: "Равно",
                        gte: "Больше",
                        lte: "Меньше"
                    }
                }
            },
            save: function (e) {
                //из-за неправильного разделителя значение в контроллер приходит пустое
                //была попытка установить culture для kendoNumericTextBox - не сработало
                if (!e.model.Metka)
                    return;
                var initialValue = e.model.Metka.toString();
                var replacedValue = initialValue.replace(".", ",");
                e.model.Metka = replacedValue;
            }
        });
    });



    function getGridColumns() {
        var columns = [
            {
                field: 'Value',
                title: 'Значение',
                headerAttributes: { style: "text-align: center;" }
            },
            {
                field: 'Metka',
                title: 'Метка',
                headerAttributes: { style: "text-align: center;" },
                //по умолчанию точность новой метки - 2 знака после запятой, 
                //переопределяем это
                editor: function(container, options) {
                    $('<input name="' + options.field + '"/>')
                        .appendTo(container)
                        .kendoNumericTextBox({
                            format: "{0:n14}",
                            decimals: 14,
                            step: 0.1
                        });
                    //In case the custom editor is a widget, the developer should customize the validation warning tooltip position in order to avoid visual issues
                    var tooltipElement = $('<span class="k-invalid-msg" data-for="' + options.field + '"></span>');
                    tooltipElement.appendTo(container);
                }
            }
        ];

        if (!isReadOnly) {
            columns.push({
                command:
                [
                    { name: "edit" },
                    { 
                        name: "Удалить", 
                        iconClass: "k-icon k-i-delete",
                        click: deleteMark
                    }
                ],
                title: "&nbsp;",
                width: "250px"
            });
        }

        return columns;
    }


    function deleteMark(e) {
        e.preventDefault();
        var tr = $(e.target).closest("tr");
        var clickedRow = this.dataItem(tr);
        Common.UI.ShowConfirm({
            title: 'Удаление метки',
            content: `Удалить метку со значением "${clickedRow.Value}"?`,
            onSuccess: function () {
                kendo.ui.progress($('body'), true);
                $.ajax({
                    url: '@Url.Action("DeleteMark", "Modeling")',
                    type: 'DELETE',
                    data: {dictionaryId: '@ViewBag.DictionaryId', markId: clickedRow.Id},
                    success: function () {
                        Common.ShowMessage("Метка удалена");
                        $('#marksGrid').data('kendoGrid').dataSource.remove(clickedRow);
                    },
                    error: function (response) {
                        Common.ShowError(response.responseText);
                    },
                    complete: function() {
                        kendo.ui.progress($('body'), false);
                    }
                });
            }
        });
    }

</script>

