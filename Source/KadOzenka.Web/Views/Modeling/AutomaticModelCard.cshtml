@using KadOzenka.Dal.Modeling.Entities
@using KadOzenka.Dal.Oks
@model KadOzenka.Web.Models.Modeling.AutomaticModelingModel


<!-- Модальное окно для выбора типа модели -->
<div id="modelTypeWindow" style="display: none; padding: 3% 0;">
    <div class="form-horizontal col-sm-12" style="width: 100%;">
        <div class="form-group">
            <div class="col-sm-12" style="width: 100%; padding: 1%;">
                @(Html.Kendo().ButtonGroup()
                                    .Name("chooseModelTypeButtons")
                                    .Selection("single")
                                    .Items(t =>
                                    {
                                        t.Add().Text(ModelType.Linear.GetEnumDescription())
                                            .HtmlAttributes(new { id = "linearModelTypeBtn", style = "width: 60%;" });
                                        t.Add().Text(ModelType.Exponential.GetEnumDescription())
                                            .HtmlAttributes(new { id = "exponentialModelTypeBtn", style = "margin-left: 1%; width: 90%;" });
                                        t.Add().Text(ModelType.Multiplicative.GetEnumDescription())
                                            .HtmlAttributes(new { id = "multiplicativeModelTypeBtn", style = "margin-left: 1%; width: 90%;" });
                                        t.Add().Text(ModelType.All.GetEnumDescription())
                                            .HtmlAttributes(new { id = "allModelTypeBtn", style = "margin-left: 1%; width: 60%;" });
                                    })
                                    .HtmlAttributes(new { style = "width: 100%;" }))
            </div>
        </div>
    </div>
</div>


@using (Html.BeginForm("UpdateModel", "Modeling", FormMethod.Post, new { id = "updateModelModelForm" }))
{
    @Html.HiddenFor(x => x.Id)
    <ul id="ls_panelbar" class="panelbar">
        <li id="SectionMainData" data-expand style="padding-top: 1%">
            <span>Основные данные</span>
            <div class="form-horizontal col-sm-12" style="padding: 2%">
                <div id="mainToolbar"></div>
                <div class="form-group" style="padding-top: 1%">
                    <div class="col-sm-2">
                        @Html.CustomLabelFor(x => x.Name)
                    </div>
                    <div class="col-sm-9">
                        @Html.KendoTextBoxFor(x => x.Name, isReadonly: false)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-sm-2">
                        @Html.CustomLabelFor(x => x.Description)
                    </div>
                    <div class="col-sm-9">
                        @Html.KendoTextBoxFor(x => x.Description, isReadonly: false)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-sm-2">
                        @Html.CustomLabelFor(x => x.TypeStr)
                    </div>
                    <div class="col-sm-9">
                        @(Html.Kendo().DropDownListFor(m => m.TypeStr)
                            .DataTextField("Name")
                            .DataValueField("Name")
                            .Enable(false))
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-sm-2">
                        @Html.CustomLabelFor(x => x.CalculationType)
                    </div>
                    <div class="col-sm-9">
                        @(Html.Kendo().DropDownListFor(m => m.CalculationType)
                            .DataTextField("Name")
                            .DataValueField("Name")
                            .Enable(false))
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-sm-2">
                        @Html.CustomLabelFor(x => x.AlgorithmTypeForCadastralPriceCalculation)
                    </div>
                    <div class="col-sm-9">
                        @Html.KendoEnumDropDownListFor(x => x.AlgorithmTypeForCadastralPriceCalculation, isReadonly: false, withoutNull: true)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-sm-2">
                        @Html.CustomLabelFor(x => x.GroupId)
                    </div>
                    <div class="col-sm-9">
                        <div id="groups"></div>
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-sm-2">
                        @Html.CustomLabelFor(x => x.TourId)
                    </div>
                    <div class="col-sm-9">
                        @(Html.Kendo().DropDownListFor(m => m.TourId)
                            .DataTextField("Text")
                            .DataValueField("Value")
                            .Filter(FilterType.Contains)
                            .DataSource(source =>
                            {
                                source.Read("GetRatingTours", "Tour");
                            }))
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-sm-2">
                        @Html.LabelFor(x => x.ObjectType)
                    </div>
                    <div class="col-sm-9">
                        @(Html.Kendo().RadioButtonFor(x => x.ObjectType)
                            .Label(ObjectType.Oks.GetEnumDescription())
                            .Value((int)ObjectType.Oks)
                            .Checked(Model.ObjectType == ObjectType.Oks))
                        @(Html.Kendo().RadioButtonFor(x => x.ObjectType)
                            .Label(ObjectType.ZU.GetEnumDescription())
                            .Value((int)ObjectType.ZU)
                            .Checked(Model.ObjectType == ObjectType.ZU)
                            .HtmlAttributes(new { style = "padding-left:1%;" }))
                    </div>
                </div>
            </div>
        </li>

        <li id="SectionMainData" data-expand style="padding-top: 1%">
            <span>Данные, зависимые от типа модели</span>
            <div class="form-horizontal col-sm-12" style="padding: 2%">
                <div class="form-group">
                    <div class="col-sm-2">
                        @Html.CustomLabelFor(x => x.AlgorithmType, NotSetRequired: true)
                    </div>
                    <div class="col-sm-9">
                        @Html.KendoEnumDropDownListFor(x => x.AlgorithmType, isReadonly: false, withoutNull: true)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-sm-2">
                        @Html.CustomLabelFor(x => x.A0)
                    </div>
                    <div class="col-sm-9">
                        @Html.KendoNumericTextBoxFor(x => x.A0, isReadonly: false, precision: 14)
                    </div>
                </div>
                <div class="form-group">
                    <div style="padding-top: 2%;">
                        <div id="attributesToolbar"></div>
                    </div>
                    <div id="grid"></div>
                </div>
            </div>
        </li>
    </ul>
}


<link rel="stylesheet" href="~/css/jquery.fancybox.min.css" />
<style>
    #ls_panelbar {
        width: 99% !important;
    }

    .k-dropdowntree {
        width: 100%;
    }
</style>



<script src="~/js/common-modals.js"></script>
<script src="~/js/custom-validation.js"></script>
<script src="~/js/jquery.fancybox.min.js"></script>
<script>
    var hasProcessToFormObjectArrayInQueue = '@Model.HasProcessToFormObjectArrayInQueue' === "True";

    $(document).ready(function () {
        var panelbar = $('#ls_panelbar').kendoPanelBar().data('kendoPanelBar');
        panelbar.expand('li[data-expand]');
        $("#navigation-menu a").mPageScroll2id({
            highlightSelector: "#navigation-menu a"
        });

        $('#mainToolbar').kendoToolBar({
            items: [
                {
                    type: 'button',
                    id: 'updateModelBtn',
                    text: '',
                    attributes: { title: "Сохранить" },
                    icon: 'save',
                    click: onUpdateModelBtnClick
                },
                {
                    type: 'button',
                    id: 'formObjectArrayBtn',
                    text: '',
                    attributes: { title: "Сформировать массив данных" },
                    icon: 'media-manager',
                    enable: !hasProcessToFormObjectArrayInQueue,
                    click: onFormObjectArrayBtnClick
                },
                {
                    type: 'button',
                    id: 'trainModelBtn',
                    text: '',
                    attributes: { title: "Обучить" },
                    icon: 'paste-plain-text',
                    enable: '@Model.HasFormedObjectArray' === "True",
                    click: onTrainModelBtnClick
                },
                {
                    type: 'button',
                    id: 'predictModelBtn',
                    text: '',
                    attributes: { title: "Рассчитать" },
                    icon: 'calculator',
                    enable: '@Model.IsModelWasTrained' === "True",
                    click: onPredictModelBtnClick
                },
                {
                    type: 'button',
                    id: 'warningsBtn',
                    text: '',
                    attributes: { title: "Логи" },
                    icon: 'clock',
                    click: downloadLogs
                }
            ]
        });
        $('#attributesToolbar').kendoToolBar({
            items: [
                {
                    type: 'button',
                    id: 'addAttributeBtn',
                    text: '',
                    attributes: { title: "Добавить" },
                    icon: 'add',
                    click: addAttribute
                },
                {
                    type: 'button',
                    id: 'editAttributeBtn',
                    text: '',
                    attributes: { title: "Изменить" },
                    icon: 'edit',
                    click: editAttribute
                },
                {
                    type: 'button',
                    id: 'deleteAttributeBtn',
                    className: "k-state-disabled",
                    text: '',
                    attributes: { title: "Удалить" },
                    icon: 'delete',
                    click: deleteAttribute
                }
            ]
        });
        $(".k-toolbar [title]").kendoTooltip({
            position: "top"
        });

        $('#grid').kendoGrid({
            dataSource: {
                transport: {
                    read: {
                        url: '@Url.Action("GetModelAttributes", "Modeling")',
                        data: getDataForModelAttributesDownloader,
                        contentType: 'application/json; charset=utf-8',
                        dataType: 'json'
                    }
                },
                schema: {
                    model: {
                        id: "AttributeId",
                        fields: {
                            AttributeId: { type: "number" },
                            DictionaryId: { type: "number" },
                            AttributeName: { type: "string" },
                            IsNormalized: { type: "boolean" },
                            DictionaryName: { type: "string" },
                            Coefficient: { type: "number" },
                            PreviousWeight: { type: "number" }
                        }
                    }
                },
                pageSize: 10
            },
            columns: [
                {
                    field: 'AttributeId',
                    hidden: true
                },
                {
                    field: 'DictionaryId',
                    hidden: true
                },
                {
                    field: 'AttributeName',
                    title: 'Фактор'
                },
                {
                    field: 'IsNormalized',
                    title: 'Нормализация',
                    template: '<input type="checkbox" #= DictionaryId != null ? \'checked="checked"\' : "" # class="chkbx" disabled="disabled" />',
                    attributes: { style: "text-align: center;" }
                },
                {
                    field: 'DictionaryName',
                    title: 'Справочник',
                    attributes: { style: "text-align: center;" }
                },
                {
                    field: 'Coefficient',
                    title: 'Коэффициент',
                    attributes: { style: "text-align: center;" }
                },
                {
                    field: 'PreviousWeight',
                    title: 'Коэффициент из предыдущего тура (для справки)',
                    attributes: { style: "text-align: center;" }
                }
            ],
            change: changeToolBarButtonsClass,
            dataBound: changeToolBarButtonsClass,
            width: '100%',
            scrollable: true,
            selectable: true
        });

        $('[name="ObjectType"]').on('change', validateModelChanges);
        $("#chooseModelTypeButtons").kendoButtonGroup({
            select: function(e) {
                onModelTypeSelect(e);
            }
        });
        $('#@nameof(Model.TourId)').on('change', onTourChange);
        $('#@nameof(Model.AlgorithmType)').data('kendoDropDownList').bind('change', onAlgorithmTypeChange);

        initGroups('@Model.GroupId');
    });



    function onTourChange() {
        var selectedTour = $("#TourId").data("kendoDropDownList").value();
        var initialTourId = '@Model.TourId';
        if (selectedTour !== initialTourId) {
            initGroups();
        }
        validateModelChanges();
    }


    function validateModelChanges() {
        var selectedTour = $("#TourId").data("kendoDropDownList").value();
        var initialTourId = '@Model.TourId';
        var selectedObjectType = $('input[name="ObjectType"]:checked').val();
        var initialObjectType = '@((int)Model.ObjectType)';
        if (selectedObjectType !== initialObjectType || selectedTour !== initialTourId) {
            changeUIForDirtyModel();
        } else {
            changeUIForCleanModel();
        }
    }

    function changeUIForDirtyModel() {
        $('#updateModelBtn').css({ backgroundColor: "greenyellow" });
        $('#addAttributeBtn').addClass('k-state-disabled');
        $('#editAttributeBtn').addClass('k-state-disabled');
        $('#deleteAttributeBtn').addClass('k-state-disabled');
    }
    function changeUIForCleanModel() {
        $('#updateModelBtn').css({ backgroundColor: "" });
        $('#addAttributeBtn').removeClass('k-state-disabled');
    }


    function initGroups(groupId) {
        kendo.ui.progress($('body'), true);
        var selectedTour = $("#TourId").data("kendoDropDownList").value();
        var dataSource = new kendo.data.DataSource({
            transport: {
                read: {
                    url: '@Url.Action("GetGroups", "Modeling")',
                    data: { tourId: selectedTour},
                    dataType: 'json'
                }
            }
        });
        dataSource.fetch(function () {
            var data = dataSource.data();
            var groups = $('#groups').data("kendoDropDownList");
            if (groups) {
                groups.setDataSource(dataSource);
                groups.value(-1);
            }
            else {
                groups = $("#groups").kendoDropDownList({
                    dataTextField: 'Text',
                    dataValueField: 'Value',
                    dataSource: { data: data },
                    filter: "contains"
                }).data("kendoDropDownList");
            }
            if (groupId) {
                //костыль из-за интеграции с уже существующими моделями, т.к. для их групп
                //может быть не проставлено соотношение
                var isContainsGroup = data.some(function(item) {
                    return item.Value === groupId;
                });
                if (!isContainsGroup) {
                    var groupName = '@Html.Raw(Model.GroupName)';
                    Common.ShowError("Не найдено соотношение группы '" + groupName + "' и сегмента.");
                    dataSource.add({
                        Text: groupName,
                        Value: groupId
                    });
                }
                groups.value(groupId);
            }
        });
        kendo.ui.progress($('body'), false);
    }


    function closeConfirmWindow(e) {
        var window = e.closest('[data-role=window]').data('kendoWindow');
        window.close();
        window.destroy();
    }


    var isTrainingMode = false;
    function onTrainModelBtnClick() {
        //при первом обучении модели оно должно идти по всем моделям
        if ('@Model.IsModelWasTrained' === "False") {
            trainModel('@ModelType.All');
        } else {
            isTrainingMode = true;
            setGroupButtonsState(true, true, true, true);
            showModelTypeWindow();
        }
    }

    function onPredictModelBtnClick() {
        isTrainingMode = false;
        var hasLinearTrainingResult = '@Model.HasLinearTrainingResult' === "True";
        var hasExponentialTrainingResult = '@Model.HasExponentialTrainingResult' === "True";
        var hasMultiplicativeTrainingResult = '@Model.HasMultiplicativeTrainingResult' === "True";
        setGroupButtonsState(hasLinearTrainingResult, hasExponentialTrainingResult, hasMultiplicativeTrainingResult, false);
        showModelTypeWindow();
    }

    function setGroupButtonsState(enableLinerBtn, enableExponentialBtn, enableMultiplicativeBtn, enableAllModelTypeBtn) {
        if (enableLinerBtn)
            $("#linearModelTypeBtn").removeClass('k-state-disabled');
        else
            $("#linearModelTypeBtn").addClass('k-state-disabled');
        if (enableExponentialBtn)
            $("#exponentialModelTypeBtn").removeClass('k-state-disabled');
        else
            $("#exponentialModelTypeBtn").addClass('k-state-disabled');
        if (enableMultiplicativeBtn)
            $("#multiplicativeModelTypeBtn").removeClass('k-state-disabled');
        else
            $("#multiplicativeModelTypeBtn").addClass('k-state-disabled');
        if (enableAllModelTypeBtn)
            $("#allModelTypeBtn").removeClass('k-state-disabled');
        else
            $("#allModelTypeBtn").addClass('k-state-disabled');
    }


    function showModelTypeWindow() {
        var modal = $("#modelTypeWindow");
        ShowModal(modal, '60%', '12%', "Выбор типа модели");
    }

    function onModelTypeSelect(e) {
        var modal = $('#modelTypeWindow');
        modal.data("kendoWindow").close();
        if (isTrainingMode)
            trainModel(e.indices);
        else
            predictModel(e.indices);
    }


    function onUpdateModelBtnClick() {
        var form = $('#updateModelModelForm');
        var formObject = getFormObject(form);
        kendo.ui.progress($('body'), true);
        $.ajax({
            type: 'GET',
            url: '@Url.Action("CheckIsModelChanged", "Modeling")',
            data: formObject,
            success: function (response) {
                if (response) {
                    Common.UI.ShowConfirm({
                        title: 'Обновление модели',
                        content: 'При обновлении Группы или Типа (ОКС/ЗУ) модели будут сброшены её факторы. Вы уверены, что хотите обновить модель?',
                        onSuccess: updateModel,
                        onFail: function() {
                            closeConfirmWindow($(this));
                        }
                    });
                } else {
                    updateModel();
                }
            },
            error: function(response) {
                Common.ShowError(response.responseText);
            },
            complete: function() {
                kendo.ui.progress($('body'), false);
            }
        });
    }


    function updateModel() {
        var form = $('#updateModelModelForm');
        var formObject = getFormObject(form);
        kendo.ui.progress($('body'), true);
		$.ajax({
			type: 'POST',
			url: form.attr('action'),
			data: formObject,
			success: function(response) {
				if (response.Errors) {
					var errors = getErrors(response.Errors);
					Common.ShowError(errors);
					return;
                } else {
                    if (response.IsModelWasChanged) {
                        var toolbar = $("#mainToolbar").data("kendoToolBar");
                        toolbar.enable("#predictModelBtn", false);
                    }
					Common.ShowMessage(response.Message);
                    reloadGrid();
                    changeUIForCleanModel();
                }
			},
			error: function(response) {
				Common.ShowError(response.responseText);
			},
			complete: function() {
				kendo.ui.progress($('body'), false);
			}
		});
    }

    function getFormObject(form) {
        var formObject = Common.Functions.FormToObject(form);
        formObject.GroupId = $('#groups').data("kendoDropDownList").value();
        return formObject;
    }


    function onFormObjectArrayBtnClick() {
        kendo.ui.progress($('body'), true);
        $.ajax({
            type: 'POST',
            url: '@Url.Action("FormObjectArray", "Modeling", new {modelId = Model.Id})',
            success: function () {
                Common.ShowMessage("Процесс сбора данных поставлен в очередь. По его завершению будет отправлено сообщение на почту.");
                $("#mainToolbar").data("kendoToolBar").enable("#formObjectArrayBtn", false);
            },
            error: function(response) {
                Common.ShowError(response.responseText);
            },
            complete: function() {
                kendo.ui.progress($('body'), false);
            }
        });
    }


    function trainModel(modelType) {
        kendo.ui.progress($('body'), true);
        $.ajax({
            type: 'POST',
            url: '@Url.Action("TrainModel", "Modeling")',
            data: { modelId: '@Model.Id', modelType: modelType },
            success: function(response) {
                if (response.Errors) {
                    var errors = getErrors(response.Errors);
                    Common.ShowError(errors);
                    return;
                } else {
                    Common.ShowMessage(response.Message);
                }
            },
            error: function(response) {
                Common.ShowError(response.responseText);
            },
            complete: function() {
                kendo.ui.progress($('body'), false);
            }
        });
    }


    function predictModel(modelTypeButtons) {
        kendo.ui.progress($('body'), true);
        $.ajax({
            type: 'POST',
            url: '@Url.Action("Predict", "Modeling")',
            data: { modelId: '@Model.Id', modelType: modelTypeButtons.indices},
            success: function(response) {
                if (response.Errors) {
                    var errors = getErrors(response.Errors);
                    Common.ShowError(errors);
                    return;
                } else {
                    Common.ShowMessage(response.Message);
                }
            },
            error: function(response) {
                Common.ShowError(response.responseText);
            },
            complete: function() {
                kendo.ui.progress($('body'), false);
            }
        });
    }


    function downloadLogs() {
        window.open('@Url.Action("DownloadLogs", "Modeling")' + '?modelId=' + '@Model.Id');
    }


    function addAttribute() {
        Common.UI.ShowWindow('Добавление фактора',
            '@Url.Action("AddAutomaticModelFactor", "Modeling", new { generalModelId = Model.Id})',
            'editFactorWindow',
            reloadGrid,
            800, 400);
    }

    function editAttribute() {
        var selectedRowData = getSelectedRowInFactorsGrid();
        Common.UI.ShowWindow('Редактирование фактора',
            '@Url.Action("EditAutomaticModelFactor", "Modeling")' + '?id=' + selectedRowData.Id,
            'editFactorWindow',
            reloadGrid,
            800, 400);
    }


    function deleteAttribute() {
        var selectedRowData = getSelectedRowInFactorsGrid();
        if (!selectedRowData)
            return;
        Common.UI.ShowConfirm({
            title: 'Удаление фактора',
            content: 'Удалить фактор для всех типов модели?<br>При удалении фактора будут сброшены результаты обучения модели и удален массив данных.',
            onSuccess: function () {
                kendo.ui.progress($('body'), true);
                $.ajax({
                    url: '@Url.Action("DeleteAutomaticModelFactor", "Modeling")',
                    type: 'POST',
                    data: { id: selectedRowData.Id },
                    success: function () {
                        Common.ShowMessage("Удаление выполнено");
                        reloadGrid();
                    },
                    error: function (response) {
                        Common.ShowError(response.responseText);
                    },
                    complete: function() {
                        kendo.ui.progress($('body'), false);
                    }
                });
            }
        });
    }


    function changeToolBarButtonsClass() {
        var areAttributesExists = $('#grid').data('kendoGrid').dataSource.total() > 0;
        $("#mainToolbar").data("kendoToolBar").enable("#formObjectArrayBtn", areAttributesExists && !hasProcessToFormObjectArrayInQueue);
        var row = getSelectedRowInGrid();
		if (row.length === 0) {
            $('#editAttributeBtn').addClass('k-state-disabled');
			$('#deleteAttributeBtn').addClass('k-state-disabled');
		}
		else {
            $('#editAttributeBtn').removeClass('k-state-disabled');
			$('#deleteAttributeBtn').removeClass('k-state-disabled');
		}
    }


    function getSelectedRowInGrid() {
		var grid = $("#grid").data("kendoGrid");
		return grid.select();
    }

    function getSelectedRowInFactorsGrid() {
        var grid = $("#grid").data("kendoGrid");
        var row = grid.select();
        if (row.length > 0) {
            var data = grid.dataItem(row);
            return data;
        }
    }


    function reloadGrid() {
        $('#grid').data('kendoGrid').dataSource.read();
    }


    function getDataForModelAttributesDownloader() {
        var modelType = $('#@nameof(Model.AlgorithmType)').data('kendoDropDownList').value();
        return { modelId: '@Model.Id', type: modelType }
    }


    function onAlgorithmTypeChange() {
        reloadGrid();
        var modelType = $('#@nameof(Model.AlgorithmType)').data('kendoDropDownList').value();
        $.ajax({
            type: 'GET',
            url: '@Url.Action("GetA0", "Modeling")',
            data: { modelId: '@Model.Id', type: modelType},
            success: function (response) {
                $("#@nameof(Model.A0)").data("kendoNumericTextBox").value(response);
            },
            error: function(response) {
                Common.ShowError(response.responseText);
            },
            complete: function() {
                kendo.ui.progress($('body'), false);
            }
        });
    }

</script>