@using Core.UI.Registers.Reports.Model;
@using Core.UI.Registers.Reports;
@using Core.Shared.Extensions;
@using Microsoft.AspNetCore.Mvc.Rendering;
@using Newtonsoft.Json;
@using Platform.Reports.Model;
@using Kendo.Mvc.UI;

@model ViewReportModel

<style type="text/css">
    html, body {
        height: 100%;
        width: 100%;
        margin: 0;
        padding: 0;
        overflow: hidden;
    }

    /*окно-слайдер "Параметры отчета"*/
    #reportSplitter {
        height: 100%;
    }

        #reportSplitter > .k-splitbar {
            display: none;
        }

    #settingsPane {
        z-index: 10002;
    }

    #settingsToolBar {
        width: 100%;
        padding-left: 0;
        border-radius: unset;
        padding-right: 0;
        border: none;
    }

    #reportParametersBtn {
        height: 150px;
        writing-mode: vertical-rl;
        padding: 0;
        border-radius: unset;
    }

    .k-resize-n, .k-resize-nw, .k-resize-w {
        display: none !important;
    }

    /*панель параметры отчета*/
    #divConfiguration {
        width: 100%;
    }

        #divConfiguration .report-title {
            text-align: center;
        }

        #divConfiguration fieldset {
            padding-bottom: 20px;
            min-width: 0;
            margin: 0 10px;
        }

        #divConfiguration .parameter-group {
            margin-bottom: 5px;
        }

        #divConfiguration #GroupObjectListToolbar {
            border-bottom: none;
            border-radius: 0;
            background-color: #fff;
            padding: 0;
        }

    #fastReport {
        width: 100%;
        height: 100%;
    }
</style>

<div id="reportSplitter">
    <div id="settingsPane">
        <a id="reportParametersBtn" class="k-button">Параметры отчета</a>
        <div id="slidingZoneLeft">
            <div id="settingsToolBar"></div>
            <div id="divConfiguration">
                <div class="form-group">
                    <div class="report-title col-sm-12">
                        <h2>@Html.Label(Model.ReportType.Title)</h2>
                    </div>
                </div>
                @if (Model.ReportType.FilterValues != null && Model.ReportType.FilterValues.Count(x => x.ParamType != DataType.HiddenValue) > 0)
                {
                    <form id="parametersForm" class="form-horizontal">
                        <fieldset>
                            <legend>Настройки отчета</legend>
                            @foreach (FilterValue filterValue in Model.ReportType.FilterValues)
                            {
                                @*для подключения UseModelState=true необходимо перенести процедуры pckg_fm.GetModelState, pckg_fm.SetModelState*@
                                string defaultValue = ReportsFactory.GetParamsDefaultValue(Model.ReportType, filterValue, false);
                                <div class="form-group parameter-group">
                                    <div class="col-sm-4">
                                        @Html.Label(filterValue.ParamLabel)
                                    </div>
                                    <div class="col-sm-8">
                                        @switch (filterValue.ParamType)
                                        {
                                            case DataType.Date:
                                                DateTime? dateDefaultValue = defaultValue.IsNotEmpty() ? (DateTime?)defaultValue.ParseToDateTime() : null;
                                                @(Html.Kendo()
                                                                                                                                    .DatePicker()
                                                                                                                                    .Name(filterValue.ParamName)
                                                                                                                                    .Format("dd.MM.yyyy")
                                                                                                                                    .Value(dateDefaultValue)
                                                                                                                                    .HtmlAttributes(new { @style = "width: 100%;" }))
                                                break;
                                            case DataType.DatePeriod:
                                                DateTime? datePeriodDefaultValue = defaultValue.IsNotEmpty() ? (DateTime?)defaultValue.ParseToDateTime() : null;
                                                @(Html.Kendo()
                                                                                                                                    .DatePicker()
                                                                                                                                    .Name(filterValue.ParamName)
                                                                                                                                    .Format("MMMM yyyy")
                                                                                                                                    .Start(CalendarView.Year)
                                                                                                                                    .Depth(CalendarView.Year)
                                                                                                                                    .Value(datePeriodDefaultValue)
                                                                                                                                    .HtmlAttributes(new { @style = "width: 100%;" }))
                                                break;
                                            case DataType.Decimal:
                                                decimal? decimalDefaultValue = defaultValue.IsNotEmpty() ? (decimal?)defaultValue.ParseToDecimal() : null;
                                                @(Html.Kendo().NumericTextBox<decimal>()
                                                                                                                                    .Name(filterValue.ParamName)
                                                                                                                                    .Spinners(false)
                                                                                                                                    .Decimals(2)
                                                                                                                                    .Format("N2")
                                                                                                                                    .Value(decimalDefaultValue)
                                                                                                                                    .HtmlAttributes(new { @style = "width: 100%;" }))
                                                break;
                                            case DataType.Integer:
                                                long? longDefaultValue = defaultValue.IsNotEmpty() ? (long?)defaultValue.ParseToLong() : null;
                                                @(Html.Kendo().NumericTextBox<long>()
                                                                                                                                    .Name(filterValue.ParamName)
                                                                                                                                    .Spinners(false)
                                                                                                                                    .Decimals(0)
                                                                                                                                    .Format("N0")
                                                                                                                                    .Value(longDefaultValue)
                                                                                                                                    .HtmlAttributes(new { @style = "width: 100%;" }))
                                                break;
                                            case DataType.Year:
                                                long? yearDefaultValue = defaultValue.IsNotEmpty() ? (long?)defaultValue.ParseToLong() : null;
                                                @(Html.Kendo().NumericTextBox<long>()
                                                                                                                                    .Name(filterValue.ParamName)
                                                                                                                                    .Spinners(false)
                                                                                                                                    .Min(1900)
                                                                                                                                    .Max(2100)
                                                                                                                                    .Decimals(0)
                                                                                                                                    .Format("N0")
                                                                                                                                    .Value(yearDefaultValue)
                                                                                                                                    .HtmlAttributes(new { @style = "width: 100%;" }))
                                                break;
                                            case DataType.TextBox:
                                                @Html.TextBox(filterValue.ParamName, defaultValue, new { @class = "k-textbox", @style = "width: 100%;" })
                                                break;
                                            case DataType.CheckBox:
                                                <div class="custom-checkbox">
                                                    @(Html.Kendo().CheckBox()
                                                                                                                                        .Name(filterValue.ParamName)
                                                                                                                                        .Label(string.Empty)
                                                                                                                                        .Checked(defaultValue.ParseToBoolean())
                                                                                                                                        .HtmlAttributes(new { @style = "width: 100%;" }))
                                                </div>
                                                break;
                                            case DataType.List:
                                                List<SelectListItem> itemList = new List<SelectListItem>();
                                                string selectedValue = null;

                                                if (filterValue.PosibleValues != null && filterValue.PosibleValues.Count > 0)
                                                {
                                                    foreach (string posValue in filterValue.PosibleValues)
                                                    {
                                                        SelectListItem item = new SelectListItem(posValue, posValue + ":" + posValue);
                                                        if (defaultValue.IsNotEmpty())
                                                        {
                                                            if (filterValue.CheckBoxes)
                                                            {
                                                                string[] defaultValueSplit = defaultValue.Split(',');
                                                                if (defaultValueSplit.Contains(posValue))
                                                                {
                                                                    if (selectedValue.IsNotEmpty())
                                                                    {
                                                                        selectedValue += "," + posValue + ":" + posValue;
                                                                    }
                                                                    else
                                                                    {
                                                                        selectedValue = posValue + ":" + posValue;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                if (posValue == defaultValue)
                                                                {
                                                                    selectedValue = posValue + ":" + posValue;
                                                                }
                                                            }
                                                        }
                                                        itemList.Add(item);
                                                    }
                                                }
                                                else if (filterValue.ReportParameters != null && filterValue.ReportParameters.Any())
                                                {
                                                    foreach (ReportParameter parameter in filterValue.ReportParameters)
                                                    {
                                                        SelectListItem item = new SelectListItem(parameter.Value, parameter.Key);

                                                        if (defaultValue.IsNotEmpty())
                                                        {
                                                            if (filterValue.CheckBoxes)
                                                            {
                                                                string[] defaultValueSplit = defaultValue.Split(',');

                                                                if (defaultValueSplit.Contains(parameter.Key))
                                                                {
                                                                    if (selectedValue.IsNotEmpty())
                                                                    {
                                                                        selectedValue += "," + parameter.Key;
                                                                    }
                                                                    else
                                                                    {
                                                                        selectedValue = parameter.Key;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                if (parameter.Key == defaultValue)
                                                                {
                                                                    selectedValue = parameter.Key;
                                                                }
                                                            }
                                                        }
                                                        itemList.Add(item);
                                                    }
                                                }
                                                else if (filterValue.ReferenceID.HasValue)
                                                {
                                                    var items = Core.RefLib.ReferencesCommon.GetItems(filterValue.ReferenceID.Value);

                                                    foreach (var posValue in items)
                                                    {
                                                        SelectListItem item = new SelectListItem(posValue.Value, filterValue.ReferenceID.Value + ":" + posValue.Value);
                                                        if (defaultValue.IsNotEmpty())
                                                        {
                                                            if (filterValue.CheckBoxes)
                                                            {
                                                                string[] defaultValueSplit = defaultValue.Split(',');
                                                                if (defaultValueSplit.Contains(posValue.Value))
                                                                {
                                                                    if (selectedValue.IsNotEmpty())
                                                                    {
                                                                        selectedValue += "," + filterValue.ReferenceID.Value + ":" + posValue.Value;
                                                                    }
                                                                    else
                                                                    {
                                                                        selectedValue = filterValue.ReferenceID.Value + ":" + posValue.Value;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                if (posValue.Value == defaultValue)
                                                                {
                                                                    selectedValue = filterValue.ReferenceID.Value + ":" + posValue.Value;
                                                                }
                                                            }
                                                        }
                                                        itemList.Add(item);
                                                    }
                                                }

                                                @if (filterValue.CheckBoxes)
                                                {
                                                    @(Html.Kendo().MultiSelect()
                                                        .Name(filterValue.ParamName)
                                                        .DataTextField("Text")
                                                        .DataValueField("Value")
                                                        .BindTo(itemList)
                                                        .Value(selectedValue.IsNotEmpty() ? selectedValue.Split(',') : null)
                                                        .HtmlAttributes(new { @style = "width: 100%;" }))
                                                }
                                                else if (filterValue.HasFilter == true)
                                                {
                                                    @(Html.Kendo().DropDownList()
                                                        .Name(filterValue.ParamName)
                                                        .DataTextField("Text")
                                                        .DataValueField("Value")
                                                        .BindTo(itemList)
                                                        .Value(selectedValue)
                                                        .Filter(FilterType.Contains)
                                                        .HtmlAttributes(new { @style = "width: 100%;" }))
                                                }
                                                else
                                                {
                                                    @(Html.Kendo().DropDownList()
                                                        .Name(filterValue.ParamName)
                                                        .DataTextField("Text")
                                                        .DataValueField("Value")
                                                        .BindTo(itemList)
                                                        .Value(selectedValue)
                                                        .HtmlAttributes(new { @style = "width: 100%;" }))
                                                }
                                                break;
                                            case DataType.ObjectsList:
                                                @(Html.Kendo().ToolBar().Name("GroupObjectListToolbar").Items(x =>
                                                                                {
                                                                                    x.Add().Type(CommandType.Button).Text("Выгрузить группу").Overflow(ShowInOverflowPopup.Never).Id("print-button").HtmlAttributes(new { style = "margin: 0;" });
                                                                                    x.Add().Template(@"<select id=""print-data-types"" style=""width: 100%;"">
                                                                                                                                                        <option selected>Pdf</option>
                                                                                                                                                        <option>Docx</option>
                                                                                                                                                        <option>Xlsx</option>
                                                                                                                                                    </select>").Overflow(ShowInOverflowPopup.Never);
                                                                                }))
                                                @(Html.Kendo().ListBox()
                                                                                            .Name(filterValue.ParamName)
                                                                                            .BindTo(filterValue.ReportParameters)
                                                                                            .Selectable(ListBoxSelectable.Single)
                                                                                            .DataTextField("Value")
                                                                                            .DataValueField("Key")
                                                                                            .HtmlAttributes(new { style = "width: 100%;" })
                                                )
                                                break;
                                        }
                                    </div>
                                </div>
                            }
                        </fieldset>
                    </form>
                }
            </div>
        </div>
    </div>
    <div id="reportPane">
        <iframe id="fastReport"></iframe>
    </div>
</div>

<script type="text/javascript">
    var reportTypeId = @Html.Raw(JsonConvert.SerializeObject(Model.ReportType.Code)),
        openEmpty = @Html.Raw(JsonConvert.SerializeObject(Model.ReportType.OpenEmpty)),
        hiddenView = @Html.Raw(JsonConvert.SerializeObject(Model.ReportType.HiddenView)),
        currentObjectId =  @Html.Raw(JsonConvert.SerializeObject(Model.ObjectId)),
        currentRegisterId =  @Html.Raw(JsonConvert.SerializeObject(Model.RegisterId));;

    $(document).ready(function () {

        CheckInspectorPersonDate();

        var slidingZoneLeft = $('#slidingZoneLeft').kendoWindow({
            title: 'Параметры отчета',
            width: '30%',
            actions: ['pin', 'close'],
            draggable: false,
            resizable: true,
            position: {
                top: 0,
                left: 22
            },
            animation:
            {
                open: {
                    effects: 'slideIn:right',
                    duration: 1000
                },
                close: {
                    effects: 'slideIn:right',
                    reverse: true,
                    duration: 1000
                },
            },
            visible: false,
            minWidth: 300
        }).data('kendoWindow'),
            groupObjectList = $("#parametersForm #GroupObjectList").data("kendoListBox"),
            reportWindow = Common.UI.GetWindow('registerModalWindow', window.parent);

        //CIPJS-545 заменяем стандартную кнопку закрыть
        if (window.parent && reportWindow) {
            var customCloseButton = $('<a></a>')
                .attr('role', 'button')
                .attr('href', '#')
                .attr('aria-label', 'Close')
                .addClass('k-button k-bare k-button-icon k-window-action'),
                closeSpan = $('<span></span>').addClass('k-icon k-i-custom-close'),
                actionsPlaceholder = window.parent.$(reportWindow.wrapper).find('.k-header .k-window-actions');

            if (actionsPlaceholder.length > 0) {
                actionsPlaceholder.find('.k-i-close').parent().remove();
                actionsPlaceholder.append(customCloseButton);
                customCloseButton.append(closeSpan);
                customCloseButton.on('click', function (e) {
                    e.preventDefault();
                    Common.UI.CloseWindow('registerModalWindow', window.parent);
                });
            }

            reportWindow.options.customClose = function (e) {
                Common.UI.ShowConfirm({
                    title: 'Подтверждение',
                    content: 'Сохранить отчетную форму?',
                    onSuccess: function (e) {
                        saveReport(function (res) {
                            if (window.parent && window.parent.onReportSaved)
                                window.parent.onReportSaved(res);
                            reportWindow.close();
                        });
                    },
                    onFail: function (e) {
                        reportWindow.close();
                    }
                });
            };
        }

        //настройка стилей
        $(slidingZoneLeft.element).closest('.k-window').css('bottom', '0');
        $(slidingZoneLeft.element).closest('.k-window').css('-webkit-box-shadow', 'none');
        $(slidingZoneLeft.element).closest('.k-window').css('box-shadow', 'none');
        $(slidingZoneLeft.element).closest('.k-window').css('border-radius', 'unset');
        $(slidingZoneLeft.element).closest('.k-window').find('.k-resize-handle.k-resize-n,' +
            '.k-resize-handle.k-resize-w,' +
            '.k-resize-handle.k-resize-s,' +
            '.k-resize-handle.k-resize-se,' +
            '.k-resize-handle.k-resize-sw,' +
            '.k-resize-handle.k-resize-ne,' +
            '.k-resize-handle.k-resize-nw')
            .css('display', 'none');
        $(slidingZoneLeft.element).closest('.k-window').css('z-index', 10001);

        var settingsToolBar = $('#settingsToolBar').kendoToolBar({
            items: [
                {
                    type: 'button',
                    id: "buttonView",
                    text: 'Просмотреть',
                    click: function (e) {
                        viewReport(true);
                    }
                },
                {
                    type: 'button',
                    id: "buttonSave",
                    text: 'Сохранить',
                    click: function (e) {
                        var parameters = getCurrentParameters();

                        Common.UI.ShowWindow('Сохранение отчета',
                            '@Html.Raw(Url.Action("Save", "Report", new { reportTypeId = Model.ReportType.Code, registerId = Model.RegisterId, objectId = Model.ObjectId, UniqueSessionKey = ViewBag.CurrentUniqueSessionKey }))' + (parameters ? '&' + parameters : ''),
                            'WindowSaveReport',
                            function (e) {
                                if (e.Data) {
                                    Common.ShowMessage(e.Data);
                                }
                            },
                            700,
                            450
                        );
                    }
                },
                {
                    type: 'button',
                    id: "buttonDefault",
                    text: 'По умолчанию',
                    click: function (e) {
                        kendo.ui.progress($('#divConfiguration'), true);

                        $.ajax({
                            type: 'POST',
                            url: '@Url.Action("GetParametersDefaultValues", "Report")',
                            data: { reportTypeId: reportTypeId },
                            dataType: 'json',
                            success: function (response) {
                                if (response && response.Data && response.Data.length > 0) {
                                    var parametersForm = $('#parametersForm');

                                    if (parametersForm.length > 0) {
                                        for (var i = 0; i < response.Data.length; i++) {
                                            var filterParam = response.Data[i];
                                            var filterEl = parametersForm.find('[name="' + filterParam.Name + '"]');
                                            if (filterEl.length > 0) {
                                                var dataRoleAttr = filterEl.attr('data-role');
                                                switch (dataRoleAttr) {
                                                    case 'numerictextbox':
                                                        var kendoNumericFilter = filterEl.data('kendoNumericTextBox');
                                                        if (kendoNumericFilter) {
                                                            var numericValue = parseFloat(filterParam.Value);
                                                            kendoNumericFilter.value(!isNaN(numericValue) ? numericValue : null);
                                                        }
                                                        break;
                                                    case 'datepicker':
                                                        var kendoDatePickerFilter = filterEl.data('kendoDatePicker');
                                                        if (kendoDatePickerFilter) {
                                                            var dateValue = kendo.parseDate(filterParam.Value);
                                                            kendoDatePickerFilter.value(dateValue);
                                                        }
                                                        break;
                                                    case 'multiselect':
                                                        var kendoMultiSelectFilter = filterEl.data('kendoMultiSelect');
                                                        if (kendoMultiSelectFilter) {
                                                            if (filterParam.Value) {
                                                                var selectedValue = [];
                                                                var filterParamsSplit = filterParam.Value ? filterParam.Value.split(',') : [];
                                                                var kendoMultiSelectFilterData = kendoMultiSelectFilter.dataSource.data();
                                                                for (var x = 0; x < filterParamsSplit.length; x++) {
                                                                    for (var j = 0; j < kendoMultiSelectFilterData.length; j++) {
                                                                        if (kendoMultiSelectFilterData[j].Text == filterParamsSplit[x]
                                                                            || kendoMultiSelectFilterData[j].Value == filterParamsSplit[x]) {
                                                                            selectedValue.push(kendoMultiSelectFilterData[j].Value);
                                                                        }
                                                                    }
                                                                }
                                                                kendoMultiSelectFilter.value(selectedValue);
                                                            }
                                                            else {
                                                                kendoMultiSelectFilter.value(null);
                                                            }
                                                        }
                                                        break;
                                                    case 'dropdownlist':
                                                        var kendoDropDownListFilter = filterEl.data('kendoDropDownList');
                                                        if (kendoDropDownListFilter) {
                                                            if (filterParam.Value) {
                                                                var selectedValue = null;
                                                                var kendoDropDownListFilterData = kendoDropDownListFilter.dataSource.data();
                                                                for (var k = 0; k < kendoDropDownListFilterData.length; k++) {
                                                                    if (kendoDropDownListFilterData[k].Text == filterParam.Value
                                                                        || kendoDropDownListFilterData[k].Value == filterParam.Value) {
                                                                        selectedValue = kendoDropDownListFilterData[k].Value;
                                                                    }
                                                                }
                                                                kendoDropDownListFilter.value(selectedValue);
                                                            }
                                                            else {
                                                                kendoDropDownListFilter.value(null);
                                                            }
                                                        }
                                                        break;
                                                    default:
                                                        //доработка для чекбоксов
                                                        if (filterEl.is('input:checkbox')) {
                                                            filterEl.prop('checked', filterParam.Value && filterParam.Value.toLowerCase() === "true");
                                                        }
                                                        else {
                                                            filterEl.val(filterParam.Value || '');
                                                        }
                                                        break;
                                                }
                                            }
                                        }
                                    }
                                }

                                kendo.ui.progress($('#divConfiguration'), false);

                                if (response.Errors && response.Errors.length > 0) {
                                    Common.ShowError(response.Errors.join('<br>'))
                                }
                            }
                        });
                    }
                }
            ]
        }).data('kendoToolBar');

        if (settingsToolBar && @((Model.ReportType != null && Model.ReportType.AdditionalCommands.IsNotEmpty()).ToString().ToLower()))
        {
            $.ajax({
                type: 'GET',
                url: '@Url.Action("GetAdditionalButtons", "Report")',
                data: { reportTypeId: reportTypeId },
                dataType: 'json',
                success: function (response) {
                    if (response && response.length > 0) {
                        $.each(response, function () {
                            var button = {
                                type: "button"
                            };

                            var $buttonItem = this;

                            if ($buttonItem.Id)
                                button.id = $buttonItem.Id;
                            if ($buttonItem.Caption)
                                button.text = $buttonItem.Caption;
                            if ($buttonItem.Icon)
                                button.icon = $buttonItem.Icon;

                            if ($buttonItem.NavigateURL) {
                                if ($buttonItem.OpenInNewWindow) {
                                    button.click = function (e) {
                                        var newWindow = window.open(getUrl($buttonItem, reportTypeId), $buttonItem.Target);
                                        newWindow.focus();
                                    }
                                }
                                else if ($buttonItem.OpenInRadWindow) {
                                    button.click = function (e) {
                                        Common.UI.ShowWindow($buttonItem.Caption, getUrl($buttonItem, reportTypeId), 'registerModalWindow', null,
                                            $buttonItem.WindowWidth && $buttonItem.WindowWidth > 0 ? $buttonItem.WindowWidth : null,
                                            $buttonItem.WindowHeight && $buttonItem.WindowHeight > 0 ? $buttonItem.WindowHeight : null);
                                    }
                                }
                                else {
                                    button.click = function(e) {
                                        var newWindow = window.open(getUrl($buttonItem, reportTypeId));
                                        newWindow.focus();
                                    }
                                }
                            }

                            settingsToolBar.add(button);
                        });
                    }
                }
            });
        }

        function getUrl(data, reportTypeId) {
            var parameters = getCurrentParameters();
            return data.NavigateURL + (Common.GetUrlParameters(data.NavigateURL).length == 0 ? '?' : '&') + parameters + '&reportTypeId=' + reportTypeId;
        }

        $('#reportSplitter').kendoSplitter({
            orientation: 'horizontal',
            panes: [
                { collapsible: false, resizable: false, size: '22px' },
                { collapsible: false, resizable: false }
            ]
        });

        $('#print-data-types').kendoDropDownList();

        $('#reportParametersBtn').click(function () {
            if ($(slidingZoneLeft.element).is(':hidden')) {
                slidingZoneLeft.open();
            }
            else {
                slidingZoneLeft.close();
            }
        });

        $('#GroupObjectListToolbar #print-button').on('click', function () {
            var parameters = getCurrentParameters(),
                format = $('#print-data-types').data('kendoDropDownList').value().toLowerCase();

            window.location = getDefaultUrl() +
                '&objectId=' + currentObjectId +
                '&format=' + format +
                '&IsGroup=true' +
                (parameters ? '&' + parameters : '')
        });

        function getDefaultUrl() {
            return '@Html.Raw(Url.Action("Print", "Report", new { reportTypeId = Model.ReportType.Code, registerId = Model.RegisterId, UniqueSessionKey = ViewBag.CurrentUniqueSessionKey }))';
        }

        function getCurrentParameters() {
            var parametersForm = $('#parametersForm');
            var parameters;
            if (parametersForm.length > 0) {
                parameters = Common.Functions.SerializeFormToQueryString(parametersForm);
            }

            return parameters;
        }

        function viewReport(update) {
            var parameters = getCurrentParameters();

            if (groupObjectList) {
                var selectedObject = groupObjectList.dataItem(groupObjectList.select());
                if (selectedObject) {
                    var selectedObjectId = kendo.parseInt(selectedObject.get('Key'));
                    if (selectedObjectId) {
                        currentObjectId = selectedObjectId;
                    }
                }
            }

            //CIPJS-449 Когда раскрыли "Настройки отчета", что то поменяли и нажали на "Просмотреть" - автоматически панель настроек скрывалась сразу
            if (!$(slidingZoneLeft.element).is(':hidden')) {
                slidingZoneLeft.close();
            }

            if (update) {
                kendo.ui.progress($('body'), true);
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("UpdateParametrs", "Report")?UniqueSessionKey=' + '@ViewBag.CurrentUniqueSessionKey' + (parameters ? '&' + parameters : ''),
                    data: { reportTypeId: reportTypeId, registerId: currentRegisterId, objectId: currentObjectId },
                    success: function () {
                        $('#fastReport').attr('src', getDefaultUrl() + '&objectId=' + currentObjectId + (parameters ? '&' + parameters : ''));
                        kendo.ui.progress($('body'), false);
                    },
                    error: function (response) {
                        Common.ShowError(response.responseText);
                        kendo.ui.progress($('body'), false);
                    }
                });
            } else {
                $('#fastReport').attr('src',
                    getDefaultUrl() +
                    '&objectId=' + currentObjectId +
                    (parameters ? '&' + parameters : ''));
            }
        }

        //сохранение отчета напрямую, без модального окна
        function saveReport(callback) {
            var parameters = getCurrentParameters();
            kendo.ui.progress($('body'), true);
            $.ajax({
                url: '@Html.Raw(Url.Action("SaveReport", "Report", new { reportTypeId = Model.ReportType.Code, registerId = Model.RegisterId, objectId = Model.ObjectId, UniqueSessionKey = ViewBag.CurrentUniqueSessionKey, FileType = "Docx" }))' + (parameters ? '&' + parameters : ''),
                type: 'POST',
                dataType: 'json',
                success: function (e) {
                    kendo.ui.progress($('body'), false);
                    if (e.Errors && e.Errors.length > 0) {
                        Common.ShowError(e.Errors.join('<br>'));
                    } else if ($.isFunction(callback)) {
                        callback(e);
                    }
                },
                error: function (e) {
                    kendo.ui.progress($('body'), false);
                    Common.ShowError(e.responseText);
                }
            });
        }

        if (groupObjectList) {
            groupObjectList.select(groupObjectList.items().first());

            groupObjectList.bind('change', viewReport);
        }

        if (openEmpty) {
            viewReport();
        }
        //CIPJS-116 При открытии формы для формирования отчета панель с настройками не выводить сразу, Пользователь измени настройки если есть необходимость
        else {
            slidingZoneLeft.open();
        }

        if (hiddenView) {
            var settingsToolBar = $("#settingsToolBar").data("kendoToolBar");
            settingsToolBar.hide($("#buttonView"));
        }

        // CIPJS-793 
        // При формировании печатной формы "Расчета" до согласования расчета отображать предупреждение о том, что расчет еще не согласован.
        function CheckInspectorPersonDate() {

            if (reportTypeId == 1006) {
                var response = $(window.parent)[0].HasInspectorPersonDate();
                if ( response == null ) {
                    Common.ShowError('Внимание! Дата согласования расчета не заполнена!');
                }  
            }
        };

    });
</script>