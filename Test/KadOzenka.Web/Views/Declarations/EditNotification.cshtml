@using ObjectModel.Declarations
@using ObjectModel.Directory.Declarations
@model KadOzenka.Web.Models.Declarations.NotificationModel

<style>
	#rejectionReasonTypesFieldset label.k-checkbox-label {
		margin-bottom: 10px;
	}
</style>

@using (Html.BeginForm("EditNotification", "Declarations", FormMethod.Post))
{
    @Html.HiddenFor(m => m.Id)
    @Html.HiddenFor(m => m.DeclarationId)
    @Html.HiddenFor(m => m.BookId)
<div class="form-horizontal col-sm-12">
    <div class="form-group"></div>
    <div class="form-group">
        <div class="col-sm-3">
            @Html.CustomLabelFor(m => m.BookId)
        </div>
        <div class="col-sm-9">
            @Html.PlatformAutoCompleteWithEditButtonFor(m => m.BookDisplay, "Value", "Declarations", "GetAutoCompleteBook", "clearBookEvent", "editBook", "selectBookEvent", isReadonly: false)
        </div>
    </div>
    <div class="form-group">
        <div class="col-sm-3">
            @Html.CustomLabelFor(m => m.Type)
        </div>
        <div class="col-sm-9">
            @Html.KendoEnumDropDownListFor(m => m.Type, isReadonly: false)
        </div>
    </div>
    <div class="form-group">
        <div class="col-sm-4">
            @Html.CustomLabelFor(m => m.Number)
        </div>
        <div class="col-sm-8">
            @Html.KendoTextBoxFor(m => m.Number, isReadonly: false)
        </div>
    </div>
    <div class="form-group">
        <div class="col-sm-4">
            @Html.CustomLabelFor(m => m.Date)
        </div>
        <div class="col-sm-8">
            @Html.KendoDatePickerFor(m => m.Date, isReadonly: false)
        </div>
    </div>
    <div class="form-group">
        <div class="col-sm-4">
            @Html.CustomLabelFor(m => m.MailNumber)
        </div>
        <div class="col-sm-8">
            @Html.KendoTextBoxFor(m => m.MailNumber, isReadonly: false)
        </div>
    </div>
    <div class="form-group">
        <div class="col-sm-4">
            @Html.CustomLabelFor(m => m.MailDate)
        </div>
        <div class="col-sm-8">
            @Html.KendoDatePickerFor(m => m.MailDate, isReadonly: false)
        </div>
    </div>
    <div class="form-group">
        <div class="col-sm-12">
            <fieldset id="rejectionReasonTypesFieldset">
                <legend>Причина отказа</legend>
                <div class="row">
                    <div class="col-sm-6">
                        @(Html.Kendo().CheckBox()
                                      .Name(nameof(RejectionReasonType) + RejectionReasonType.ApplicantIsNotObjectTypeOwner.GetEnumCode())
                                      .Label(RejectionReasonType.ApplicantIsNotObjectTypeOwner.GetEnumDescription())
                                      .Checked(Model.RejectionReasonTypes != null && Model.RejectionReasonTypes.Any(x => x == RejectionReasonType.ApplicantIsNotObjectTypeOwner)))
                    </div>
                    <div class="col-sm-6">
                        @(Html.Kendo().CheckBox()
                                      .Name(nameof(RejectionReasonType) + RejectionReasonType.DocumentsAreNotAttached.GetEnumCode())
                                      .Label(RejectionReasonType.DocumentsAreNotAttached.GetEnumDescription())
                                      .Checked(Model.RejectionReasonTypes != null && Model.RejectionReasonTypes.Any(x => x == RejectionReasonType.DocumentsAreNotAttached)))
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-6">
                        @(Html.Kendo().CheckBox()
                                      .Name(nameof(RejectionReasonType) + RejectionReasonType.DeclarationDoesNotMatchForm.GetEnumCode())
                                      .Label(RejectionReasonType.DeclarationDoesNotMatchForm.GetEnumDescription())
                                      .Checked(Model.RejectionReasonTypes != null && Model.RejectionReasonTypes.Any(x => x == RejectionReasonType.DeclarationDoesNotMatchForm)))
                    </div>
                    <div class="col-sm-6">
                        @(Html.Kendo().CheckBox()
                                      .Name(nameof(RejectionReasonType) + RejectionReasonType.DeclarationIsNotCertified.GetEnumCode())
                                      .Label(RejectionReasonType.DeclarationIsNotCertified.GetEnumDescription())
                                      .Checked(Model.RejectionReasonTypes != null && Model.RejectionReasonTypes.Any(x => x == RejectionReasonType.DeclarationIsNotCertified)))
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-6">
                        @(Html.Kendo().CheckBox()
                                      .Name(nameof(RejectionReasonType) + RejectionReasonType.DeclarationAndDocumentsDoNotMeetRequirements.GetEnumCode())
                                      .Label(RejectionReasonType.DeclarationAndDocumentsDoNotMeetRequirements.GetEnumDescription())
                                      .Checked(Model.RejectionReasonTypes != null && Model.RejectionReasonTypes.Any(x => x == RejectionReasonType.DeclarationAndDocumentsDoNotMeetRequirements)))
                    </div>
                    <div class="col-sm-6">
                        @(Html.Kendo().CheckBox()
                                      .Name(nameof(RejectionReasonType) + RejectionReasonType.Other.GetEnumCode())
                                      .Label(RejectionReasonType.Other.GetEnumDescription())
                                      .Checked(Model.RejectionReasonTypes != null && Model.RejectionReasonTypes.Any(x => x == RejectionReasonType.Other)))
                    </div>
                </div>
            </fieldset>
        </div>
    </div>
    <div class="form-group">
        <div class="col-sm-4">
            @Html.CustomLabelFor(m => m.RejectionReason)
        </div>
        <div class="col-sm-8">
            @Html.TextAreaFor(m => m.RejectionReason, 5, 0, new { @class = "k-textbox", @style = "width: 100%; resize: none;padding: 10px", @editMode = "true" })
        </div>
    </div>
    <div class="form-group">
        <div class="col-sm-4">
            @Html.CustomLabelFor(m => m.Annex)
        </div>
        <div class="col-sm-8">
            @Html.TextAreaFor(m => m.Annex, 5, 0, new { @class = "k-textbox", @style = "width: 100%; resize: none;padding: 10px", @editMode = "true" })
        </div>
    </div>
    <div class="form-group">
        <div class="col-sm-12">
            <button style="float: right" id="save" disabled="@(((!Model.IsEditApproveNotifications && Model.Type.GetValueOrDefault() == UvedType.Item1)||(!Model.IsEditOtherNotifications && Model.Type.GetValueOrDefault() != UvedType.Item1)) ? true : false)" class="k-button" type="button">Сохранить</button>
        </div>
    </div>
</div>
}

@section styles {
    <style>
        fieldset#rejectionReasonTypesFieldset {
            border: 1px solid #c8c6cc;
            border-radius: 6px;
            margin-bottom: 10px;
            padding: 0.8em;
        }

        fieldset#rejectionReasonTypesFieldset legend {
            font-size: initial;
        }

        .k-checkbox-label {
            font-size: medium;
        }
    </style>
}

<script src="~/js/custom-validation.js"></script>
<script type="text/javascript">
	var isEditApproveNotifications = @(Model.IsEditApproveNotifications ? "true" : "false");
	var isEditOtherNotifications = @(Model.IsEditOtherNotifications ? "true" : "false");

    $(document).ready(function () {
		setOnBlurHandlerForAutocomplete('#@Html.IdFor(m => m.BookId)', '#@Html.IdFor(m => m.BookDisplay)');
        var value = $('#Type').data('kendoDropDownList').value();
        setupPermissionRestrictions(value);
		changeRejectionReasonVisability(value);
		changeAnnexVisability(value);
		$('#Type').data('kendoDropDownList').bind("change", onTypeChanged);

		$('#save').on('click',
			function () {
				kendo.ui.progress($('body'), true);
				var form = $('form');
				var formObject = Common.Functions.FormToObject(form);
				debugger;
				let rejectionReasonTypes = Object.keys(formObject).filter((propertyName) => {
					return propertyName.startsWith('@nameof(RejectionReasonType)');
				});
				formObject['RejectionReasonTypes'] = [];
				for (var i = 0; i < rejectionReasonTypes.length; i++) {
					if (formObject[rejectionReasonTypes[i]] === true) {
						formObject['RejectionReasonTypes'].push(
							rejectionReasonTypes[i].replace('@nameof(RejectionReasonType)', ''));
					}
				}

				$.post(form.attr('action'), formObject).done(function (response) {
					if (response.Errors) {
                        var errors = getErrors(response.Errors);
						Common.ShowError(errors);
						return;
					}

					if (response.Success && response.data) {
						$('#@Html.IdFor(m => m.Id)').val(response.data.Id);
						Common.ShowMessage(response.Success);
					}
				}).fail(function (response, textStatus, errorThrown) {
				    Common.ShowError(response.responseText);
				}).always(function () {
				    kendo.ui.progress($('body'), false);
				});
			});
    });

    function setupPermissionRestrictions(notificationValue) {
        var typeList = $('#Type').data('kendoDropDownList');
        var oldData = typeList.dataSource.data();
        oldData.filter(x => x.Value == '@UvedType.None.GetEnumCode()').forEach(x => typeList.dataSource.remove(x));
        if ($('#@Html.IdFor(m => m.Id)').val() == -1) {
            if (!isEditApproveNotifications) {
                oldData.filter(x => x.Value == '@UvedType.Item1.GetEnumCode()').forEach(x => typeList.dataSource.remove(x));
            }
            if (!isEditOtherNotifications) {
                oldData.filter(x => x.Value != '@UvedType.Item1.GetEnumCode()').forEach(x => typeList.dataSource.remove(x));
            }
        } else {
            if (!isEditApproveNotifications) {
                if (notificationValue == '@UvedType.Item1.GetEnumCode()') {
                    doFormReadonly();
                } else {
                    oldData.filter(x => x.Value == '@UvedType.Item1.GetEnumCode()').forEach(x => typeList.dataSource.remove(x));
                }
            }
            if (!isEditOtherNotifications) {
                if (notificationValue == '@UvedType.Item1.GetEnumCode()') {
                    oldData.filter(x => x.Value != '@UvedType.Item1.GetEnumCode()').forEach(x => typeList.dataSource.remove(x));
                } else {
                    doFormReadonly();
                }
            }
        }
    }

    function doFormReadonly() {
        $('#BookDisplay').attr("disabled", true);
        $('#Type').data('kendoDropDownList').enable(false);
        $('.clear-button-BookDisplay').hide();
        $('.search-button-BookDisplay').hide();
        $('#Number').attr('disabled', true);
        $('#Date').data("kendoDatePicker").enable(false);
        $('#MailNumber').attr('disabled', true);
        $('#MailDate').data("kendoDatePicker").enable(false);
        $('fieldset[id="rejectionReasonTypesFieldset"] input[type="checkbox"]').attr("disabled", true);
        $('#RejectionReason').attr('disabled', true);
        $('#Annex').attr('disabled', true);
    }

	function selectBookEvent() {
		$('#@Html.IdFor(m => m.BookId)').val(this.e.dataItem.Id);
	}
	function clearBookEvent() {
		$('#@Html.IdFor(m => m.BookId)').val(0);
	}

	function editBook () {
		var contentUrl = '@Url.Action("DeclarationsBookSelect", "RegistersView")';
		var title = 'Выбор Книги';

		var callbackFn = function (item) {
			kendo.ui.progress($('body'), true);
			$('[name="BookId"]').val(item.ID);
			$.ajax({
				type: 'GET',
				url: '@Url.Action("GetBookData", "Declarations")',
				data: { 'bookId': item.ID },
				dataType: 'json',
				success: function (response) {
					if (response && !$.isEmptyObject(response)) {
						console.log('response', response.data);
						$('#@Html.IdFor(m => m.BookDisplay)').val(response.data.Value);
					}
					kendo.ui.progress($('body'), false);
				}
			});
		}
		Common.UI.ChooseWindow(title, contentUrl, callbackFn, 'Grid-@OMBook.GetRegisterId()');
	};

	function setOnBlurHandlerForAutocomplete(idField, displayField) {
		$(displayField).on('blur', function () {
			if ($(displayField).val() === "") {
				$(idField).val(0);
				return;
			}

			if ($(idField).val() === "0" || $(idField).val() === "") {
				$(displayField).val("");
			}
		});
	}

	function onTypeChanged(e) {
		var value = this.value();
		if ((!isEditApproveNotifications && value == '@UvedType.Item1.GetEnumCode()') ||
			(!isEditOtherNotifications && value != '@UvedType.Item1.GetEnumCode()')) {
			$('#save').attr("disabled", true);
		} else {
			$('#save').attr("disabled", false);
		}
		changeRejectionReasonVisability(value);
		changeAnnexVisability(value);
	}

	function changeRejectionReasonVisability(value) {
		let rejectionReasonTypeFieldset = $('#rejectionReasonTypesFieldset');
		let rejectionReasonTypeOther =
			rejectionReasonTypeFieldset.find('#'+'@nameof(RejectionReasonType)' +
				'@RejectionReasonType.Other.GetEnumCode()');

		if (value == '@UvedType.Item4.GetEnumCode()' || value == '@UvedType.Item5.GetEnumCode()') {
			$('#RejectionReason').show();
			$('label[for="RejectionReason"]').show();

			if (value == '@UvedType.Item5.GetEnumCode()') {
				rejectionReasonTypeOther.bind("change", onRejectionReasonTypeChanged);
				rejectionReasonTypeOther.trigger("change");
				rejectionReasonTypeFieldset.show();
			} else {
				rejectionReasonTypeFieldset.find('input.k-checkbox').attr('checked', false);
				rejectionReasonTypeOther.unbind("change", onRejectionReasonTypeChanged);
				rejectionReasonTypeFieldset.hide();
			}
		} else {
			$('#RejectionReason').val('');
			$('#RejectionReason').hide();
			$('label[for="RejectionReason"]').hide();

			rejectionReasonTypeFieldset.find('input.k-checkbox').attr('checked', false);
			rejectionReasonTypeOther.unbind("change", onRejectionReasonTypeChanged);
			rejectionReasonTypeFieldset.hide();
		}
	}

	function onRejectionReasonTypeChanged(e) {
		var value = this.checked;
		changeRejectionReasonAvailability(value);
	}

	function changeRejectionReasonAvailability(value) {
		if (value) {
			$('#RejectionReason').show();
			$('label[for="RejectionReason"]').show();
		} else {
			$('#RejectionReason').val('');
			$('#RejectionReason').hide();
			$('label[for="RejectionReason"]').hide();
		}
	}

	function changeAnnexVisability(value) {
		if (value == '@UvedType.Item1.GetEnumCode()' || value == '@UvedType.Item5.GetEnumCode()') {
			$('#Annex').show();
			$('label[for="Annex"]').show();
		} else {
			$('#Annex').val('');
			$('#Annex').hide();
			$('label[for="Annex"]').hide();
		}
	}
</script>